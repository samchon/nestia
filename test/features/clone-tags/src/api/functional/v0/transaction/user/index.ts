/**
 * @module api.functional.v0.transaction.user
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { TagBase } from "typia/lib/tags/TagBase";

/**
 * @controller TransactionController.findTransactionsByUser
 * @path GET /v0/transaction/user/:pubkey
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findTransactionsByUser(
  connection: IConnection,
  pubkey: string &
    TagBase<{
      target: "string";
      kind: "regexPattern";
      value: "/^[0-9a-fA-F]+$/";
      validate: "RegExp(/^[0-9a-fA-F]+$/).test($input)";
      exclusive: false;
      schema: {};
    }> &
    TagBase<{
      target: "string";
      kind: "lengthDivisibleBy";
      value: 2;
      validate: "$input.length % 2 === 0";
      exclusive: false;
    }>,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...findTransactionsByUser.METADATA,
    template: findTransactionsByUser.METADATA.path,
    path: findTransactionsByUser.path(pubkey),
  });
}
export namespace findTransactionsByUser {
  export const METADATA = {
    method: "GET",
    path: "/v0/transaction/user/:pubkey",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    pubkey: string &
      TagBase<{
        target: "string";
        kind: "regexPattern";
        value: "/^[0-9a-fA-F]+$/";
        validate: "RegExp(/^[0-9a-fA-F]+$/).test($input)";
        exclusive: false;
        schema: {};
      }> &
      TagBase<{
        target: "string";
        kind: "lengthDivisibleBy";
        value: 2;
        validate: "$input.length % 2 === 0";
        exclusive: false;
      }>,
  ) =>
    `/v0/transaction/user/${encodeURIComponent(pubkey?.toString() ?? "null")}`;
}
