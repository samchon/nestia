/**
 * @module api.functional.implicit
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";

/**
 * @controller ImplicitController.number
 * @path GET /implicit/number
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function number(connection: IConnection): Promise<number.Output> {
  return PlainFetcher.fetch(connection, {
    ...number.METADATA,
    template: number.METADATA.path,
    path: number.path(),
  });
}
export namespace number {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/number",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/number";
}

/**
 * @controller ImplicitController.object1
 * @path GET /implicit/object1
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function object1(
  connection: IConnection,
): Promise<object1.Output> {
  return PlainFetcher.fetch(connection, {
    ...object1.METADATA,
    template: object1.METADATA.path,
    path: object1.path(),
  });
}
export namespace object1 {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/object1",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/object1";
}

/**
 * @controller ImplicitController.object2
 * @path GET /implicit/object2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function object2(
  connection: IConnection,
): Promise<object2.Output> {
  return PlainFetcher.fetch(connection, {
    ...object2.METADATA,
    template: object2.METADATA.path,
    path: object2.path(),
  });
}
export namespace object2 {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/object2",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/object2";
}

/**
 * @controller ImplicitController.objectConstant
 * @path GET /implicit/objectConstant
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function objectConstant(
  connection: IConnection,
): Promise<objectConstant.Output> {
  return PlainFetcher.fetch(connection, {
    ...objectConstant.METADATA,
    template: objectConstant.METADATA.path,
    path: objectConstant.path(),
  });
}
export namespace objectConstant {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/objectConstant",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/objectConstant";
}

/**
 * @controller ImplicitController.array
 * @path GET /implicit/array
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function array(connection: IConnection): Promise<array.Output> {
  return PlainFetcher.fetch(connection, {
    ...array.METADATA,
    template: array.METADATA.path,
    path: array.path(),
  });
}
export namespace array {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/array",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/array";
}

/**
 * @controller ImplicitController.arrayUnion
 * @path GET /implicit/arrayUnion
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function arrayUnion(
  connection: IConnection,
): Promise<arrayUnion.Output> {
  return PlainFetcher.fetch(connection, {
    ...arrayUnion.METADATA,
    template: arrayUnion.METADATA.path,
    path: arrayUnion.path(),
  });
}
export namespace arrayUnion {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/arrayUnion",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/arrayUnion";
}

/**
 * @controller ImplicitController.matrix
 * @path GET /implicit/matrix
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function matrix(connection: IConnection): Promise<matrix.Output> {
  return PlainFetcher.fetch(connection, {
    ...matrix.METADATA,
    template: matrix.METADATA.path,
    path: matrix.path(),
  });
}
export namespace matrix {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/matrix",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/matrix";
}

/**
 * @controller ImplicitController.matrixUnion
 * @path GET /implicit/matrixUnion
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function matrixUnion(
  connection: IConnection,
): Promise<matrixUnion.Output> {
  return PlainFetcher.fetch(connection, {
    ...matrixUnion.METADATA,
    template: matrixUnion.METADATA.path,
    path: matrixUnion.path(),
  });
}
export namespace matrixUnion {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/matrixUnion",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/matrixUnion";
}

/**
 * @controller ImplicitController.tuple
 * @path GET /implicit/tuple
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function tuple(connection: IConnection): Promise<tuple.Output> {
  return PlainFetcher.fetch(connection, {
    ...tuple.METADATA,
    template: tuple.METADATA.path,
    path: tuple.path(),
  });
}
export namespace tuple {
  export type Output = Primitive<any>;

  export const METADATA = {
    method: "GET",
    path: "/implicit/tuple",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/implicit/tuple";
}
