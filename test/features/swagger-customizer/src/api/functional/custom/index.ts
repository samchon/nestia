/**
 * @module api.functional.custom
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, tags } from "typia";

/**
 * @controller CustomController.customize
 * @path GET /custom/:key/:value/customize
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function customize(
  connection: IConnection,
  __key: number,
  __value: string,
): Promise<customize.Output> {
  return PlainFetcher.fetch(connection, {
    ...customize.METADATA,
    template: customize.METADATA.path,
    path: customize.path(__key, __value),
  });
}
export namespace customize {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/custom/:key/:value/customize",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (__key: number, __value: string) =>
    `/custom/${encodeURIComponent(__key?.toString() ?? "null")}/${encodeURIComponent(__value?.toString() ?? "null")}/customize`;
}

/**
 * @controller CustomController.normal
 * @path GET /custom/:id/normal
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function normal(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<normal.Output> {
  return PlainFetcher.fetch(connection, {
    ...normal.METADATA,
    template: normal.METADATA.path,
    path: normal.path(id),
  });
}
export namespace normal {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/custom/:id/normal",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/custom/${encodeURIComponent(id?.toString() ?? "null")}/normal`;
}
