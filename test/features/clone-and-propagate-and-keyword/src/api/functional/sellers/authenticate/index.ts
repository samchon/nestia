/**
 * @module api.functional.sellers.authenticate
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { HttpError, IConnection, IPropagation } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { ISeller } from "../../../structures/ISeller";

export * as password from "./password";

/**
 * Join as a seller.
 *
 * @param props.input Information of yours
 * @returns Information of newly joined seller
 * @setHeader authorization.token Authorization
 *
 * @controller SellerAuthenticateController.join
 * @path POST /sellers/authenticate/join
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Output> {
  const output: IPropagation<
    {
      201: ISeller.IAuthorized;
    },
    201
  > =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await EncryptedFetcher.propagate<any, any>(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "text/plain",
            },
          },
          {
            ...join.METADATA,
            template: join.METADATA.path,
            path: join.path(),
          },
          props.input,
        );
  if (output.success) {
    connection.headers ??= {};
    connection.headers.Authorization = output.data.authorization.token;
  }
  return output;
}
export namespace join {
  export type Props = {
    /** Information of yours */
    input: Body;
  };
  export type Body = ISeller.IJoin;
  export type Output = IPropagation<
    {
      201: ISeller.IAuthorized;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/sellers/authenticate/join",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: 201,
  } as const;

  export const path = () => "/sellers/authenticate/join";
  export const random = (): Resolved<ISeller.IAuthorized> =>
    typia.random<ISeller.IAuthorized>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "text/plain",
    });
    try {
      assert.body(() => typia.assert(props.input));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "text/plain",
      },
      data: random(),
    } as Output;
  };
}

/**
 * Log-in as a seller.
 *
 * @param props.input Email and password
 * @returns Information of the seller
 * @assignHeaders authorization
 *
 * @controller SellerAuthenticateController.login
 * @path POST /sellers/authenticate/login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Output> {
  const output: IPropagation<
    {
      201: ISeller.IAuthorized;
    },
    201
  > =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await EncryptedFetcher.propagate<any, any>(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "text/plain",
            },
          },
          {
            ...login.METADATA,
            template: login.METADATA.path,
            path: login.path(),
          },
          props.input,
        );
  if (output.success) {
    connection.headers ??= {};
    Object.assign(connection.headers, output.data.authorization);
  }
  return output;
}
export namespace login {
  export type Props = {
    /** Email and password */
    input: Body;
  };
  export type Body = ISeller.ILogin;
  export type Output = IPropagation<
    {
      201: ISeller.IAuthorized;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/sellers/authenticate/login",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: 201,
  } as const;

  export const path = () => "/sellers/authenticate/login";
  export const random = (): Resolved<ISeller.IAuthorized> =>
    typia.random<ISeller.IAuthorized>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "text/plain",
    });
    try {
      assert.body(() => typia.assert(props.input));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "text/plain",
      },
      data: random(),
    } as Output;
  };
}

/**
 * Erase the seller by itself.
 *
 * @controller SellerAuthenticateController.exit
 * @path DELETE /sellers/authenticate/exit
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function exit(connection: IConnection): Promise<exit.Output> {
  return true === connection.simulate
    ? exit.simulate(connection)
    : PlainFetcher.propagate<any, any>(connection, {
        ...exit.METADATA,
        template: exit.METADATA.path,
        path: exit.path(),
      });
}
export namespace exit {
  export type Output = IPropagation<
    {
      200: void;
    },
    200
  >;

  export const METADATA = {
    method: "DELETE",
    path: "/sellers/authenticate/exit",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/sellers/authenticate/exit";
  export const random = (): Resolved<void> => typia.random<void>();
  export const simulate = (_connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}
