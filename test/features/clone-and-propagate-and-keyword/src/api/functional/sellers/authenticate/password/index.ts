/**
 * @module api.functional.sellers.authenticate.password
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { HttpError, IConnection, IPropagation } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import type { Resolved } from "typia";
import typia from "typia";

import type { ISeller } from "../../../../structures/ISeller";

/**
 * Change password.
 *
 * @param props.input Old and new passwords
 * @returns Empty object
 * @controller SellerAuthenticateController.change
 * @path PATCH /sellers/authenticate/password/change
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function change(
  connection: IConnection,
  props: change.Props,
): Promise<change.Output> {
  return true === connection.simulate
    ? change.simulate(connection, props)
    : EncryptedFetcher.propagate<any, any>(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "text/plain",
          },
        },
        {
          ...change.METADATA,
          template: change.METADATA.path,
          path: change.path(),
        },
        props.input,
      );
}
export namespace change {
  export type Props = {
    /** Old and new passwords */
    input: Body;
  };
  export type Body = ISeller.IChangePassword;
  export type Output = IPropagation<
    {
      200: void;
    },
    200
  >;

  export const METADATA = {
    method: "PATCH",
    path: "/sellers/authenticate/password/change",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/sellers/authenticate/password/change";
  export const random = (): Resolved<void> => typia.random<void>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.input));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}
