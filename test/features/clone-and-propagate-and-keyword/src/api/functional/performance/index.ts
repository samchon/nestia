/**
 * @module api.functional.performance
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { process } from "../../structures/process";

/**
 * @controller PerformanceController.cpu
 * @path GET /performance/cpu
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cpu(connection: IConnection): Promise<cpu.Output> {
  return true === connection.simulate
    ? cpu.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...cpu.METADATA,
        template: cpu.METADATA.path,
        path: cpu.path(),
      });
}
export namespace cpu {
  export type Output = IPropagation<
    {
      200: process.global.NodeJS.CpuUsage;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/performance/cpu",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/performance/cpu";
  export const random = (): Resolved<process.global.NodeJS.CpuUsage> =>
    typia.random<process.global.NodeJS.CpuUsage>();
  export const simulate = (_connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}

/**
 * @controller PerformanceController.memory
 * @path GET /performance/memory
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function memory(connection: IConnection): Promise<memory.Output> {
  return true === connection.simulate
    ? memory.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...memory.METADATA,
        template: memory.METADATA.path,
        path: memory.path(),
      });
}
export namespace memory {
  export type Output = IPropagation<
    {
      200: process.global.NodeJS.MemoryUsage;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/performance/memory",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/performance/memory";
  export const random = (): Resolved<process.global.NodeJS.MemoryUsage> =>
    typia.random<process.global.NodeJS.MemoryUsage>();
  export const simulate = (_connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}

/**
 * @controller PerformanceController.resource
 * @path GET /performance/resource
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function resource(
  connection: IConnection,
): Promise<resource.Output> {
  return true === connection.simulate
    ? resource.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...resource.METADATA,
        template: resource.METADATA.path,
        path: resource.path(),
      });
}
export namespace resource {
  export type Output = IPropagation<
    {
      200: process.global.NodeJS.ResourceUsage;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/performance/resource",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/performance/resource";
  export const random = (): Resolved<process.global.NodeJS.ResourceUsage> =>
    typia.random<process.global.NodeJS.ResourceUsage>();
  export const simulate = (_connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}
