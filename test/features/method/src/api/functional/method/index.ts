/**
 * @module api.functional.method
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

/**
 * @controller MethodController.head
 * @path HEAD /method/head
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function head(connection: IConnection): Promise<void> {
  return true === connection.simulate
    ? head.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...head.METADATA,
        template: head.METADATA.path,
        path: head.path(),
      });
}
export namespace head {
  export const METADATA = {
    method: "HEAD",
    path: "/method/head",
    request: null,
    response: null,
    status: 200,
  } as const;

  export const path = () => "/method/head";
  export const random = (): Resolved<void> => typia.random<void>();
  export const simulate = (_connection: IConnection): void => {
    return random();
  };
}
