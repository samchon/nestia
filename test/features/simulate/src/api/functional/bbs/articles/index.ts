/**
 * @module api.functional.bbs.articles
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, Resolved, tags } from "typia";
import typia from "typia";

import type { IBbsArticle } from "../../../structures/IBbsArticle";
import type { IPage } from "../../../structures/IPage";

/**
 * Paginate entire articles.
 *
 * @param section Section code
 * @param input Page request info
 * @returns Paginated articles with summarized info
 * @controller BbsArticlesController.index
 * @path PATCH /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  section: string | null,
  input: index.Body,
): Promise<index.Output> {
  return true === connection.simulate
    ? index.simulate(connection, section, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          template: index.METADATA.path,
          path: index.path(section),
        },
        input,
      );
}
export namespace index {
  export type Body = Primitive<IPage.IRequest>;
  export type Output = Primitive<IPage<IBbsArticle.ISummary>>;

  export const METADATA = {
    method: "PATCH",
    path: "/bbs/:section/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (section: string | null) =>
    `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles`;
  export const random = (): Resolved<Primitive<IPage<IBbsArticle.ISummary>>> =>
    typia.random<Primitive<IPage<IBbsArticle.ISummary>>>();
  export const simulate = (
    connection: IConnection,
    section: string | null,
    input: Body,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.body(() => typia.assert(input));
    return random();
  };
}

/**
 * Paginate entire articles (query ver.).
 *
 * @param section Section code
 * @param input Page request info
 * @returns Paginated articles with summarized info
 * @controller BbsArticlesController.query
 * @path GET /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function query(
  connection: IConnection,
  section: string | null,
  input: query.Query,
): Promise<query.Output> {
  return true === connection.simulate
    ? query.simulate(connection, section, input)
    : PlainFetcher.fetch(connection, {
        ...query.METADATA,
        template: query.METADATA.path,
        path: query.path(section, input),
      });
}
export namespace query {
  export type Query = Resolved<IPage.IRequest>;
  export type Output = Primitive<IPage<IBbsArticle.ISummary>>;

  export const METADATA = {
    method: "GET",
    path: "/bbs/:section/articles",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (section: string | null, input: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(input as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): Resolved<Primitive<IPage<IBbsArticle.ISummary>>> =>
    typia.random<Primitive<IPage<IBbsArticle.ISummary>>>();
  export const simulate = (
    connection: IConnection,
    section: string | null,
    input: Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section, input),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.query(() => typia.assert(input));
    return random();
  };
}

/**
 * Read an article.
 *
 * @param section Section code
 * @param id Target article ID
 * @returns Detailed article info
 * @controller BbsArticlesController.at
 * @path GET /bbs/:section/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  section: string,
  id: (string & tags.Format<"uuid">) | null,
): Promise<at.Output> {
  return true === connection.simulate
    ? at.simulate(connection, section, id)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        template: at.METADATA.path,
        path: at.path(section, id),
      });
}
export namespace at {
  export type Output = Primitive<IBbsArticle>;

  export const METADATA = {
    method: "GET",
    path: "/bbs/:section/articles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    section: string,
    id: (string & tags.Format<"uuid">) | null,
  ) =>
    `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<IBbsArticle>> =>
    typia.random<Primitive<IBbsArticle>>();
  export const simulate = (
    connection: IConnection,
    section: string,
    id: (string & tags.Format<"uuid">) | null,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section, id),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.param("id")(() => typia.assert(id));
    return random();
  };
}

/**
 * Get first article of a day.
 *
 * @param section Section code
 * @param date Target data
 * @returns The first article info
 * @controller BbsArticlesController.first
 * @path GET /bbs/:section/articles/first/:date
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function first(
  connection: IConnection,
  section: string,
  date: string & tags.Format<"date">,
): Promise<first.Output> {
  return true === connection.simulate
    ? first.simulate(connection, section, date)
    : PlainFetcher.fetch(connection, {
        ...first.METADATA,
        template: first.METADATA.path,
        path: first.path(section, date),
      });
}
export namespace first {
  export type Output = Primitive<IBbsArticle>;

  export const METADATA = {
    method: "GET",
    path: "/bbs/:section/articles/first/:date",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (section: string, date: string & tags.Format<"date">) =>
    `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles/first/${encodeURIComponent(date?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<IBbsArticle>> =>
    typia.random<Primitive<IBbsArticle>>();
  export const simulate = (
    connection: IConnection,
    section: string,
    date: string & tags.Format<"date">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section, date),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.param("date")(() => typia.assert(date));
    return random();
  };
}

/**
 * Store a new article.
 *
 * @param section Section code
 * @param input Content to store
 * @returns Newly archived article
 * @controller BbsArticlesController.store
 * @path POST /bbs/:section/articles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
  connection: IConnection,
  section: string,
  input: store.Body,
): Promise<store.Output> {
  return true === connection.simulate
    ? store.simulate(connection, section, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...store.METADATA,
          template: store.METADATA.path,
          path: store.path(section),
        },
        input,
      );
}
export namespace store {
  export type Body = Primitive<IBbsArticle.IStore>;
  export type Output = Primitive<IBbsArticle>;

  export const METADATA = {
    method: "POST",
    path: "/bbs/:section/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (section: string) =>
    `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles`;
  export const random = (): Resolved<Primitive<IBbsArticle>> =>
    typia.random<Primitive<IBbsArticle>>();
  export const simulate = (
    connection: IConnection,
    section: string,
    input: Body,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.body(() => typia.assert(input));
    return random();
  };
}

/**
 * Update an article.
 *
 * @param section Section code
 * @param id Target article ID
 * @param input Content to update
 * @returns Updated content
 * @controller BbsArticlesController.update
 * @path PUT /bbs/:section/articles/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  section: string,
  id: string & tags.Format<"uuid">,
  input: update.Body,
): Promise<update.Output> {
  return true === connection.simulate
    ? update.simulate(connection, section, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          template: update.METADATA.path,
          path: update.path(section, id),
        },
        input,
      );
}
export namespace update {
  export type Body = Primitive<IBbsArticle.IStore>;
  export type Output = Primitive<IBbsArticle>;

  export const METADATA = {
    method: "PUT",
    path: "/bbs/:section/articles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (section: string, id: string & tags.Format<"uuid">) =>
    `/bbs/${encodeURIComponent(section?.toString() ?? "null")}/articles/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<IBbsArticle>> =>
    typia.random<Primitive<IBbsArticle>>();
  export const simulate = (
    connection: IConnection,
    section: string,
    id: string & tags.Format<"uuid">,
    input: Body,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(section, id),
      contentType: "application/json",
    });
    assert.param("section")(() => typia.assert(section));
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random();
  };
}
