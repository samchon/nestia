/**
 * @module api.functional.partial_dto_test.partial_type
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { HttpError, IConnection, IPropagation } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { PartialPickIOriginalbemailcreated_atoriginal_optionalundefinable_attr } from "../../../structures/PartialPickIOriginalbemailcreated_atoriginal_optionalundefinable_attr";
import type { PartialPickIOriginaldemailcreated_atoriginal_optionalundefinable_attr } from "../../../structures/PartialPickIOriginaldemailcreated_atoriginal_optionalundefinable_attr";

/**
 * @controller PartialDTOTestController.partialType
 * @path POST /partial-dto-test/partial-type
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function partialType(
  connection: IConnection,
  body: partialType.Body,
): Promise<partialType.Output> {
  return true === connection.simulate
    ? partialType.simulate(connection, body)
    : PlainFetcher.propagate<any, any>(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...partialType.METADATA,
          template: partialType.METADATA.path,
          path: partialType.path(),
        },
        body,
      );
}
export namespace partialType {
  export type Body =
    PartialPickIOriginaldemailcreated_atoriginal_optionalundefinable_attr;
  export type Output = IPropagation<
    {
      201: PartialPickIOriginalbemailcreated_atoriginal_optionalundefinable_attr;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/partial-dto-test/partial-type",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/partial-dto-test/partial-type";
  export const random =
    (): Resolved<PartialPickIOriginalbemailcreated_atoriginal_optionalundefinable_attr> =>
      typia.random<PartialPickIOriginalbemailcreated_atoriginal_optionalundefinable_attr>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}
