/**
 * @module api.functional.partial_dto_test
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { IOriginal } from "../../structures/IOriginal";

export * as partial_interface from "./partial_interface";
export * as partial_type from "./partial_type";

/**
 * @controller PartialDTOTestController.original
 * @path GET /partial-dto-test/original
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function original(
  connection: IConnection,
): Promise<original.Output> {
  return true === connection.simulate
    ? original.simulate(connection)
    : PlainFetcher.propagate<any>(connection, {
        ...original.METADATA,
        template: original.METADATA.path,
        path: original.path(),
      });
}
export namespace original {
  export type Output = IPropagation<
    {
      200: IOriginal;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/partial-dto-test/original",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/partial-dto-test/original";
  export const random = (): Resolved<IOriginal> => typia.random<IOriginal>();
  export const simulate = (_connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(),
    } as Output;
  };
}
