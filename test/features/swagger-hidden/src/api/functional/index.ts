/**
 * @module api.functional
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";

/**
 * @internal
 * @controller AppController.internal
 * @path GET /internal
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function internal(
  connection: IConnection,
): Promise<internal.Output> {
  return PlainFetcher.fetch(connection, {
    ...internal.METADATA,
    template: internal.METADATA.path,
    path: internal.path(),
  });
}
export namespace internal {
  export type Output = Primitive<Array<number>>;

  export const METADATA = {
    method: "GET",
    path: "/internal",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/internal";
}

/**
 * @ignore
 * @controller AppController.hidden
 * @path GET /hidden
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function hidden(connection: IConnection): Promise<hidden.Output> {
  return PlainFetcher.fetch(connection, {
    ...hidden.METADATA,
    template: hidden.METADATA.path,
    path: hidden.path(),
  });
}
export namespace hidden {
  export type Output = Primitive<Array<number>>;

  export const METADATA = {
    method: "GET",
    path: "/hidden",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/hidden";
}
