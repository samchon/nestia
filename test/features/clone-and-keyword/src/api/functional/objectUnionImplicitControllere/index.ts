/**
 * @module api.functional.objectUnionImplicitControllere
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { ICircle } from "../../structures/ICircle";
import type { ILine } from "../../structures/ILine";
import type { IPoint } from "../../structures/IPoint";
import type { IPolygon } from "../../structures/IPolygon";
import type { IPolyline } from "../../structures/IPolyline";
import type { IRectangle } from "../../structures/IRectangle";
import type { ITriangle } from "../../structures/ITriangle";

/**
 * @controller ObjectUnionImplicitController.get
 * @path GET /objectUnionImplicitControllere
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return true === connection.simulate
    ? get.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...get.METADATA,
        template: get.METADATA.path,
        path: get.path(),
      });
}
export namespace get {
  export type Output = (
    | IPoint.o1
    | ILine
    | ITriangle
    | IRectangle
    | IPolyline.o1
    | IPolygon
    | ICircle
  )[];

  export const METADATA = {
    method: "GET",
    path: "/objectUnionImplicitControllere",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/objectUnionImplicitControllere";
  export const random = (): Resolved<
    (
      | IPoint.o1
      | ILine
      | ITriangle
      | IRectangle
      | IPolyline.o1
      | IPolygon
      | ICircle
    )[]
  > =>
    typia.random<
      (
        | IPoint.o1
        | ILine
        | ITriangle
        | IRectangle
        | IPolyline.o1
        | IPolygon
        | ICircle
      )[]
    >();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
