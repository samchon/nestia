/**
 * @module api.functional.objectLiteral
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { ObjectLietral } from "../../structures/ObjectLietral";

export * as literal from "./literal";

/**
 * @controller ObjectLiteralController.index
 * @path GET /objectLiteral
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Output> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...index.METADATA,
        template: index.METADATA.path,
        path: index.path(),
      });
}
export namespace index {
  export type Output = ObjectLietral[];

  export const METADATA = {
    method: "GET",
    path: "/objectLiteral",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/objectLiteral";
  export const random = (): Resolved<ObjectLietral[]> =>
    typia.random<ObjectLietral[]>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
