/**
 * @module api.functional.objectLiteral.literal
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";
import type { Type } from "typia/lib/tags/Type";

/**
 * @controller ObjectLiteralController.literals
 * @path GET /objectLiteral/literal
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function literals(
  connection: IConnection,
): Promise<literals.Output> {
  return true === connection.simulate
    ? literals.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...literals.METADATA,
        template: literals.METADATA.path,
        path: literals.path(),
      });
}
export namespace literals {
  export type Output = {
    id: string;
    member: {
      id: string & Format<"uuid">;
      email: string & Format<"email">;
      age: number & Type<"uint32">;
    };
    created_at: string & Format<"date-time">;
  }[];

  export const METADATA = {
    method: "GET",
    path: "/objectLiteral/literal",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/objectLiteral/literal";
  export const random = (): Resolved<
    {
      id: string;
      member: {
        id: string & Format<"uuid">;
        email: string & Format<"email">;
        age: number & Type<"uint32">;
      };
      created_at: string & Format<"date-time">;
    }[]
  > =>
    typia.random<
      {
        id: string;
        member: {
          id: string & Format<"uuid">;
          email: string & Format<"email">;
          age: number & Type<"uint32">;
        };
        created_at: string & Format<"date-time">;
      }[]
    >();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
