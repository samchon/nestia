/**
 * @module api.functional.arrayRecursive
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

import type { ICategory } from "../../structures/ICategory";

/**
 * @controller ArrayRecursiveController.index
 * @path GET /arrayRecursive
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Output> {
  return true === connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...index.METADATA,
        template: index.METADATA.path,
        path: index.path(),
      });
}
export namespace index {
  export type Output = ICategory[];

  export const METADATA = {
    method: "GET",
    path: "/arrayRecursive",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/arrayRecursive";
  export const random = (): Resolved<ICategory[]> =>
    typia.random<ICategory[]>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}

/**
 * @controller ArrayRecursiveController.at
 * @path GET /arrayRecursive/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Output> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        template: at.METADATA.path,
        path: at.path(props),
      });
}
export namespace at {
  export type Props = {
    id: number;
  };
  export type Output = ICategory;

  export const METADATA = {
    method: "GET",
    path: "/arrayRecursive/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (props: Props) =>
    `/arrayRecursive/${encodeURIComponent(props.id?.toString() ?? "null")}`;
  export const random = (): Resolved<ICategory> => typia.random<ICategory>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(props),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(props.id));
    return random();
  };
}

/**
 * @controller ArrayRecursiveController.store
 * @path POST /arrayRecursive
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
  connection: IConnection,
  props: store.Props,
): Promise<store.Output> {
  return true === connection.simulate
    ? store.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...store.METADATA,
          template: store.METADATA.path,
          path: store.path(),
        },
        props.body,
      );
}
export namespace store {
  export type Props = {
    body: Body;
  };
  export type Body = ICategory;
  export type Output = ICategory;

  export const METADATA = {
    method: "POST",
    path: "/arrayRecursive",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/arrayRecursive";
  export const random = (): Resolved<ICategory> => typia.random<ICategory>();
  export const simulate = (connection: IConnection, props: Props): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(props.body));
    return random();
  };
}
