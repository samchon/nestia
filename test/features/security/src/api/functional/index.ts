/**
 * @module api.functional
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";

import type { IToken } from "../structures/IToken";

/**
 * @controller SecurityController.basic
 * @path GET /basic
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic(connection: IConnection): Promise<basic.Output> {
  return PlainFetcher.fetch(connection, {
    ...basic.METADATA,
    template: basic.METADATA.path,
    path: basic.path(),
  });
}
export namespace basic {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/basic",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/basic";
}

/**
 * @security basic
 * @controller SecurityController.basic_by_comment
 * @path GET /basic_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function basic_by_comment(
  connection: IConnection,
): Promise<basic_by_comment.Output> {
  return PlainFetcher.fetch(connection, {
    ...basic_by_comment.METADATA,
    template: basic_by_comment.METADATA.path,
    path: basic_by_comment.path(),
  });
}
export namespace basic_by_comment {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/basic_by_comment",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/basic_by_comment";
}

/**
 * @controller SecurityController.bearer
 * @path GET /bearer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer(connection: IConnection): Promise<bearer.Output> {
  return PlainFetcher.fetch(connection, {
    ...bearer.METADATA,
    template: bearer.METADATA.path,
    path: bearer.path(),
  });
}
export namespace bearer {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/bearer",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/bearer";
}

/**
 * @security bearer
 * @controller SecurityController.bearer_by_comment
 * @path GET /bearer_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function bearer_by_comment(
  connection: IConnection,
): Promise<bearer_by_comment.Output> {
  return PlainFetcher.fetch(connection, {
    ...bearer_by_comment.METADATA,
    template: bearer_by_comment.METADATA.path,
    path: bearer_by_comment.path(),
  });
}
export namespace bearer_by_comment {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/bearer_by_comment",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/bearer_by_comment";
}

/**
 * @controller SecurityController.oauth2
 * @path GET /oauth2
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2(connection: IConnection): Promise<oauth2.Output> {
  return PlainFetcher.fetch(connection, {
    ...oauth2.METADATA,
    template: oauth2.METADATA.path,
    path: oauth2.path(),
  });
}
export namespace oauth2 {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/oauth2",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/oauth2";
}

/**
 * @security oauth2 write:pets read:pets
 * @controller SecurityController.oauth2_by_comment
 * @path GET /oauth2_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function oauth2_by_comment(
  connection: IConnection,
): Promise<oauth2_by_comment.Output> {
  return PlainFetcher.fetch(connection, {
    ...oauth2_by_comment.METADATA,
    template: oauth2_by_comment.METADATA.path,
    path: oauth2_by_comment.path(),
  });
}
export namespace oauth2_by_comment {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/oauth2_by_comment",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/oauth2_by_comment";
}

/**
 * @security
 * @security bearer
 * @controller SecurityController.optional_by_comment
 * @path GET /optional_by_comment
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function optional_by_comment(
  connection: IConnection,
): Promise<optional_by_comment.Output> {
  return PlainFetcher.fetch(connection, {
    ...optional_by_comment.METADATA,
    template: optional_by_comment.METADATA.path,
    path: optional_by_comment.path(),
  });
}
export namespace optional_by_comment {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/optional_by_comment",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/optional_by_comment";
}

/**
 * @controller SecurityController.security
 * @path GET /security
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function security(
  connection: IConnection,
): Promise<security.Output> {
  return PlainFetcher.fetch(connection, {
    ...security.METADATA,
    template: security.METADATA.path,
    path: security.path(),
  });
}
export namespace security {
  export type Output = Primitive<IToken>;

  export const METADATA = {
    method: "GET",
    path: "/security",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/security";
}
