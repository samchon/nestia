/**
 * @packageDocumentation
 * @module api.functional.alias
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive } from "typia";

import type { IAliasBase } from "../../structures/IAliasBase";
import type { IGeneric } from "../../structures/IGeneric";

/**
 * @controller AliasController.get
 * @path GET /alias
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(),
  });
}
export namespace get {
  export type Output = IPropagation<
    {
      200: Primitive<IAliasBase>;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/alias",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/alias";
}

/**
 * @controller AliasController.generic
 * @path GET /alias/generic
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function generic(
  connection: IConnection,
): Promise<generic.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...generic.METADATA,
    template: generic.METADATA.path,
    path: generic.path(),
  });
}
export namespace generic {
  export type Output = IPropagation<
    {
      200: Primitive<IGeneric>;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/alias/generic",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/alias/generic";
}
