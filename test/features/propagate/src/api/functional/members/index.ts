/**
 * @module api.functional.members
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import type { Primitive } from "typia";

import type { IForbidden } from "../../structures/IForbidden";
import type { IMember } from "../../structures/IMember";
import type { INotFound } from "../../structures/INotFound";

/**
 * @throws 403
 * @throws 404
 * @throws 422
 * @controller MembersController.login
 * @path POST /members/login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  input: login.Body,
): Promise<login.Output> {
  return EncryptedFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...login.METADATA,
      template: login.METADATA.path,
      path: login.path(),
    },
    input,
  );
}
export namespace login {
  export type Body = Primitive<IMember.ILogin>;
  export type Output = IPropagation<
    {
      201: Primitive<IMember>;
      403: Primitive<IForbidden>;
      404: Primitive<INotFound>;
      422: Primitive<IForbidden.IExpired>;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/members/login",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: 201,
  } as const;

  export const path = () => "/members/login";
}
