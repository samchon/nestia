/**
 * @module api.functional.plain
 * @packageDocumentation
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Resolved } from "typia";
import typia from "typia";

/**
 * @controller PlainController.string
 * @path POST /plain/string
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function string(
  connection: IConnection,
  body: string.Body,
): Promise<string.Output> {
  return true === connection.simulate
    ? string.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "text/plain",
          },
        },
        {
          ...string.METADATA,
          template: string.METADATA.path,
          path: string.path(),
        },
        body,
      );
}
export namespace string {
  export type Body = Resolved<string>;
  export type Output = Resolved<string>;

  export const METADATA = {
    method: "POST",
    path: "/plain/string",
    request: {
      type: "text/plain",
      encrypted: false,
    },
    response: {
      type: "text/plain",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/plain/string";
  export const random = (): Resolved<Resolved<string>> =>
    typia.random<Resolved<string>>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "text/plain",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}

/**
 * @controller PlainController.template
 * @path POST /plain/template
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function template(
  connection: IConnection,
  body: template.Body,
): Promise<template.Output> {
  return true === connection.simulate
    ? template.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "text/plain",
          },
        },
        {
          ...template.METADATA,
          template: template.METADATA.path,
          path: template.path(),
        },
        body,
      );
}
export namespace template {
  export type Body =
    Resolved<`something_${number}_interesting_${string}_is_not_${boolean}_it?`>;
  export type Output = Resolved<string>;

  export const METADATA = {
    method: "POST",
    path: "/plain/template",
    request: {
      type: "text/plain",
      encrypted: false,
    },
    response: {
      type: "text/plain",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/plain/template";
  export const random = (): Resolved<Resolved<string>> =>
    typia.random<Resolved<string>>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "text/plain",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}

/**
 * @controller PlainController.constant
 * @path POST /plain/constant
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function constant(
  connection: IConnection,
  body: constant.Body,
): Promise<constant.Output> {
  return true === connection.simulate
    ? constant.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "text/plain",
          },
        },
        {
          ...constant.METADATA,
          template: constant.METADATA.path,
          path: constant.path(),
        },
        body,
      );
}
export namespace constant {
  export type Body = Resolved<"A" | "B" | "C">;
  export type Output = Resolved<string>;

  export const METADATA = {
    method: "POST",
    path: "/plain/constant",
    request: {
      type: "text/plain",
      encrypted: false,
    },
    response: {
      type: "text/plain",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/plain/constant";
  export const random = (): Resolved<Resolved<string>> =>
    typia.random<Resolved<string>>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "text/plain",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}
