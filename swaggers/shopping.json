{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "http://localhost:37001",
      "description": "Local Server"
    }
  ],
  "info": {
    "version": "0.5.0",
    "title": "@samchon/shopping-backend",
    "description": "Backend for shopping",
    "license": {
      "name": "MIT"
    }
  },
  "paths": {
    "/monitors/health": {
      "get": {
        "summary": "Health check API",
        "description": "Health check API.",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/monitors/performance": {
      "get": {
        "summary": "Get performance information",
        "description": "Get performance information.\n\nGet perofmration information composed with CPU, memory and resource usage.",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Performance info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPerformance"
                }
              }
            }
          }
        }
      }
    },
    "/monitors/system": {
      "get": {
        "summary": "Get system information",
        "description": "Get system information.\n\nGet system information with commit and package information.\n\nAs such information is a type of sensitive, response be encrypted.",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "System info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISystem"
                }
              }
            }
          }
        }
      }
    },
    "/monitors/system/internal_server_error": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/monitors/system/uncaught_exception": {
      "get": {
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/shoppings/admins/authenticate": {
      "get": {
        "summary": "Get administrator information",
        "description": "Get administrator information.\n\nGet {@link IShoppingAdministrator.IInvert administrator} information of\ncurrent {@link IShoppingCustomer customer}.\n\nIf current {@link IShoppingMember member} is not an administrator,\nit throws 403 forbidden exception.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Admin info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingAdministrator.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Join as an administrator",
        "description": "Join as an administrator.\n\nJoin as an administrator with {@link IShoppingAdministrator.IJoin joining info}.\n\nThis method is allowed only when the {@link IShoppingCustomer customer} already\nhas joined the {@link IShoppingMember membership}. IF not, he (she) must\naccomplish it before. If not, 403 forbidden exception would be thrown.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Joining request info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingAdministrator.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Administrator info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingAdministrator.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/authenticate/login": {
      "put": {
        "summary": "Login as an administrator",
        "description": "Login as an administrator.\n\nLogin as an administrator with {@link IShoppingAdministrator.ILogin login info}.\n\nThis method has exactly same effect with\n{@link ShoppingApi.functional.customers.authenticate.login} function, but\nreturned type is a llttle different. The similar function returns\n{@link IShoppingCustomer} type that starting from the customer information, so\nthat you have to access to the administrator info through\n`customer.member.administrator`. In contrast with that, this method returns\n{@link IShoppingAdministrator.IInvert} type that starting from the administrator\ninfo, so that can access to the customer info through `administrator.customer`.\n\nOf course, to use this function, you had to {@link join} as an administrator\nbefore. If not, 403 forbidden exception would be thrown,",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Login request info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Administrator info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingAdministrator.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/coupons/{id}/destroy": {
      "delete": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/coupons": {
      "post": {
        "summary": "Create a new coupon",
        "description": "Create a new coupon.\n\nCreate a new {@link IShoppingCoupon coupon} with given information.\n\nBy the way, if you are a {@link IShoppingSeller seller}, you have to\nadd include direction's {@link IShoppingCouponSellerCriteria} or\n{@link IShoppingCouponSaleCriteria} condition. This is because only\n{@link IShoppingAdministrator administrators} can create a coupon\nwhich can be used throughout the market. Seller must limit the usage\nrange by his/her {@link IShoppingSale sale(s)}.\n\nOf course, when adminstrator is planning to make a general coupon\nthat can be used throughout the market, the administrator must\nget agree from the sellers who are going to be affected.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCoupon.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created coupon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every coupons",
        "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/coupons/{id}": {
      "delete": {
        "summary": "Erase a coupon",
        "description": "Erase a coupon.\n\nErase a {@link IShoppingCoupon coupon} with given ID.\n\nFor reference, if there're some {@link IShoppingCouponTicket tickets}\nwhich are already issued from the target coupon, they would not be affected.\nThose tickets are still valid until their expration time.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target coupon's {@link IShoppingCoupon.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a coupon info",
        "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target coupon's {@link IShoppingCoupon.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/deposits": {
      "patch": {
        "summary": "Get deposit metadata list",
        "description": "Get deposit metadata list.\n\nList up every {@link IShoppingDeposit deposit} metadata informations\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDeposit.IRequest.search search condition} in the request body.\nAlso, it is possible to customize sequence order of records by configuring\n{@link IShoppingDeposit.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeposit.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated deposit metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new deposit metadata",
        "description": "Create a new deposit metadata.\n\nCreate a new {@link IShoppingDeposit deposit} metadata.\n\nThis action means that adding a new origin reason of deposit's income/outcome.\nOf course, creating a new deposit record does not mean that automatically\nincrease or decrease the {@link IShoppingCustomer customer}'s balance\nfollowing the record's reason why. The logic must be developed manually\nin the backend side.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation information of deposit metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeposit.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created deposit metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/deposits/{id}": {
      "get": {
        "summary": "Get a deposit metadata",
        "description": "Get a deposit metadata.\n\nGet a {@link IShoppingDeposit deposit} metadata information with its ID.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target deposit's {@link IShoppingDeposit.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a deposit metadata",
        "description": "Erase a deposit metadata.\n\nErase a {@link IShoppingDeposit deposit} metadata, so that no more\n{@link IShoppingCustomer customer}'s balance does not be increased or\ndecreased by the deposit's reason why.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target deposit's {@link IShoppingDeposit.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/deposits/{code}/get": {
      "get": {
        "summary": "Get a deposit metadata by its code",
        "description": "Get a deposit metadata by its code.\n\nGet a {@link IShoppingDeposit deposit} metadata information with its code.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDeposit"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/mileages": {
      "patch": {
        "summary": "Get mileage metadata list",
        "description": "Get mileage metadata list.\n\nList up every {@link IShoppingMileage mileage} metadata informations\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileage.IRequest.search search condition} in the request body.\nAlso, it is possible to customize sequence order of records by configuring\n{@link IShoppingMileage.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMileage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated mileage metadata list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingMileage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new mileage metadata",
        "description": "Create a new mileage metadata.\n\nCreate a new {@link IShoppingMileage mileage} metadata.\n\nThis action means that adding a new origin reason of mileage's income/outcome.\nOf course, creating a new mileage record does not mean that automatically\nincrease or decrease the {@link IShoppingCustomer customer}'s balance\nfollowing the record's reason why. The logic must be developed manually\nin the backend side.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation information of mileage metadata",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMileage.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created mileage metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/mileages/{id}": {
      "get": {
        "summary": "Get a mileage metadata",
        "description": "Get a mileage metadata.\n\nGet a {@link IShoppingMileage mileage} metadata information with its ID.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target mileage's {@link IShoppingMileage.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a mileage metadata",
        "description": "Erase a mileage metadata.\n\nErase a {@link IShoppingMileage mileage} metadata, so that no more\n{@link IShoppingCustomer customer}'s balance does not be increased or\ndecreased by the mileage's reason why.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target mileage's {@link IShoppingMileage.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/mileages/{code}/get": {
      "get": {
        "summary": "Get a mileage metadata by its code",
        "description": "Get a mileage metadata by its code.\n\nGet a {@link IShoppingMileage mileage} metadata information with its code.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/mileages/donations": {
      "patch": {
        "summary": "List up every mileage donation histories",
        "description": "List up every mileage donation histories.\n\nList up every {@link IShoppingMileageDonation mileage donation histories}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileageDonation.IRequest.search search condition} in\nthe request body. Also, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingMileageDonation.IRequest.sort sort}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMileageDonation.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated mileage donation history list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingMileageDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Donate a mileage to a citizen",
        "description": "Donate a mileage to a citizen.\n\nDonate a mileage to a specific {@link IShoppingCitizen citizen} from\ncurrent {@link IShoppingAdministrator administrator}, with detailed\nreason why.\n\nNote that, as donating mileage affects to the citizen's balance and\ncurrent shopping mall's operating profit, administrator must archive\nthe detailed reason why the mileage is donated.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of mileage donation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMileageDonation.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Mileage donation history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileageDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/mileages/donations/{id}": {
      "get": {
        "summary": "Get a mileage donation history",
        "description": "Get a mileage donation history.\n\nGet a {@link IShoppingMileageDonation mileage donation history} with its ID.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target history's {@link IShoppingMileageDonation.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage donation history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileageDonation"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/orders": {
      "patch": {
        "summary": "List up every orders",
        "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/orders/{id}": {
      "get": {
        "summary": "Get an order info",
        "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Order info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales": {
      "patch": {
        "summary": "List up every summarized sales",
        "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. If you want\nto get the detailed information of a sale, use {@link at} function for\neach sale.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}s. Otherwise you're a\n{@link IShoppingCustomer customer}, you can see only the operating\nsales in the market. You can't see the unopened, closed, or suspended\nsales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSale.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSale.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sales with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{id}": {
      "get": {
        "summary": "Get a sale info",
        "description": "Get a sale info.\n\nGet a {@link IShoppingSale sale} with detailed information.\n\nIf you're a {@link IShoppingSeller seller}, you can only access to the\nyour own {@link IShoppingSale sale}. Otherwise you're a\n{@link IShoppingCustomer customer}, you can access to only the operating\nsales in the market. You can't access to the unopened, closed, or suspended\nsales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/questions/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/questions": {
      "patch": {
        "summary": "List up every summarized questions",
        "description": "List up every summarized questions.\n\nList up every {@link IShoppingSaleQuestion.ISummary summarized questions} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned questions are summarized, not detailed. If you want\nto get the detailed information of a question, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.ISummary.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/questions/abridges": {
      "patch": {
        "summary": "List up every abridged questions",
        "description": "List up every abridged questions.\n\nList up every {@link IShoppingSaleQuestion.IAbridge abridged questions} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned questions are abridged, not detailed. If you want\nto get the detailed information of a question, use {@link at} function\nfor each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.IAridge.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/questions/{id}": {
      "get": {
        "summary": "Get a question info",
        "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed question info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/reviews/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/reviews": {
      "patch": {
        "summary": "List up every summarized reviews",
        "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/reviews/abridges": {
      "patch": {
        "summary": "List up every abridged reviews",
        "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/reviews/{id}": {
      "get": {
        "summary": "Get a review info",
        "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed review info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "List up every snapshots",
        "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Requestion info of pagination",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated snapshots with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "Get a snapshot info",
        "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information of the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Get a flipped snapshot info",
        "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information in the snapshot side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{channelCode}/categories": {
      "post": {
        "summary": "Create a new category",
        "description": "Create a new category.\n\nCreate a new {@link IShoppingChannelCategory category} of a\n{@link IShoppingChannel channel} with given name. If required, it is\npossible to specify the parent category by its ID.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannelCategory.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every categories with children records",
        "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated categories with children categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{channelCode}/categories/{id}": {
      "put": {
        "summary": "Update a category",
        "description": "Update a category.\n\nUpdate a {@link IShoppingChannelCategory category}'s name. If required,\nit is possible to change the parent category by its ID. Of course, detaching\nfrom the parent category so that becoming the root category is also possible.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannelCategory.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a category info",
        "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{channelCode}/categories/merge": {
      "delete": {
        "summary": "Merge multiple categories into one",
        "description": "Merge multiple categories into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingChannelCategory category}, because it is a systematic\nentity affecting to all other core entities like\n{@link IShoppingSale sales}. Instead of deleting, you can merge multiple\ncategories into one.\n\nIf you specify a category to absorb others, then all of other categories\nwill be merged into the specified one. Also, subsidiary entities of\ncategories also be merged and their references also be merged cascadingly.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          }
        ],
        "requestBody": {
          "description": "Merge info of the categories",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Get a category info of inverted",
        "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels": {
      "post": {
        "summary": "Create a new channel",
        "description": "Create a new channel.\n\nCreate a new {@link IShoppingChannel channel} with given code and name.\n\nAs channel means an individual market,\n{@link IShoppingAdministrator administrator} should perform this action\nonly when a new application being registered.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every channels",
        "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{id}": {
      "put": {
        "summary": "Update a channel",
        "description": "Update a channel.\n\nUpdate a {@link IShoppingChannel channel}'s name.\n\nNote that, it is not possible to change the channel's code. If you want to\nto do it forcibly, then {@link create} new one and {@link merge} with it.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.code }"
          }
        ],
        "requestBody": {
          "description": "Update info of the channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a channel info",
        "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/merge": {
      "delete": {
        "summary": "Merge multiple channels into one",
        "description": "Merge multiple channels into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingChannel channel}, because it is a systematic entity\naffecting to all other core entities like customers, members and\nsales. Instead of deleting, you can merge multiple channels into one.\n\nIf you specify a channel to absorb others, then all of other channels\nwill be merged into the specified one. Also, subsidiary entities of\nchannels also be merged and their references also be merged cascadingly.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of the merge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List up every channels with nested categories",
        "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels with nested categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/channels/{code}/get": {
      "get": {
        "summary": "Get a channel info by its code",
        "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/sections": {
      "post": {
        "summary": "Create a new section",
        "description": "Create a new section.\n\nCreate a new {@link IShoppingSection section} with given code and name.\n\nAs section means a spatial unit of a market that handling different type\nof products with other section, {@link IShoppingAdministrator administrator}\nshould perform this action only when a new section being required.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the section",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSection.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every sections",
        "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}.",
        "tags": [
          "Section"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/sections/{id}": {
      "put": {
        "summary": "Update a section",
        "description": "Update a section.\n\nUpdate a {@link IShoppingSection section}'s name.\n\nNote that, it is not possible to change the section's code. If you want to\nto do it forcibly, then {@link create} new one and {@link merge} with it.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.code }"
          }
        ],
        "requestBody": {
          "description": "Update info of the section",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSection.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a section info",
        "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/sections/merge": {
      "delete": {
        "summary": "Merge multiple sections into one",
        "description": "Merge multiple sections into one.\n\nIn this shopping mall system, it is not possible to delete a\n{@link IShoppingSection section}, because it is a systematic entity\naffecting to all other core entities like {@link IShoppingSale sales}.\nInstead of deleting, you can merge multiple sections into one.\n\nIf you specify a section to absorb others, then all of other sections\nwill be merged into the specified one. Also, subsidiary entities of\nsections also be merged and their references also be merged cascadingly.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "input Request info of the merge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRecordMerge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/admins/systematic/sections/{code}/get": {
      "get": {
        "summary": "Get a section info by its code",
        "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/authenticate/refresh": {
      "patch": {
        "summary": "Refresh the authentication token",
        "description": "Refresh the authentication token.\n\nCreate a new {@link IShoppingCustomer.IToken.access access token} of a\n{@link IShoppingCustomer customer} with the pre-issued\n{@link IShoppingCustomer.IToken.refresh refresh} token.\n\nNote that, this function is available until the\n{@link IShoppingCustomer.IToken.refreshable_until} value.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCustomer.IRefresh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer information with new token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer.IAuthorized"
                }
              }
            }
          }
        }
      }
    },
    "/shoppings/customers/authenticate": {
      "get": {
        "summary": "Get current customer info",
        "description": "Get current customer info.\n\nGet current {@link IShoppingCustomer customer} information from the\n{@link IShoppingCustomer.IToken.access access token}.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new customer record",
        "description": "Create a new customer record.\n\nThis shopping mall system defines everyone participating in this market as\na \"customer\". And the customer records are not archived based on individual\n{@link IShoppingCitizen people}, but based on the unit of connection.\nTherefore, even if it is the same person, a new {@link IShoppingCustomer}\nrecord is created every time a connection is made.\n\nTherefore, all Client Applications that access this service must first call\nthis function, report the customer's inflow path to the server, and create\nan {@link IShoppingCustomer.IToken.access access token}. If you skip this\nfunction call, all the other API functions would be prohibited. There is no\nexception, even if you want to {@link activate} your citizenship or\n{@link login} with your {@link IShoppingMember member account}. Before\nauthenticating yourself or logging in, be sure to call this function first.\nThis also applies when an {@link IShoppingAdministrator administrator} or\n{@link IShoppingSeller seller} logs in.\n\nAlso, the authentication token has an\n{@link IShoppingCustomer.IToken.expired_at expiration time}\nand cannot be used permanently. For reference, the authentication token is\nvalid for 3 hours, and if you want to maintain customer authentication even\nafter 3 hours, you must call the {@link refresh} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation information of the customer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCustomer.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created customer information with token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer.IAuthorized"
                }
              }
            }
          }
        }
      }
    },
    "/shoppings/customers/authenticate/join": {
      "post": {
        "summary": "Join membership",
        "description": "Join membership.\n\n{@link IShoppingCustomer Customer} signs up for\n{@link IShoppingMember membership} of current shopping mall system.\n\nIf you've performed the {@link IShoppingCitizen citizenship}\n{@link activate activation} too, then you can skip the {@link activate}\nfunction calling everytime you log in from now on. Also, if the person had\n{@link IShoppingOrder purchased} with {@link activate} and {@link external}\nfunction calling, you can also access to the order history too. In other\nwords, activity details prior to membership registration can also be\naccessed with continuity.\n\nFor reference, as described in the {@link create} function, before calling\nthis `join` function, you must first create a customer record and token by\ncalling the {@link create} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Join information of the member",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMember.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Joined customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/authenticate/login": {
      "put": {
        "summary": "Membership login",
        "description": "Membership login.\n\n{@link IShoppingCustomer Customer} logs in with his/her\n{@link IShoppingMember membership} account with the email and password.\n\nIf the {@link IShoppingMember member} has previously performed\n{@link activate citizenship activation}, the {@link IShoppingCustomer.citizen}\nvalue would be filled in accordingly. And if the member has also signed up\nas an {@link IShoppingAdministrator administrator} or\n{@link IShoppingSeller seller}, the relevant information is also entered\naccordingly.\n\nFor reference, as described in the {@link create} function, before calling\nthis `login` function, you must first create a customer record and token by\ncalling the {@link create} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Login request info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Logged in Customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/authenticate/activate": {
      "post": {
        "summary": "Activate citizenship",
        "description": "Activate citizenship.\n\n{@link IShoppingCustomer Customer} activates his/her\n{@link IShoppingCitizen citizenship} with mobile number and real name.\n\nIf the custommer already {@link join joined} to the\n{@link IShoppingMember membership}, then you can skip the citizenship\n{@link activation} function calling everytime you log in from now on.\nOf course, such story would be same to the {@link external} function, too.\n\nFor reference, as described in the {@link create} function, before calling\nthis `activate` function, you must first create a customer record and token\nby calling the {@link create} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Activation information of the citizenship",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCitizen.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Activated customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/authenticate/external": {
      "post": {
        "summary": "Enroll external user info",
        "description": "Enroll external user info.\n\n{@link IShoppingCustomer Customer} enrolls his/her\n{@link IShoppingExternalUser external user} information from other service.\n\nIt has similar effect with the {@link join membership joining} function,\nso that if you've performed the {@link IShoppingCitizen citizenship}\n{@link activate activation} too, then you can skip the {@link activate}\nfunction calling everytime you call this `external` function with same\ninfo from now on. Also, if the person had\n{@link IShoppingOrder purchased} with {@link activate} and {@link join}\nfunction calling, you can also access to the order history too. In other\nwords, activity details prior to external server registration can also be\naccessed with continuity.\n\nFor reference, as described in the {@link create} function, before calling\nthis `external` function, you must first create a customer record and token\nby calling the {@link create} function.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Enroll information of the external user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingExternalUser.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "External user enrolled customer information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/authenticate/password/change": {
      "put": {
        "summary": "Change password",
        "description": "Change password.\n\nChange password of {@link IShoppingMember member} with the current password.\n\nThe reason why the current password is required is for security.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "New password and current password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMember.IPasswordChange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/coupons": {
      "patch": {
        "summary": "List up every coupons",
        "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/coupons/{id}": {
      "get": {
        "summary": "Get a coupon info",
        "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target coupon's {@link IShoppingCoupon.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/coupons/tickets": {
      "patch": {
        "summary": "List up every coupon tickets",
        "description": "List up every coupon tickets.\n\nList up every {@link IShoppingCouponTicket coupon tickets} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nFor reference, coupon ticket means that a {@link IShoppingCoupon coupon}\nhas been taken by a customer. If the target coupon has expiration day or\ndate, the coupon ticket also has\n{@link IShoppingCouponTicket.expired_at expiration time}, and such expired\ntickets would not be listed up. Likewise, tickets used to\n{@link IShoppingCouponTicketPayment pay} for the {@link IShoppingOrder order}\nwould not be listed up, either.\n\nAdditionally, you can limit the result by configuring\n{@link IShoppingCouponTicket.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCouponTicket.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCouponTicket.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated coupon tickets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new coupon ticket",
        "description": "Create a new coupon ticket.\n\nCreate a new {@link IShoppingCouponTicket coupon ticket} of a specific\n{@link IShoppingCoupon coupon} for the {@link IShoppingCustomer customer}.\n\nBy the way, if the target coupon has been\n{@link IShoppingCoupon.expired_at expired} or\n{@link IShoppingCoupon.IInventory.volume out of stock} or\n{@link IShoppingCoupon.IInventory.volume_per_citizen exhausted for him/her},\n410 gone exception would be thrown.\n\nAlso, even though succeeded to create a new coupon ticket from the target\ncoupon, if the coupon has expiration day or date, the newly created ticket\nalso has {@link IShoppingCouponTicket.expired_at expiration time}, and it\nwould be disabled after the expiration time.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of coupon ticket",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCouponTicket.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created coupon ticket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/coupons/tickets/{id}": {
      "get": {
        "summary": "Get a coupon ticket",
        "description": "Get a coupon ticket.\n\nGet a {@link IShoppingCouponTicket coupon ticket} information with its ID.\n\nBy the way, if the target coupon ticket has been\n{@link IShoppingCouponTicket.expired_at expired} or used to\n{@link IShoppingCouponTicketPayment pay} for the {@link IShoppingOrder order},\n410 gone exception would be thrown.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target coupon ticket's {@link IShoppingCouponTicket.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon ticket info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCouponTicket"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/charges": {
      "patch": {
        "summary": "List up every deposit charges",
        "description": "List up every deposit charges.\n\nList up every {@link IShoppingDepositCharge deposit charges} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDepositCharge.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingDepositCharge.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDepositCharge.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated deposit charges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new deposit charge application",
        "description": "Create a new deposit charge application.\n\nCreate a new {@link IShoppingDepositCharge deposit charge application}.\n\nBy the way, this function does not mean completion the deposit charge, but\nmeans just {@link IShoppingCustomer customer} is appling the deposit charge.\nThe deposit charge be completed only when customer\n{@link IShoppingDepositChargePublish.publish pay} the deposit charge.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the deposit charge",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDepositCharge.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created deposit charge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/charges/{id}": {
      "get": {
        "summary": "Get a deposit charge info",
        "description": "Get a deposit charge info.\n\nGet a {@link IShoppingDepositCharge deposit charge} information.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit charge info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDepositCharge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update a deposit charge application",
        "description": "Update a deposit charge application.\n\nUpdate value of a {@link IShoppingDepositCharge deposit charge application}\nthat has been applied by the {@link IShoppingCustomer}.\n\nIf the charge has been {@link IShoppingDepositChargePublish published},\nthen it is not possible to update the deposit charge. Only 410 gone exception\nwould be thrown.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }"
          }
        ],
        "requestBody": {
          "description": "Value to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDepositCharge.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a deposit charge application",
        "description": "Erase a deposit charge application.\n\nErase a {@link IShoppingDepositCharge deposit charge application} that has been\napplied by the {@link IShoppingCustomer}.\n\nIf the charge has been {@link IShoppingDepositChargePublish published}, then\nit is not possible to erase the deposit charge. In that case, you've to cancel\nthe payment by calling the {@link publish.cancel} function.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target deposit charge's {@link IShoppingDepositCharge.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/charges/{chargeId}/publish/able": {
      "get": {
        "summary": "Check publishable",
        "description": "Check publishable.\n\nTest whether the {@link IShoppingDepositCharge charge} is publishable or not.\n\nIf the charge has not been {@link IShoppingDepositChargePublish published} and\nnot deleted yet, then it is possible to publish the charge",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target charge's {@link IShoppingDepositCharge.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the charge is publishable or not",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/charges/{chargeId}/publish": {
      "post": {
        "summary": "Publish a charge",
        "description": "Publish a charge.\n\n{@link IShoppingDepositChargePublish Publish} a\n{@link IShoppingDepositCharge charge} that has been applied by the\n{@link IShoppingCustomer} with payment information gotten from the\npayment vendor system.\n\nAlso, the payment time can be different with the publish time. For example,\nif the payment method is manual bank account transfer, then the payment\nwould be delayed until the customer actually transfer the money. In that\ncase, {@link IShoppingDepositChargePublish.paid_at} would be `null` value,\nso that you have to check it after calling this publish function.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "chargeId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target charge's {@link IShoppingDepositCharge.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the publish",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDepositChargePublish.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created publish",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDepositChargePublish"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/histories": {
      "patch": {
        "summary": "List up every deposit histories",
        "description": "List up every deposit histories.\n\nList up every {@link IShoppingDepositHistory deposit histories} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingDepositHistory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingDepositHistory.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDepositHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated deposit histories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingDepositHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/histories/{id}": {
      "get": {
        "summary": "Get a deposit history info",
        "description": "Get a deposit history info.\n\nGet a {@link IShoppingDepositHistory deposit history} information.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deposit history info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDepositHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/deposits/histories/balance": {
      "get": {
        "summary": "Get balance of the deposit",
        "description": "Get balance of the deposit.\n\nGet current balance of the deposit of the {@link IShoppingCustomer customer}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Balance of the deposit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/mileages/histories": {
      "patch": {
        "summary": "List up every mileage histories",
        "description": "List up every mileage histories.\n\nList up every {@link IShoppingMileageHistory mileage histories} of the\n{@link IShoppingCustomer customer} with {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingMileageHistory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingMileageHistory.IRequest.sort sort condition}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMileageHistory.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated mileage histories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingMileageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/mileages/histories/{id}": {
      "get": {
        "summary": "Get a mileage history info",
        "description": "Get a mileage history info.\n\nGet a {@link IShoppingMileageHistory mileage history} information.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target mileage history's {@link IShoppingMileageHistory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Mileage history info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingMileageHistory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/mileages/histories/balance": {
      "get": {
        "summary": "Get balance of the mileage",
        "description": "Get balance of the mileage.\n\nGet current balance of the mileage of the {@link IShoppingCustomer customer}.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Balance of the mileage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/carts/{cartId}/commodities": {
      "patch": {
        "summary": "List of every commodities",
        "description": "List of every commodities.\n\nList up every {@link IShoppingCartCommodity commodities} in the\nshopping cart with {@link IPage pagination}.\n\nIf the *cartId* is not specified but `null` value assigned, then every\ncart would be targetted. Also, you can limit the result by configuring\n{@link IShoppingCartCommodity.IRequest.search search condition} in the\nrequest body. Furthermore, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingCartCommodity.IRequest.sort}.\n\nFor reference, when some commodity be {@link IShoppingOrder ordered} and\n{@link IShoppingOrderPublish published}, then it would not be appread in\nthe shopping cart more. Otherwise, the order has not been published yet,\nit would be appread in the shopping cart and still enable to create a new\n{@link IShoppingOrder order application} with the same commodity.\n\nOf course, if the target {@link IShoppingSale sale} has been suspended, or\n{@link IShoppingSaleUnitStockInventory out of stock}, then it would not be\nappread in the shopping cart more, either.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCartCommodity.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated commodities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a new commodity",
        "description": "Create a new commodity.\n\nCreate a new {@link IShoppingCartCommodity commodity} into a specific\nshopping cart.\n\nIf {@link IShoppingCartCommodity.ICreate.accumulate} has `true` value\nand there's some same commodity that composed with same\n{@link IShoppingSaleUnitStock.IInvert stocks and quantities},\nthen new commodity would not be created but the volume would be accumulated.\n\nAlso, if the *cartId* is not specified but `null` value assigned, then\nordinary cart would be utilized or create new one considering the\nexistence of the previous cart.\n\nBy the way, if the target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, then 410 gone error\nwould be thrown. Therefore, it would better to check the target sale and\n{@link IShoppingSaleUnitStock stock}'s status before.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          }
        ],
        "requestBody": {
          "description": "Creation info of the commodity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCartCommodity.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created commodity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/carts/{cartId}/commodities/{id}": {
      "get": {
        "summary": "Get a commodity",
        "description": "Get a commodity.\n\nGet a {@link IShoppingCartCommodity commodity} record of the shopping cart.\n\nIf the *cartId* is different with the belonged cart's ID, then 404 not\nfound exception would be thrown. Otherwise, the *cartId* has `null` value,\nsuch dependency checking would be skipped, but still ownership would be\nvalidated.\n\nAlso, if target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, then 410 gone error\nwould be thrown. Therefore, even if you've created a commodity successfully\nwith the {@link create} method, it still can be failed when you access the\ncommodity with this {@link at} method.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target commodity's {@link IShoppingCartCommodity.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed commodity info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCartCommodity"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update a commodity (volume)",
        "description": "Update a commodity (volume).\n\nUpdate a {@link IShoppingCartCommodity commodity}'s volume in the\nshopping cart.\n\nIf the *cartId* is different with the belonged cart's ID, then 404 not\nfound exception would be thrown. Otherwise, the *cartId* has `null` value,\nsuch dependency checking would be skipped, but still ownership would be\nvalidated.\n\nAlso, if target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock} suddenly, then 410\ngone error would be thrown, either.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target commodity's {@link IShoppingCartCommodity.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the commodity (volume)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCartCommodity.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a commodity",
        "description": "Erase a commodity.\n\nErase a {@link IShoppingCartCommodity commodity} from the shopping cart.\n\nIf the commodity is on an {@link IShoppingOrder order} process, it is not\npossible to erase it. Instead, if the order has been\n{@link IShoppingOrderPublish published}, then it would not be appread in\nthe shopping cart more. If the order be erased, then you also can continue\nerasinng the commodity, neither.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target commodity's {@link IShoppingCartCommodity.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created commodity",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/carts/{cartId}/commodities/{id}/replica": {
      "get": {
        "summary": "Get replica of a commodity",
        "description": "Get replica of a commodity.\n\nGet a {@link IShoppingCartCommodity.ICreate} typed info of the target\ncommodity for replication.\n\nBy the way, if the *cartId* is different with the belonged cart's ID,\nthen 404 not found exception would be thrown. Otherwise, the *cartId*\nhas `null` value, such dependency checking would be skipped, but still\nownership would be validated.\n\nAlso, if target {@link IShoppingSale sale} has been suspended or\n{@link IShoppingSaleUnitStockInventory out of stock} suddenly,\nthen 410 gone error would be thrown, either.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target commodity's {@link IShoppingCartCommodity.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Creation info of the commodity for replication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCartCommodity.ICreate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/carts/{cartId}/commodities/discountable": {
      "patch": {
        "summary": "Get discountable info",
        "description": "Get discountable info.\n\nCompute discountable features about the\n {@link IShoppingCartCommodity shopping cart} even including\nnon-carted {@link IShoppingSale sales}.\n\nReturned {@link IShoppingCartDiscountable} contains including\ncombinations of adjustable {@link IShoppingCoupon coupons},\nwithdrawable {@link IShoppingDepositHistory deposits} and\n{@link IShoppingMileageHistory mileages}.\n\nAlso, if you want to know the discountable info about some specific\nsales that have not been carted yet, specify the sales\nto the {@link IShoppingCartDiscountable.pseudos} property with composing\n{@link IShoppingCartCommodity.ICreate creation info of the commodities}.\nThen, they would be included in the discountable info.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string",
                  "format": "uuid"
                }
              ]
            },
            "required": true,
            "description": " Belonged cart's ID"
          }
        ],
        "requestBody": {
          "description": "Request info for discountable",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCartDiscountable.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Discountable info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCartDiscountable"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders": {
      "post": {
        "summary": "Create a new order application",
        "description": "Create a new order application.\n\nCreate a new {@link IShoppingOrder order application} from a\n{@link IShoppingCartCommodity shopping cart} that has been composed by the\n{@link IShoppingCustomer}. Of course, do not need to put every commodities\nto the order, but possible to select some of them by the customer.\n\nBy the way, this function does not mean completion the order, but means\njust customer is appling the order. The order be completed only when customer\n{@link IShoppingOrderPublish.paid_at pays} the order.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrder.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every orders",
        "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{id}": {
      "delete": {
        "summary": "Erase an order application",
        "description": "Erase an order application.\n\nErase an order application that has been applied by the\n{@link IShoppingCustomer}.\n\nIf the order has been {@link IShoppingOrderPublish published}, then it is\nnot possible to erase the order. In that case, you've to cancel the\npayment by calling the {@link publish.cancel} function.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get an order info",
        "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Order info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{id}/price": {
      "get": {
        "summary": "Get price of the order",
        "description": "Get price of the order.\n\nGet detailed price information of the {@link IShoppingOrder order}.\n\nReturned price info contains not only the amount of the order, but also\ncontains the discount amount by {@link IShoppingCoupono coupons},\n{@link IShoppingDepositHistory deposits} and\n{@link IShoppingMileageHistory mileages}.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed price info with discount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrderPrice"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{id}/discountable": {
      "patch": {
        "summary": "Get discountable info",
        "description": "Get discountable info.\n\nCompute discountable features about the {@link IShoppingOrder}.\n\nRetured {@link IShoppingOrderDiscountable} contains including\ncombinations of adjustable {@link IShoppingCoupon coupons},\nwithdrawable {@link IShoppingDepositHistory deposits}\nand {@link IShoppingMileageHistory mileages}.\n\nOf course, returned features are valid only when the order has not\nbeen {@link IShoppingOrderPublish published} yet. If the order has\nalready been published, then no way to discount the price more.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "requestBody": {
          "description": "Request info for discountable",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrderDiscountable.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Discountable info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrderDiscountable"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{id}/discount": {
      "put": {
        "summary": "Discount the order",
        "description": "Discount the order.\n\nDiscount total price of the {@link IShoppingOrder} by adjusting\n{@link IShoppingCoupon coupons}, {@link IShoppingDepositHistory deposits}\nand {@link IShoppingMileageHistory mileages}. If amount of discount\nfeatures are equal to the total price of the order, it is possible to\n{@link IShoppingOrderPublish publish} it without any cash.\n\nBy the way, the discounting features must be valid. If not, 428\nunprocessable entity error would be thrown. To know which features are\nadjustable or withdrawable, call the {@link discountable} function\nbefore.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "requestBody": {
          "description": "Discount info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrderPrice.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Detailed price info with discount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrderPrice"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{orderId}/goods/{id}/confirm": {
      "put": {
        "summary": "Confirm an order good",
        "description": "Confirm an order good.\n\nConfirm an {@link IShoppingOrderGood order good} that has been\ncompleted {@link IShoppingDelivery delivering} to the\n{@link IShoppingCustomer customer}.\n\nIn other words, belonged {@link IShoppingOrder order} must be\n{@link IShoppingPublish.paid_at published, paid} and delivery of\nthe good must be {@link IShoppingDeliveryJourney arrived} to the\ncustomer. If not, 428 unprocessable entity error would be thrown.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged order's {@link IShoppingOrder.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target good's {@link IShoppingOrderGood.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{orderId}/publish/able": {
      "get": {
        "summary": "Check publishable",
        "description": "Check publishable.\n\nTest whether the {@link IShoppingOrder order} is publishable or not.\n\nIf the order has not been {@link IShoppingOrderPublish published} and\nnot deleted yet, then it is possible to publish the order. Even thouogh\ntarget {@link IShoppingSale sale} is suspended or\n{@link IShoppingSaleUnitStockInventory out of stock}, it is still possible\nto publish because the order already has been applied.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the order is publishable or not",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/orders/{orderId}/publish": {
      "post": {
        "summary": "Publish an order",
        "description": "Publish an order.\n\n{@link IShoppingOrderPublish Publish} an {@link IShoppingOrder order} that\nhas been applied by the {@link IShoppingCustomer} with\n{@link IShoppingAddress address} to delivery and payment information gotten\nfrom the payment vendor system.\n\nIf the order has been discounted for entire order price, then no need\nto send payment vendor info. Instead, only address info is required.\n\nAlso, the payment time can be different with the publish time. For example,\nif the payment method is manual bank account transfer, then the payment\nwould be delayed until the customer actually transfer the money. In that\ncase, {@link IShoppingOrderPublish.paid_at} would be `null` value, so\nthat you have to check it after calling this publish function.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the publish",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/IShoppingOrderPublish.ICashCreate"
                  },
                  {
                    "$ref": "#/components/schemas/IShoppingOrderPublish.IZeroCreate"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "cash": "#/components/schemas/IShoppingOrderPublish.ICashCreate",
                    "zero": "#/components/schemas/IShoppingOrderPublish.IZeroCreate"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created publish",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrderPublish"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Cancel the publish (payment)",
        "description": "Cancel the publish (payment).\n\nCancel payment of an {@link IShoppingOrder order} that has been\n{@link IShoppingOrderPublish published}.\n\nIf target publish's payment method is manual bank account transfer,\nthen it would be cancelled directly. If not, then payment cancel\nrequest would be sent to the payment vendor system.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales": {
      "patch": {
        "summary": "List up every summarized sales",
        "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. If you want\nto get the detailed information of a sale, use {@link at} function for\neach sale.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}s. Otherwise you're a\n{@link IShoppingCustomer customer}, you can see only the operating\nsales in the market. You can't see the unopened, closed, or suspended\nsales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSale.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSale.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sales with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{id}": {
      "get": {
        "summary": "Get a sale info",
        "description": "Get a sale info.\n\nGet a {@link IShoppingSale sale} with detailed information.\n\nIf you're a {@link IShoppingSeller seller}, you can only access to the\nyour own {@link IShoppingSale sale}. Otherwise you're a\n{@link IShoppingCustomer customer}, you can access to only the operating\nsales in the market. You can't access to the unopened, closed, or suspended\nsales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/questions/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/questions": {
      "post": {
        "summary": "Write a question article",
        "description": "Write a question article.\n\nWhen a {@link IShoppingCustomer customer} wants to ask something about\na specific {@link IShoppingSale sale}, he/she can ask it by writing a\nnew {@link IShoppingSaleQuestion question article}.\n\nIf the customer does not want to reveal his/her identify and question,\nhe/she can write the question as a secret article. In that case, only\nthe customer and the related {@link IShoppingSeller seller} can see\nthe {@link at detailed content}. Also, such secret question's title and\nwriter name would be masked with `*` characters in the\n{@link index pagiation API}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every summarized questions",
        "description": "List up every summarized questions.\n\nList up every {@link IShoppingSaleQuestion.ISummary summarized questions} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned questions are summarized, not detailed. If you want\nto get the detailed information of a question, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.ISummary.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/questions/{id}": {
      "post": {
        "summary": "Update a question",
        "description": "Update a question.\n\nUpdate a {@link IShoppingSaleQuestion question}'s content.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleQuestion.ISnapshot snapshot}. And this is made public\nto everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created snapshot record of the question",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a question info",
        "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed question info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/questions/abridges": {
      "patch": {
        "summary": "List up every abridged questions",
        "description": "List up every abridged questions.\n\nList up every {@link IShoppingSaleQuestion.IAbridge abridged questions} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned questions are abridged, not detailed. If you want\nto get the detailed information of a question, use {@link at} function\nfor each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.IAridge.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/reviews/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/reviews": {
      "post": {
        "summary": "Write a review article",
        "description": "Write a review article.\n\nWhen a {@link IShoppingCustomer customer} has purchased a specific\n{@link IShoppingSale sale} and get {@link IShoppingDelivery delivered} it,\nhe/she can write a {@link IShoppingSaleReview review} article about the sale.\n\nIf try to write a review article without purchasing or the delivery has not\nbeen completed, 428 unprocessable entity error would be thrown. Also, the\ncustomer can write multiple review articles per an order, but the next\narticle can be written after 2 weeks from the previous article. If not,\n428 unprocessable entity error would be thrown, either.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the review",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every summarized reviews",
        "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/reviews/{id}": {
      "post": {
        "summary": "Update a review",
        "description": "Update a review.\n\nUpdadte a {@link IShoppingSaleReview review}'s content and score.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleReview.ISnapshot snapshot}. And this is made public\nto everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the review",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created snapshot record of the review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleReview.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a review info",
        "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed review info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/reviews/abridges": {
      "patch": {
        "summary": "List up every abridged reviews",
        "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "List up every snapshots",
        "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Requestion info of pagination",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated snapshots with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "Get a snapshot info",
        "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information of the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Get a flipped snapshot info",
        "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information in the snapshot side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/{channelCode}/categories": {
      "patch": {
        "summary": "List up every categories with children records",
        "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated categories with children categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/{channelCode}/categories/{id}": {
      "get": {
        "summary": "Get a category info",
        "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Get a category info of inverted",
        "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels": {
      "patch": {
        "summary": "List up every channels",
        "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List up every channels with nested categories",
        "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels with nested categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/{id}": {
      "get": {
        "summary": "Get a channel info",
        "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/channels/{code}/get": {
      "get": {
        "summary": "Get a channel info by its code",
        "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/sections": {
      "patch": {
        "summary": "List up every sections",
        "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}.",
        "tags": [
          "Section"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/sections/{id}": {
      "get": {
        "summary": "Get a section info",
        "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/customers/systematic/sections/{code}/get": {
      "get": {
        "summary": "Get a section info by its code",
        "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/authenticate": {
      "get": {
        "summary": "Get seller information",
        "description": "Get seller information.\n\nGet {@link IShoppingSeller.IInvert seller} information of\ncurrent {@link IShoppingCustomer customer}.\n\nIf current {@link IShoppingMember member} is not an seller,\nit throws 403 forbidden exception.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Seller info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Join as an seller",
        "description": "Join as an seller.\n\nJoin as an seller with {@link IShoppingSeller.IJoin joining info}.\n\nThis method is allowed only when the {@link IShoppingCustomer customer} already\nhas joined the {@link IShoppingMember membership}. IF not, he (she) must\naccomplish it before. If not, 403 forbidden exception would be thrown.",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Joining request info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSeller.IJoin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Seller info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/authenticate/login": {
      "put": {
        "summary": "Login as an seller",
        "description": "Login as an seller.\n\nLogin as an seller with {@link IShoppingSeller.ILogin login info}.\n\nThis method has exactly same effect with\n{@link ShoppingApi.functional.customers.authenticate.login} function, but\nreturned type is a llttle different. The similar function returns\n{@link IShoppingCustomer} type that starting from the customer information, so\nthat you have to access to the seller info through\n`customer.member.seller`. In contrast with that, this method returns\n{@link IShoppingSeller.IInvert} type that starting from the seller\ninfo, so that can access to the customer info through `seller.customer`.\n\nOf course, to use this function, you had to {@link join} as an seller\nbefore. If not, 403 forbidden exception would be thrown,",
        "tags": [
          "Authenticate"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Login request info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingMember.ILogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Seller info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSeller.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries": {
      "patch": {
        "summary": "Get list of deliveries",
        "description": "Get list of deliveries.\n\nGet list of {@link IShoppingDelivery.IInvert deliveries} of current\n{@link IShoppingSeller seller} with {@link IPage pagination}.\n\nFor reference, returned deliveries are containing the target\n{@link IShoppingOrder.IInvertFromDelivery order} informations. Of course,\nonly related {@link IShoppingOrderGood goods} are contained in the orders.\n\nAdditionally, you can limit the result by configuring\n{@link IShoppingDelivery.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingDelivery.IRequest.sort sort condition}.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDelivery.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated deliveries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingDelivery.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a delivery",
        "description": "Create a delivery.\n\nCreate a {@link IShoppingDelivery delivery} record targetting\n{@link IShoppingOrder orders}, their {@link IShoppingOrderGood goods} and\n{@link IShoppingSaleUnitStock stocks} ({@link IShoppingDeliveryPiece}) with\n{@link IShoppingDeliveryJourney journeys} and\n{@link IShoppingDeliveryShipper shippers} info.\n\nNote that, composition of the {@link IShoppingDeliveryPiece} must not over\nthe required. To identify which pieces are required, recommend to call\nthe {@link incompletes} function with target orders'\n{@link IShoppingOrderPublish.id}s before calling this one.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of delivery",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDelivery.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created delivery",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDelivery"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/{id}": {
      "get": {
        "summary": "Get a delivery",
        "description": "Get a delivery.\n\nGet a {@link IShoppingDelivery.IInvert delivery} information with its ID.\n\nFor reference, returned delivery is containing the target\n{@link IShoppingOrder.IInvertFromDelivery order} informations. Of course,\nonly related {@link IShoppingOrderGood goods} are contained in the orders.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target delivery's {@link IShoppingDelivery.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Delivery info with target orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDelivery.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/incompletes": {
      "patch": {
        "summary": "Get list of incomplete pieces",
        "description": "Get list of incomplete pieces.\n\nGet list of {@link IShoppingDeliveryPiece incomplete pieces} of target\norders' {@link IShoppingOrderPublish.id}s.\n\nIf you specify target orders' publish IDs, then this function returns\nincompleted pieces of the orders with computation as an Array of\n{@link IShoppingDeliveryPiece.ICreate} type.\n\nYou can utillize the result to make a huge {@link IShoppingDelivery delivery}\nfor integrated delivering, and also possible to make multiple deliveries for\nsplitted delivering.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "List of target orders' ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeliveryPiece.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of incomplete pieces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IShoppingDeliveryPiece.ICreate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/{deliveryId}/journeys": {
      "post": {
        "summary": "Create a new journey",
        "description": "Create a new journey.\n\nCreate a new {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}.\n\nThis action may change the related {@link IShoppingOrderGood.state}.\nAlso, if the target journey's type is \"delivering\", whether the property\n{@link IShoppingDeliveryJourney.completed_at} is null or not affects to\nthe related goods' states. If the property is not null, the state becomes\n\"arrived\". Otherwise, the state becomes \"delivering\".",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "deliveryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged delivery's {@link IShoppingDelivery.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the journey",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeliveryJourney.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created journey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDeliveryJourney"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/{deliveryId}/journeys/{id}/complete": {
      "put": {
        "summary": "Complete a journey",
        "description": "Complete a journey.\n\nComplete a {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}. In other words, fills the\n{@link IShoppingDeliveryJourney.completed_at} property with current time.\n\nIf the target journey's type is \"delivering\", this action may change\nthe related {@link IShoppingOrderGood.state goods' states} to be \"arrived\".",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "deliveryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged delivery's {@link IShoppingDelivery.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target journey's {@link IShoppingDeliveryJourney.id }"
          }
        ],
        "requestBody": {
          "description": "Completion time of the journey",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeliveryJourney.IComplete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/{deliveryId}/journeys/{id}": {
      "delete": {
        "summary": "Erase a journey",
        "description": "Erase a journey.\n\nErase a {@link IShoppingDeliveryJourney journey} of the\n{@link IShoppingDelivery delivery}.\n\nIf erasing journey is the last one of the belonged delivery, this action\nmay change the related {@link IShoppingOrderGood.state}. By erasing the last\njourney, the state rolls back to the previous.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "deliveryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged delivery's {@link IShoppingDelivery.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target journey's {@link IShoppingDeliveryJourney.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created journey",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/deliveries/{deliveryId}/shippers": {
      "post": {
        "summary": "Create a new shipper",
        "description": "Create a new shipper.\n\nCreate a new {@link IShoppingDeliveryShipper shipper} of the\n{@link IShoppingDelivery delivery}.\n\nThis action does not affect to the related {@link IShoppingOrder orders} or\n{@link IShoppingOrderGood goods} like {@link IShoppingDeliveryJourney}\nor {@link IShoppingDeliveryPiece} case, but just informs to the\n{@link IShoppingCustomer customer}.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "deliveryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged delivery's {@link IShoppingDelivery.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the shipper",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingDeliveryShipper.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created shipper",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingDeliveryShipper"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/coupons": {
      "post": {
        "summary": "Create a new coupon",
        "description": "Create a new coupon.\n\nCreate a new {@link IShoppingCoupon coupon} with given information.\n\nBy the way, if you are a {@link IShoppingSeller seller}, you have to\nadd include direction's {@link IShoppingCouponSellerCriteria} or\n{@link IShoppingCouponSaleCriteria} condition. This is because only\n{@link IShoppingAdministrator administrators} can create a coupon\nwhich can be used throughout the market. Seller must limit the usage\nrange by his/her {@link IShoppingSale sale(s)}.\n\nOf course, when adminstrator is planning to make a general coupon\nthat can be used throughout the market, the administrator must\nget agree from the sellers who are going to be affected.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCoupon.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created coupon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every coupons",
        "description": "List up every coupons.\n\nList up every {@link IShoppingCoupon coupons} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingCoupon.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingCoupon.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nonly {@link IShoppingCouponTicket ticketable} coupons would be listed up.\nOtherwise, non-ticketable coupons would also be listed up.",
        "tags": [
          "Discount"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingCoupon.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated coupons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/coupons/{id}": {
      "delete": {
        "summary": "Erase a coupon",
        "description": "Erase a coupon.\n\nErase a {@link IShoppingCoupon coupon} with given ID.\n\nFor reference, if there're some {@link IShoppingCouponTicket tickets}\nwhich are already issued from the target coupon, they would not be affected.\nThose tickets are still valid until their expration time.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target coupon's {@link IShoppingCoupon.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a coupon info",
        "description": "Get a coupon info.\n\nGet a {@link IShoppingCoupon coupon} information.\n\nIf you are a {@link IShoppingCustomer customer}, then only\n{@link IShoppingCouponTicket ticketable} coupons are accessible. Non\nticketable coupons cause 410 gone error. Otherwise you are a\n{@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},\nnon-ticketable coupons are also accessible.",
        "tags": [
          "Discount"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target coupon's {@link IShoppingCoupon.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingCoupon"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/orders": {
      "patch": {
        "summary": "List up every orders",
        "description": "List up every orders.\n\nList up every {@link IShoppingOrder orders} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingOrder.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingOrder.IRequest.sort sort condition}.\n\nFor reference, if you are a {@link IShoppingCustomer customer}, then\nyou can list up your own orders, and it is not a matter whether the\norder has been {@link IShoppingOrderPublish.paid_at paid} or not.\n\nOtherwise you are a {@link IShoppingSeller seller} or\n{@link IShoppingAdministrator administrator}, then you can list up\nonly paid orders. Also, in the seller case, only related\n{@link IShoppingOrder.goods goods} would be listed up in the order.",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingOrder.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/orders/{id}": {
      "get": {
        "summary": "Get an order info",
        "description": "Get an order info.\n\nGet a detailed {@link IShoppingOrder order} information.\n\nIf you are not a {@link IShoppingCustomer customer}, then you can't\naccess to the order which has not been\n{@link IShoppingOrderPublish.paid_at paid} yet. In that case,\n404 not found error would be thrown.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target order's {@link IShoppingOrder.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Order info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales": {
      "post": {
        "summary": "Create a sale",
        "description": "Create a sale.\n\n{@link IShoppingSeller Seller} creates a new {@link IShoppingSale} for\noperation.\n\nFor reference, sale has complicate hierarchical structure that composing\nwith {@link IShoppingSaleUnit units}, {@link IShoppingSaleUnitOption options}\nand {@link IShoppingSaleUnitStock stocks}. Therefore, I recommend you to\nread the {@link IShoppingSale} and related DTOs' documents before creating\na new sale.\n\nERD (Entity Relationship Diagram) and its description document also would\nbe helpful, too.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Creation info of the sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSale.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created sale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "summary": "List up every summarized sales",
        "description": "List up every summarized sales.\n\nList up every {@link IShoppingSale.ISummary summarized sales}.\n\nAs you can see, returned sales are summarized, not detailed. If you want\nto get the detailed information of a sale, use {@link at} function for\neach sale.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}s. Otherwise you're a\n{@link IShoppingCustomer customer}, you can see only the operating\nsales in the market. You can't see the unopened, closed, or suspended\nsales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSale.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSale.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSale.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sales with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSale.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}": {
      "put": {
        "summary": "Update a sale",
        "description": "Update a sale.\n\nUpdate a {@link IShoppingSale sale} with new information.\n\nBy the way, the sale actually does not being modified, but just make a new\n{@link IShoppingSaleSnapshot snapshot} record of the sale. Its 1st purpose\nis to keeping the integrity of the sale, due to modification of the sale\nmust not affect to the {@link IShoppingOrder orders} that already had been\napplied to the sale.\n\nThe 2nd purpose is for the A/B tests. {@link IShoppingSeller Seller} needs\nto demonstrate operating performance by chaning price, content, and\ncomposition of the product. This snapshot concept would be helpful for it.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "New information of the sale",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleSnapshot.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated sale with new snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "summary": "Get a sale info",
        "description": "Get a sale info.\n\nGet a {@link IShoppingSale sale} with detailed information.\n\nIf you're a {@link IShoppingSeller seller}, you can only access to the\nyour own {@link IShoppingSale sale}. Otherwise you're a\n{@link IShoppingCustomer customer}, you can access to only the operating\nsales in the market. You can't access to the unopened, closed, or suspended\nsales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}/open": {
      "put": {
        "summary": "Change opening and closing time of a sale",
        "description": "Change opening and closing time of a sale.\n\nUpdate a {@link IShoppingSale sale}'s opening and closing time.\n\nBy the way, if the sale still be opened or closed, it is not possible to\nchange the opening time. In contrary, if the sale already had been opened\nbut still not closed, it is possible to change the closing time.\n\nOf course, if closing time is less than opening time or not,\n428 unprocessable entity error would be thrown.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "New opening and closing time",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSale.IUpdateOpeningTime"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}/replica": {
      "post": {
        "summary": "Get replica of a sale",
        "description": "Get replica of a sale.\n\nGet a {@link IShoppingSale.ICreate} typed info of the target sale for\nreplication.\n\nIt would be useful for creating a new replication\n{@link IShoppingSale sale} with similar innformatiopn.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "201": {
            "description": "Creation info of the sale for replication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale.ICreate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}/pause": {
      "delete": {
        "summary": "Pause a sale",
        "description": "Pause a sale.\n\nPause a {@link IShoppingSale sale} from {@link open opened} state.\nTherefore, the sale can not be operated again until it be\n{@link restore restored}. By the way, {@link IShoppingCustomer customer}\nstill can sale from the {@link index} and {@link at} API endpints, but\n\"paused\" label would be attached.\n\nAlso, customer no more can put into the shopping cart, either.\nEven the sale already had been put into the shopping cart, the\n{@link IShoppingCartCommodity commodity} will not be listed on the\nshopping cart. Also, it is not possible to appling an\n{@link IShoppingOrder order} with the paused sale's commodity, either.\n\nBy the way, if the sale already had been applied to an order, the order\ncan be {@link IShoppingOrderPublish published} and\n{@link IShoppingSeller seller} must {@link IShoppingDelivery deliver} the\ngood to the customer.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}/suspend": {
      "delete": {
        "summary": "Suspend a sale",
        "description": "Suspend a sale.\n\nSuspend a {@link IShoppingSale sale} from {@link open opened} state.\nTherefore, the sale can not be operated again until it be\n{@link restore restored} and {@link IShoppingCustomer customer} cannot\nsee the sale from the {@link index} and {@link at} API.\n\nAlso, customer no more can put into the shopping cart, either.\nEven the sale already had been put into the shopping cart, the\n{@link IShoppingCartCommodity commodity} will not be listed on the\nshopping cart. Also, it is not possible to appling an\n{@link IShoppingOrder order} with the suspended sale's commodity, either.\n\nBy the way, if the sale already had been applied to an order, the order\ncan be {@link IShoppingOrderPublish published} and\n{@link IShoppingSeller seller} must {@link IShoppingDelivery deliver} the\ngood to the customer.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{id}/restore": {
      "put": {
        "description": "Restore a sale\n\nRestore a {@link IShoppingSale sale} from {@link pause paused} or\n{@link suspend suspended} state\n\nTherefore the sale can be operated again if its\n{@link IShoppingSale.closed_at closing time} has not been reached.\nAlso, if a {@link IShoppingCustomer customer} had put the sale into the\nshopping cart when being paused or suspended, the\n{@link IShoppingCartCommodity commodity} will be listed again on the\nshopping cart.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions/{questionId}/answer": {
      "post": {
        "summary": "Write an answer article",
        "description": "Write an answer article.\n\nWrite a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry question article} written by a\n{@link IShoppingCustomer}.\n\nNote that, this is the formal answer that can be written only one per\na question article (but {@link update updatable}). Therefore, it needs to\nguide the {@link IShoppingSeller seller} to write it carefully.\n\nAlso, as seller can write {@link IShoppingSaleInquiryComment comments} to\nthe question article as many as he/she wants, it would be useful for\nadditional communication.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "questionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the answer article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created answer article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an answer article",
        "description": "Update an answer article.\n\nUpdate a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry question article} written by a\n{@link IShoppingCustomer}.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a question articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleInquiryAnswer.ISnapshot snapshot}. And this is made\npublic to everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "questionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the answer article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the answer article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions": {
      "patch": {
        "summary": "List up every summarized questions",
        "description": "List up every summarized questions.\n\nList up every {@link IShoppingSaleQuestion.ISummary summarized questions} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned questions are summarized, not detailed. If you want\nto get the detailed information of a question, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.ISummary.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions/abridges": {
      "patch": {
        "summary": "List up every abridged questions",
        "description": "List up every abridged questions.\n\nList up every {@link IShoppingSaleQuestion.IAbridge abridged questions} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned questions are abridged, not detailed. If you want\nto get the detailed information of a question, use {@link at} function\nfor each article.\n\nAlso, returned question has {@link IShoppingSaleQuestion.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\nAdditionally, returned question has another special property\n{@link IShoppingSaleQuestion.IAridge.secret} with masking to other\nprincple properties, and it means only related actors can {@link at read}\nthe question.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s questions. Otherwise,\nyou can access to every questions of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleQuestion.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleQuestion.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated questions with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleQuestion.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/questions/{id}": {
      "get": {
        "summary": "Get a question info",
        "description": "Get a question info.\n\nGet a detailed {@link IShoppingSaleQuestion question} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s question. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nquestions of the sales except the {@link IShoppingSaleQuestion.secret}\nvalue is `false`.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target question's {@link IShoppingSaleQuestion.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed question info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleQuestion"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews/{reviewId}/answer": {
      "post": {
        "summary": "Write an answer article",
        "description": "Write an answer article.\n\nWrite a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry review article} written by a\n{@link IShoppingCustomer}.\n\nNote that, this is the formal answer that can be written only one per\na review article (but {@link update updatable}). Therefore, it needs to\nguide the {@link IShoppingSeller seller} to write it carefully.\n\nAlso, as seller can write {@link IShoppingSaleInquiryComment comments} to\nthe review article as many as he/she wants, it would be useful for\nadditional communication.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "reviewId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the answer article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created answer article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an answer article",
        "description": "Update an answer article.\n\nUpdate a formal {@link IShoppingSaleInquiryAnswer answer article} to a\nspecific {@link IShoppingSaleInquiry review article} written by a\n{@link IShoppingCustomer}.\n\nBy the way, as is the general policy of this shopping mall regarding\narticles, modifying a review articles does not actually change the\nexisting content. Modified content is accumulated and recorded in the\nexisting article record as a new\n{@link IShoppingSaleInquiryAnswer.ISnapshot snapshot}. And this is made\npublic to everyone, including the {@link IShoppingCustomer customer} and the\n{@link IShoppingSeller seller}, and anyone who can view the article can\nalso view the entire editing histories.\n\nThis is to prevent customers or sellers from modifying their articles and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "reviewId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the answer article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IBbsArticle.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the answer article",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews/{inquiryId}/comments": {
      "patch": {
        "summary": "List up every inquiry comments",
        "description": "List up every inquiry comments.\n\nList up every {@link IShoppingSaleInquiryComment inquiry comments} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}\nwith {@link IPage pagination}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleInquiryComment.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleInquiryComment.IRequest.sort sort condition}.\n\nBy the way, if you're a {@link IShoppingSeller seller}, you can only access\nto the your own {@link IShoppingSale sale}'s inquiries. Otherwise, you\ncan access to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated inquiry comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create an inquiry comment",
        "description": "Create an inquiry comment.\n\nCreate an {@link IShoppingSaleInquiryComment inquiry comment} of a\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\ncreate an inquiry comment to your own {@link IShoppingSale sale}'s inquiry.\nOtherwise, you can create an inquiry comment to every inquiries of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry's {@link IShoppingSaleInquiry.id }"
          }
        ],
        "requestBody": {
          "description": "Creation info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Newly created inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews/{inquiryId}/comments/{id}": {
      "get": {
        "summary": "Get an inquiry comment info",
        "description": "Get an inquiry comment info.\n\nGet a detailed {@link IShoppingSaleInquiryComment inquiry comment}\ninformation of a {@link IShoppingSaleQuestion question} or\n{@link IShoppingSaleReview review}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s inquiry comment.\nOtherwise, you can access to every inquiry comments of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed inquiry comment info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "summary": "Update an inquiry comment",
        "description": "Update an inquiry comment.\n\nUpdate an {@link IShoppingSaleInquiryComment inquiry comment} to a specific\n{@link IShoppingSaleQuestion question} or {@link IShoppingSaleReview review}.\n\nBy the way, as is the general policy of this shopping mall regarding\ncomments, modifying a comment does not actually change the existing content.\nModified content is accumulated and recorded in the existing comment record\nas a new {@link IShoppingSaleInquiryComment.ISnapshot snapshot}. And this\nis made public to everyone, who can read this inquiry comment.\n\nThis is to prevent customers or sellers from modifying their comments and\nmanipulating the circumstances due to the nature of e-commerce, where\ndisputes easily arise. That is, to preserve evidence.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "inquiryId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged inquiry's {@link IShoppingSaleInquiry.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target inquiry comment's {@link IShoppingSaleInquiryComment.id }"
          }
        ],
        "requestBody": {
          "description": "Update info of the inquiry comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created snapshot record of the inquiry comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleInquiryComment.ISnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews": {
      "patch": {
        "summary": "List up every summarized reviews",
        "description": "List up every summarized reviews.\n\nList up every {@link IShoppingSaleReview.ISummary summarized reviews} of a\n{@link IShoppingSale sale}.\n\nAs you can see, returned reviews are summarized, not detailed. If you want\nto get the detailed information of a review, use {@link adridges} function\nor {@link at} function for each article.\n\nAlso, returned review has {@link IShoppingSaleReview.ISummary.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews/abridges": {
      "patch": {
        "summary": "List up every abridged reviews",
        "description": "List up every abridged reviews.\n\nList up every {@link IShoppingSaleReview.IAbridge abridged reviews} of\na {@link IShoppingSale sale}.\n\nAs you can see, returned reviews are abridged, not detailed. If you want\nto get the detailed information of a review, use {@link at} function\nfor each article.\n\nAlso, returned review has {@link IShoppingSaleReview.IAridge.answer}\nproperty which means the formal answer from the {@link IShoppingSeller}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s reviews. Otherwise,\nyou can access to every reviews of the sales.\n\nBy the way, if you want, you can limit the result by configuring\n{@link IShoppingSaleReview.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleReview.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated reviews with abridged information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleReview.IAbridge"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/reviews/{id}": {
      "get": {
        "summary": "Get a review info",
        "description": "Get a review info.\n\nGet a detailed {@link IShoppingSaleReview review} information of a\n{@link IShoppingSale sale}.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s review. Otherwise\nyou are a {@link IShoppingCustomer customer}, you can access to every\nreviews of the sales.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target review's {@link IShoppingSaleReview.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed review info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleReview"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/snapshots/{id}/replica": {
      "post": {
        "summary": "Get replica of a snapshot",
        "description": "Get replica of a snapshot.\n\nGet a {@link IShoppingSale.ICreate} typed info of the target\n{@link IShoppingSaleSnapshot snapshot} record for replication.\n\nIt would be useful for creating a new replication {@link IShoppingSale sale}\nfrom the old snapshot.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "201": {
            "description": "Creation info of the sale for replication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale.ICreate"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/snapshots": {
      "patch": {
        "summary": "List up every snapshots",
        "description": "List up every snapshots.\n\nWhenever {@link IShoppingSeller seller} updates a\n{@link IShoppingSale sale}, the sale record is not updated but a new\n{@link IShoppingSaleSnapshot snapshot} record is created to keep the\nintegrity of the sale history. This API function is for listing up\nsuch snapshot records.\n\nAlso, as you can see from the return type, returned snapshots are\nsummarized, not detailed. If you want to get the detailed information\nof a snapshot, use {@link at} or {@link flipo} function for each snapshot.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target sale's {@link IShoppingSale.id }"
          }
        ],
        "requestBody": {
          "description": "Requestion info of pagination",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPage.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated snapshots with summarized information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleSnapshot.ISummary"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/snapshots/{id}": {
      "get": {
        "summary": "Get a snapshot info",
        "description": "Get a snapshot info.\n\nGet a {@link IShoppingSaleSnapshot snapshot} with detailed information.\n\nAs you can see from the return type, returned snapshot does not contain\nthe {@link IShoppingSale sale} info. If you want to get the sale info,\nuse the {@link flip} function instead.\n\nFor reference, if you're a {@link IShoppingSeller seller}, you can only\naccess to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,\nyou can access to every snapshots of the sales even though the sale has\nbeen closed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information of the snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/snapshots/{id}/flip": {
      "get": {
        "summary": "Get a flipped snapshot info",
        "description": "Get a flipped snapshot info.\n\nGet a {@link IShoppingSale sale} info of a flipped snapshot.\n\nAs you can see from the return type, this function returns the\n{@link IShoppingSale sale} info. By the way, the sale info is not the\nlatest one, but a flipped info in the snapshot side.\n\nAlso, if you're a {@link IShoppingSeller seller}, you can only access to\nthe your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can\naccess to every snapshots of the sales even though the sale has been\nclosed or suspended.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target snapshot's {@link IShoppingSaleSnapshot.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed sale information in the snapshot side",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSale"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/units/{unitId}/stocks/{stockId}/supplements": {
      "patch": {
        "summary": "List up every supplements",
        "description": "List up every supplements.\n\nList up every {@link IShoppingSaleUnitStockSupplement supplement histories}\nof a specific {@link IShoppingSaleUnitStock stock}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSaleUnitStockSupplement.IRequest.search search condition} in\nthe request body. Also, it is possible to customize sequence order of\nrecords by configuring {@link IShoppingSaleUnitStockSupplement.IRequest.sort}\nproperty.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }"
          },
          {
            "name": "stockId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }"
          }
        ],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleUnitStockSupplement.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated supplements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSaleUnitStockSupplement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "summary": "Create a supplement",
        "description": "Create a supplement.\n\nCreate a {@link IShoppingSaleUnitStockSupplement supplement history} of a\nspecific {@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be increased by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }"
          },
          {
            "name": "stockId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }"
          }
        ],
        "requestBody": {
          "description": "Ceate info of the supplement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleUnitStockSupplement.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created supplement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSaleUnitStockSupplement"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/sales/{saleId}/units/{unitId}/stocks/{stockId}/supplements/{id}": {
      "put": {
        "summary": "Update a supplement",
        "description": "Update a supplement.\n\nUpdate quantity value of a {@link IShoppingSaleUnitStockSupplement supplement}\nof a specific {@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be changed by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }"
          },
          {
            "name": "stockId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target supplement's {@link IShoppingSaleUnitStockSupplement.id }"
          }
        ],
        "requestBody": {
          "description": "Update info (quantity) of the supplement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSaleUnitStockSupplement.ICreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "summary": "Erase a supplement",
        "description": "Erase a supplement.\n\nErase a {@link IShoppingSaleUnitStockSupplement supplement} of a specific\n{@link IShoppingSaleUnitStock stock}.\n\nTherefore, {@link IShoppingSaleUnitStockInventory.income inventory} of the\ntarget stock will be decreased by the\n{@link IShoppingSaleUnitStockSupplement.value supplement's value}.",
        "tags": [
          "Sale"
        ],
        "parameters": [
          {
            "name": "saleId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged sale's {@link IShoppingSale.id }"
          },
          {
            "name": "unitId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Belonged unit's {@link IShoppingSaleUnit.id }"
          },
          {
            "name": "stockId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target stock's {@link IShoppingSaleUnitStock.id }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target supplement's {@link IShoppingSaleUnitStockSupplement.id }"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/{channelCode}/categories": {
      "patch": {
        "summary": "List up every categories with children records",
        "description": "List up every categories with children records.\n\nList up every {@link IShoppingChannelCategory.IHierarchical categories}\nof a {@link IShoppingChannel channel} with pagination. Returned categories\ncontain children categories, too.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannelCategory.IRequest.search search condition} in the\nrequest body. Also, it is possible to customize sequence order of records\nby configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated categories with children categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/{channelCode}/categories/{id}": {
      "get": {
        "summary": "Get a category info",
        "description": "Get a category info.\n\nGet a detailed {@link IShoppingChannelCategory category} information.\n\nReturned category contains hierarchical children categories, and also\ncontains the recursive parent categories, too.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/{channelCode}/categories/{id}/invert": {
      "get": {
        "summary": "Get a category info of inverted",
        "description": "Get a category info of inverted.\n\nGet a inverted {@link IShoppingChannelCategory.IInvert category} information.\n\nReturned category contains the recursive parent categories, but not contains\nthe hierarchical children categories.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "channelCode",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Belonged channel's {@link IShoppingChannel.code }"
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target category's {@link IShoppingChannelCategory.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed category info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels": {
      "patch": {
        "summary": "List up every channels",
        "description": "List up every channels.\n\nList up every {@link IShoppingChannel channels} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/hierarchical": {
      "patch": {
        "summary": "List up every channels with nested categories",
        "description": "List up every channels with nested categories.\n\nList up every {@link IShoppingChannel.IHierarchical channels} with\n{@link IPage pagination}. Returned channels contain nested hierarchical\n{@link IShoppingChannelCategory.IHierarchical categories}.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingChannel.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingChannel.IRequest.sort sort condition}.",
        "tags": [
          "Systematic"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingChannel.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated channels with nested categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/{id}": {
      "get": {
        "summary": "Get a channel info",
        "description": "Get a channel info.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/channels/{code}/get": {
      "get": {
        "summary": "Get a channel info by its code",
        "description": "Get a channel info by its code.\n\nGet a detailed {@link IShoppingChannel.IHierarchical channel} information\nby its code.\n\nReturned channel instance also contains the nested\n{@link IShoppingChannelCategory.IHierarchical hierarchical category}\ninformations.",
        "tags": [
          "Systematic"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target channel's {@link IShoppingChannel.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed channel info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/sections": {
      "patch": {
        "summary": "List up every sections",
        "description": "List up every sections.\n\nList up every {@link IShoppingSection sections} with pagination.\n\nIf you want, you can limit the result by configuring\n{@link IShoppingSection.IRequest.search search condition} in the request\nbody. Also, it is possible to customize sequence order of records by\nconfiguring {@link IShoppingSection.IRequest.sort sort condition}.",
        "tags": [
          "Section"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Request info of pagination, searching and sorting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IShoppingSection.IRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated sections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPageIShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/sections/{id}": {
      "get": {
        "summary": "Get a section info",
        "description": "Get a section info.\n\nGet a detailed {@link IShoppingSection section} information.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.id }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/shoppings/sellers/systematic/sections/{code}/get": {
      "get": {
        "summary": "Get a section info by its code",
        "description": "Get a section info by its code.\n\nGet a detailed {@link IShoppingSection section} information by its code.",
        "tags": [
          "Section"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": " Target section's {@link IShoppingSection.code }"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed section info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IShoppingSection"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "IPerformance": {
        "type": "object",
        "properties": {
          "cpu": {
            "$ref": "#/components/schemas/process.global.NodeJS.CpuUsage"
          },
          "memory": {
            "$ref": "#/components/schemas/process.global.NodeJS.MemoryUsage"
          },
          "resource": {
            "$ref": "#/components/schemas/process.global.NodeJS.ResourceUsage"
          }
        },
        "required": [
          "cpu",
          "memory",
          "resource"
        ]
      },
      "process.global.NodeJS.CpuUsage": {
        "type": "object",
        "properties": {
          "user": {
            "type": "number"
          },
          "system": {
            "type": "number"
          }
        },
        "required": [
          "user",
          "system"
        ]
      },
      "process.global.NodeJS.MemoryUsage": {
        "type": "object",
        "properties": {
          "rss": {
            "type": "number",
            "description": "Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the\nprocess, including all C++ and JavaScript objects and code."
          },
          "heapTotal": {
            "type": "number",
            "title": "Refers to V8's memory usage",
            "description": "Refers to V8's memory usage."
          },
          "heapUsed": {
            "type": "number",
            "title": "Refers to V8's memory usage",
            "description": "Refers to V8's memory usage."
          },
          "external": {
            "type": "number"
          },
          "arrayBuffers": {
            "type": "number",
            "description": "Refers to memory allocated for `ArrayBuffer`s and `SharedArrayBuffer`s, including all Node.js Buffers. This is also included\nin the external value. When Node.js is used as an embedded library, this value may be `0` because allocations for `ArrayBuffer`s\nmay not be tracked in that case."
          }
        },
        "required": [
          "rss",
          "heapTotal",
          "heapUsed",
          "external",
          "arrayBuffers"
        ]
      },
      "process.global.NodeJS.ResourceUsage": {
        "type": "object",
        "properties": {
          "fsRead": {
            "type": "number"
          },
          "fsWrite": {
            "type": "number"
          },
          "involuntaryContextSwitches": {
            "type": "number"
          },
          "ipcReceived": {
            "type": "number"
          },
          "ipcSent": {
            "type": "number"
          },
          "majorPageFault": {
            "type": "number"
          },
          "maxRSS": {
            "type": "number"
          },
          "minorPageFault": {
            "type": "number"
          },
          "sharedMemorySize": {
            "type": "number"
          },
          "signalsCount": {
            "type": "number"
          },
          "swappedOut": {
            "type": "number"
          },
          "systemCPUTime": {
            "type": "number"
          },
          "unsharedDataSize": {
            "type": "number"
          },
          "unsharedStackSize": {
            "type": "number"
          },
          "userCPUTime": {
            "type": "number"
          },
          "voluntaryContextSwitches": {
            "type": "number"
          }
        },
        "required": [
          "fsRead",
          "fsWrite",
          "involuntaryContextSwitches",
          "ipcReceived",
          "ipcSent",
          "majorPageFault",
          "maxRSS",
          "minorPageFault",
          "sharedMemorySize",
          "signalsCount",
          "swappedOut",
          "systemCPUTime",
          "unsharedDataSize",
          "unsharedStackSize",
          "userCPUTime",
          "voluntaryContextSwitches"
        ]
      },
      "ISystem": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "number",
            "title": "Random Unique ID",
            "description": "Random Unique ID."
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "`process.argv`"
          },
          "commit": {
            "$ref": "#/components/schemas/ISystem.ICommit",
            "title": "Git commit info",
            "description": "Git commit info."
          },
          "package": {
            "$ref": "#/components/schemas/ISystem.IPackage",
            "description": "`package.json`"
          },
          "created_at": {
            "type": "string",
            "title": "Creation time of this server",
            "description": "Creation time of this server."
          }
        },
        "required": [
          "uid",
          "arguments",
          "commit",
          "package",
          "created_at"
        ],
        "description": "System Information."
      },
      "ISystem.ICommit": {
        "type": "object",
        "properties": {
          "shortHash": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "sanitizedSubject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/ISystem.ICommit.IUser"
          },
          "committer": {
            "$ref": "#/components/schemas/ISystem.ICommit.IUser"
          },
          "authored_at": {
            "type": "string"
          },
          "committed_at": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "shortHash",
          "branch",
          "hash",
          "subject",
          "sanitizedSubject",
          "body",
          "author",
          "committer",
          "authored_at",
          "committed_at",
          "tags"
        ],
        "description": "Git commit info."
      },
      "ISystem.ICommit.IUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "description": "Git user account info."
      },
      "ISystem.IPackage": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "main": {
            "type": "string"
          },
          "typings": {
            "type": "string"
          },
          "scripts": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "repository": {
            "type": "object",
            "properties": {
              "type": {
                "const": "git"
              },
              "url": {
                "type": "string"
              }
            },
            "required": [
              "type",
              "url"
            ]
          },
          "author": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "bugs": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "required": [
              "url"
            ]
          },
          "homepage": {
            "type": "string"
          },
          "devDependencies": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "dependencies": {
            "$ref": "#/components/schemas/Recordstringstring"
          },
          "publishConfig": {
            "type": "object",
            "properties": {
              "registry": {
                "type": "string"
              }
            },
            "required": [
              "registry"
            ]
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "version",
          "description",
          "scripts",
          "repository",
          "author",
          "license",
          "bugs",
          "homepage",
          "dependencies"
        ],
        "description": "NPM package info."
      },
      "Recordstringstring": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "string"
        }
      },
      "IShoppingAdministrator.IInvert": {
        "type": "object",
        "properties": {
          "type": {
            "const": "administrator",
            "title": "Discriminant for the type of customer",
            "description": "Discriminant for the type of customer."
          },
          "member": {
            "$ref": "#/components/schemas/IShoppingMember.IInvert",
            "title": "Membership joining information",
            "description": "Membership joining information."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer.IInvert",
            "title": "Customer, the connection information",
            "description": "Customer, the connection information."
          },
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen",
            "title": "Real-name and mobile number authentication information",
            "description": "Real-name and mobile number authentication information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record.\n\nAnother words, the time when the administrator has signed up."
          }
        },
        "required": [
          "type",
          "member",
          "customer",
          "citizen",
          "id",
          "created_at"
        ],
        "description": "Invert information starting from administrator info.\n\nInstead of accessing to the administrator information from the\n{@link IShoppingCustomer.member} -> {@link IShoppingMember.administrator},\n`IShoppingAdministrator.IInvert` starts from the administrator information\nand access to the customer, member and {@link IShoppingCitizen citizen}\ninformations inversely."
      },
      "IShoppingMember.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "nickname": {
            "type": "string",
            "title": "Nickname that uniquely identifies the member",
            "description": "Nickname that uniquely identifies the member."
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingMemberEmail"
            },
            "title": "List of emails",
            "description": "List of emails."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record.\n\nAnother words, the time when the member has signed up."
          }
        },
        "required": [
          "id",
          "nickname",
          "emails",
          "created_at"
        ],
        "description": "Invert information of member.\n\nThis invert member information has been designed to be used for another\ninvert informations of sellers and administrators like below.\n\n- {@link IShoppingSeller.IInvert}\n- {@link IShoppingAdministrator.IInvert}"
      },
      "IShoppingMemberEmail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "value": {
            "type": "string",
            "format": "email",
            "title": "Email address value",
            "description": "Email address value."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          }
        },
        "required": [
          "id",
          "value",
          "created_at"
        ],
        "description": "Email address of member.\n\nThis shopping mall system allows multiple email addresses to be\nregistered for one {@link IShoppingMember member}. If you don't have to\nplan such multiple email addresses, just use only one."
      },
      "IShoppingCustomer.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IShoppingChannel",
            "title": "Belonged channel",
            "description": "Belonged channel."
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nWhen the customer has come frome an external service."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "Connection address",
            "description": "Connection address.\n\nSame with {@link window.location.href} of client."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Referrer address",
            "description": "Referrer address.\n\nSame with {@link window.document.referrer} of client."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "Connection IP Address",
            "description": "Connection IP Address."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the connection record",
            "description": "Creation time of the connection record."
          }
        },
        "required": [
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "created_at"
        ],
        "description": "Inverted customer informatino.\n\nThis inverted customer information has been designed to be used for\nanother invert informations of sellers and administrators like below.\n\n- {@link IShoppingSeller.IInvert}\n- {@link IShoppingAdministrator.IInvert}"
      },
      "IShoppingChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Name of the channel",
            "description": "Name of the channel."
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "name"
        ],
        "description": "Channel information.\n\n`IShoppingChannel` is a concept that shapes the distribution channel in the\nmarket. Therefore, the difference in the channel in this e-commerce system\nmeans that it is another site or application.\n\nBy the way, if your shopping mall system requires only one channel, then\njust use only one. This concept is designed to be expandable in the future."
      },
      "IShoppingExternalUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen"
              }
            ],
            "title": "Citizen activation info",
            "description": "Citizen activation info."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record.\n\nAnother word, first time when the external user connected."
          },
          "uid": {
            "type": "string",
            "title": "Identifier key of external user from the external system",
            "description": "Identifier key of external user from the external system."
          },
          "application": {
            "type": "string",
            "title": "Identifier code of the external service",
            "description": "Identifier code of the external service.\n\nIt can be same with {@link IShoppingChannel.code} in common."
          },
          "nickname": {
            "type": "string",
            "title": "Nickname of external user in the external system",
            "description": "Nickname of external user in the external system."
          },
          "data": {
            "description": "Additional information about external user from the external\nsystem."
          }
        },
        "required": [
          "id",
          "citizen",
          "created_at",
          "uid",
          "application",
          "nickname",
          "data"
        ],
        "description": "External user information.\n\n`IShoppingExternalUser` is an entity dsigned for when this system needs\nto connect with external services and welcome their users as\n{@link IShoppingCustomer customers} of this service.\n\nFor reference, customers who connect from an external service must have\nthis record, and the external service user is identified through the two\nattributes {@link application} and {@link uid}. If a customer connected\nfrom an external service completes\n{@link IShoppingCitizen real-name authentication} from this service, each\ntime the external service user reconnects to this service and issues a\nnew customer authentication token, real-name authentication begins with\ncompleted.\n\nAnd {@link password} is the password issued to the user by the external\nservice system (the so-called permanent user authentication token), and\nis never the actual user password. However, for customers who entered the\nsame application and uid as the current external system user, this is to\ndetermine whether to view this as a correct external system user or a\nviolation.\n\nIn addition, additional information received from external services can\nbe recorded in the data field in JSON format."
      },
      "IShoppingCitizen": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile number",
            "description": "Mobile number."
          },
          "name": {
            "type": "string",
            "title": "Real name, or equivalent nickname",
            "description": "Real name, or equivalent nickname."
          }
        },
        "required": [
          "id",
          "created_at",
          "mobile",
          "name"
        ],
        "description": "Citizen verification information.\n\n`IShoppingCitizen` is an entity that records the user's\n{@link name real name} and {@link mobile} input information.\n\nFor reference, in South Korea, real name authentication is required for\ne-commerce participants, so the name attribute is important. However, the\nsituation is different overseas, so in reality, mobile attributes are the\nmost important, and identification of individual person is also done based\non this mobile.\n\nOf course, real name and mobile phone authentication information are\nencrypted and stored."
      },
      "IShoppingAdministrator.IJoin": {
        "type": "object",
        "properties": {},
        "description": "Joining request info."
      },
      "IShoppingMember.ILogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address of member",
            "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them."
          },
          "password": {
            "type": "string",
            "title": "Password of the member account",
            "description": "Password of the member account."
          }
        },
        "required": [
          "email",
          "password"
        ],
        "description": "Login request info."
      },
      "IShoppingCoupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "designer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IShoppingAdministrator"
              },
              {
                "$ref": "#/components/schemas/IShoppingSeller"
              }
            ],
            "title": "Designer who've made the coupon",
            "description": "Designer who've made the coupon."
          },
          "inventory": {
            "$ref": "#/components/schemas/IShoppingCouponInventory",
            "title": "Inventory information",
            "description": "Inventory information."
          },
          "criterias": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingCouponChannelCriteria"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSectionCriteria"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSellerCriteria"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSaleCriteria"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "channel": "#/components/schemas/IShoppingCouponChannelCriteria",
                  "section": "#/components/schemas/IShoppingCouponSectionCriteria",
                  "seller": "#/components/schemas/IShoppingCouponSellerCriteria",
                  "sale": "#/components/schemas/IShoppingCouponSaleCriteria",
                  "funnel": "#/components/schemas/IShoppingCouponFunnelCriteria"
                }
              }
            },
            "title": "List of criteria informations",
            "description": "List of criteria informations."
          },
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IShoppingCouponDiscount.IAmount"
              },
              {
                "$ref": "#/components/schemas/IShoppingCouponDiscount.IPercent"
              }
            ],
            "discriminator": {
              "propertyName": "unit",
              "mapping": {
                "amount": "#/components/schemas/IShoppingCouponDiscount.IAmount",
                "percent": "#/components/schemas/IShoppingCouponDiscount.IPercent"
              }
            },
            "title": "Discount information",
            "description": "Discount information."
          },
          "restriction": {
            "$ref": "#/components/schemas/IShoppingCouponRestriction",
            "title": "Restriction information",
            "description": "Restriction information."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the coupon",
            "description": "Representative name of the coupon."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the coupon",
            "description": "Opening time of the coupon."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the coupon",
            "description": "Closing time of the coupon.\n\nTickets cannot be issued after this time.\n\nHowever, previously issued tickets can still be used until their\nexpiration date."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation tie of the record",
            "description": "Creation tie of the record."
          }
        },
        "required": [
          "id",
          "designer",
          "inventory",
          "criterias",
          "discount",
          "restriction",
          "name",
          "opened_at",
          "closed_at",
          "created_at"
        ],
        "description": "Discount coupon.\n\n`IShoppingCoupon` is an entity that symbolizes discount coupons at\na shopping mall.\n\nNote that, `IShoppingCoupon` only contains specification information\nabout discount coupons. Please keep in mind that this is a different\nconcept from {@link IShoppingCouponTicket}, which refers to the issuance\nof a discount coupon, or {@link IShoppingCouponTicketPayment}, which\nrefers to its payment.\n\nAdditionally, discount coupons are applied on an order-by-order basis,\nbut each has its own unique restrictions. For example, a coupon with\n{@link IShoppingCouponSellerCriteria} may or may not be used only for\n{@link IShoppingSale} of listings registered by the {@link IShoppingSeller}.\nAlso, there are restrictions such as\n{@link IShoppingCouponDiscount.threshold minimum amount restrictions} for\nusing discount coupons and\n{@link IShoppingCouponDiscount.limit maximum discount amount limits}.\n\nIn addition, you can set whether to issue discount coupons publicly or\ngive them only to people who know the specific issuing code. In addition,\nthere are restrictions such as issued discount coupons having an\n{@link IShoppingCouponRestriction.expired_at expiration date} or being\nissued only to customers who came in through a\n{@link IShoppingCouponFunnelCriteria specific funnel}.\n\nFor more information, please refer to the properties below and the\nsubsidiary entities described later."
      },
      "IShoppingAdministrator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record.\n\nAnother words, the time when the administrator has signed up."
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "description": "Administrator account.\n\n`IShoppingAdministrator` is an entity that embodies a person who manages\nthe shopping mall system, with {@link IShoppingMember membership} joining.\n\nFor reference, unlike {@link IShoppingCustomer customers} which can participate\neven without membership joining, administrator must join membership to operate\nmanagements. Also, administrator must perform the\n{@link IShoppingCitizen real-name and mobile authentication}, too."
      },
      "IShoppingSeller": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation tmie of record",
            "description": "Creation tmie of record.\n\nAnother words, the time when the seller has signed up."
          }
        },
        "required": [
          "id",
          "created_at"
        ],
        "description": "Seller information.\n\n`IShoppingSeller` is an entity that embodies a person who registers\n{@link IShoppingSale sales} to operate selling activities, with\n{@link IShoppingMember membership} joining.\n\nFor reference, unlike {@link IShoppingCustomer customers} which can\nparticipate even without membership joining, seller must join membership\nto operate sales. Also, seller must do the\n{@link IShoppingCitizen real-name and mobile authentication}, too."
      },
      "IShoppingCouponInventory": {
        "type": "object",
        "properties": {
          "volume": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Remaining volume for everyone",
            "description": "Remaining volume for everyone.\n\nIf there is a limit to the quantity issued, it becomes impossible to\nissue tickets exceeding this value.\n\nIn other words, the concept of N coupons being issued on a first-come,\nfirst-served basis is created."
          },
          "volume_per_citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Remaining volume per citizen",
            "description": "Remaining volume per citizen.\n\nAs a limit to the total amount of issuance per person, it is common to\nassign 1 to limit duplicate issuance to the same citizen, or to use the\n`nul`` value to set no limit.\n\nOf course, by assigning a value of N, the total amount issued to the\nsame citizen can be limited."
          }
        },
        "required": [
          "volume",
          "volume_per_citizen"
        ],
        "description": "Inventory information of the coupon.\n\nIf a {@link IShoppingCoupon coupon} has been designed with limited\ninventory, this `IShoppingCouponInventory` structure represents the\nremaining inventory information."
      },
      "IShoppingCouponChannelCriteria": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponChannelCriteria.IChannelTo"
            },
            "minItems": 1,
            "title": "List of target channels and categories",
            "description": "List of target channels and categories."
          },
          "type": {
            "const": "channel",
            "title": "Descrimanator type",
            "description": "Descrimanator type."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction of the criteria",
            "description": "Direction of the criteria."
          }
        },
        "required": [
          "channels",
          "type",
          "direction"
        ],
        "description": "Conditions for channels of discount coupons.\n\n`ishoppingcouponchannelcriteria` is a subtype entity of\n{@link IShoppingCouponCriteriaBase} and is used when setting conditions on\na specific {@link IShoppingChannel channel} or\n{@link IShoppingChannelCategory category} of that channel.\n\nIf the {@link direction} value is \"include\", the coupon can only be used\nfor the target channels (or categories). Conversely, if it is \"exclude\",\nit is a coupon that cannot be used."
      },
      "IShoppingCouponChannelCriteria.IChannelTo": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/IShoppingChannel",
            "title": "Target channel",
            "description": "Target channel."
          },
          "categories": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
                },
                "minItems": 1
              }
            ],
            "title": "List of target categories",
            "description": "List of target categories."
          }
        },
        "required": [
          "channel",
          "categories"
        ]
      },
      "IShoppingChannelCategory.IInvert": {
        "type": "object",
        "properties": {
          "parent": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
              }
            ],
            "title": "Parent category info with recursive structure",
            "description": "Parent category info with recursive structure.\n\nIf no parent exists, then be `null`."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent category's ID",
            "description": "Parent category's ID."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the category",
            "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          }
        },
        "required": [
          "parent",
          "id",
          "parent_id",
          "name",
          "created_at"
        ],
        "description": "Invert category information with parent category."
      },
      "IShoppingCouponSectionCriteria": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSection"
            },
            "minItems": 1,
            "title": "Target sections to include or exclude",
            "description": "Target sections to include or exclude."
          },
          "type": {
            "const": "section",
            "title": "Descrimanator type",
            "description": "Descrimanator type."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction of the criteria",
            "description": "Direction of the criteria."
          }
        },
        "required": [
          "sections",
          "type",
          "direction"
        ],
        "description": "Conditions for sections of discount coupons.\n\n`IShoppingCouponSectionCriteria` is a subtype entity of\n{@link IShoppingCouponCriteriaBase} and is used when setting conditions\nfor a specific {@link IShoppingSection section}.\n\nIf the {@link direction} value is \"include\", the coupon can only be used\nfor the target {@link sections}. Conversely, if it is \"exclude\", the\ncoupon cannot be used."
      },
      "IShoppingSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the section",
            "description": "Representative name of the section."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "created_at"
        ],
        "description": "Section information.\n\n`IShoppingSection` is a concept that refers to the spatial information of\nthe market.\n\nIf we compare the section mentioned here to the offline market, it means a\nspatially separated area within the store, such as the \"fruit corner\" or\n\"butcher corner\". Therefore, in the {@link IShoppingSale sale} entity, it is\nnot possible to classify multiple sections simultaneously, but only one section\ncan be classified.\n\nBy the way, if your shopping mall system requires only one section, then just\nuse only one. This concept is designed to be expandable in the future."
      },
      "IShoppingCouponSellerCriteria": {
        "type": "object",
        "properties": {
          "sellers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSeller"
            },
            "minItems": 1,
            "title": "Target sellers to include or exclude",
            "description": "Target sellers to include or exclude."
          },
          "type": {
            "const": "seller",
            "title": "Descrimanator type",
            "description": "Descrimanator type."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction of the criteria",
            "description": "Direction of the criteria."
          }
        },
        "required": [
          "sellers",
          "type",
          "direction"
        ],
        "description": "Conditions for sellers of discount coupons.\n\n`IShoppingCouponSellerCriteria` is a subtype entity of\n{@link IShoppingCouponCriteriaBase} and is used when setting conditions\nfor a specific {@link IShoppingSeller seller}.\n\nIf the {@link direction} value is \"include\", the coupon can only be used\nfor the target {@link sellers}. Conversely, if it is \"exclude\", the\ncoupon cannot be used."
      },
      "IShoppingCouponSaleCriteria": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSale.ISummary"
            },
            "minItems": 1,
            "title": "Target sales to include or exclude",
            "description": "Target sales to include or exclude."
          },
          "type": {
            "const": "sale",
            "title": "Descrimanator type",
            "description": "Descrimanator type."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction of the criteria",
            "description": "Direction of the criteria."
          }
        },
        "required": [
          "sales",
          "type",
          "direction"
        ],
        "description": "Conditions for sales of discount coupons.\n\n`IShoppingCouponSaleCriteria` is a subtype entity of\n{@link IShoppingCouponCriteriaBase} and is used when setting conditions\nfor a specific {@link IShoppingSale sale}.\n\nIf the {@link direction} value is \"include\", the coupon can only be used\nfor the target {@link sales}. Conversely, if it is \"exclude\", the\ncoupon cannot be used."
      },
      "IShoppingSale.ISummary": {
        "type": "object",
        "properties": {
          "section": {
            "$ref": "#/components/schemas/IShoppingSection",
            "title": "Belonged section",
            "description": "Belonged section."
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller.IInvert",
            "title": "Seller who has registered the sale",
            "description": "Seller who has registered the sale."
          },
          "price_range": {
            "$ref": "#/components/schemas/IShoppingSalePriceRange",
            "title": "Price range of the unit",
            "description": "Price range of the unit."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Sale",
            "description": "Primary Key of Sale."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Snapshot",
            "description": "Primary Key of Snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether the snapshot is the latest one or not",
            "description": "Whether the snapshot is the latest one or not."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent.IInvert",
            "title": "Description and image content describing the sale",
            "description": "Description and image content describing the sale."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel"
            },
            "minItems": 1,
            "title": "List of channels and categories",
            "description": "List of channels and categories.\n\nWhich channels and categories the sale is registered to."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit.ISummary"
            },
            "minItems": 1,
            "title": "List of units",
            "description": "List of units.\n\nRecords about individual product composition informations that are sold\nin the sale. Each {@link IShoppingSaleUnit unit} record has configurable\n{@link IShoppingSaleUnitOption options},\n{@link IShoppingSaleUnitOptionCandidate candidate} values for each\noption, and {@link IShoppingSaleUnitStock final stocks} determined by\nselecting every candidate values of each option."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record.\n\nNote that, this property is different with {@link opened_at},\nwhich means the timepoint of the sale is opened."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last updated time of the record",
            "description": "Last updated time of the record.\n\nIn another words, creation time of the last snapshot."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Paused time of the sale",
            "description": "Paused time of the sale.\n\nThe sale is paused by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} can still see the sale on the\nboth list and detail pages, but the sale has a warning label\n\"The sale is paused by the seller\"."
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Suspended time of the sale",
            "description": "Suspended time of the sale.\n\nThe sale is suspended by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} cannot see the sale on the\nboth list and detail pages. It is almost same with soft delettion,\nbut there's a little bit difference that the owner\n{@link IShoppingSeller seller} can still see the sale and resume it.\n\nOf course, the {@link IShoppingCustomer customers} who have\nalready purchased the sale can still see the sale on the\n{@link IShoppingOrder order} page."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the sale",
            "description": "Opening time of the sale."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the sale",
            "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever."
          }
        },
        "required": [
          "section",
          "seller",
          "price_range",
          "id",
          "snapshot_id",
          "latest",
          "content",
          "channels",
          "tags",
          "units",
          "created_at",
          "updated_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Summarized information of sale.\n\nThis summarized information being used for pagination."
      },
      "IShoppingSeller.IInvert": {
        "type": "object",
        "properties": {
          "type": {
            "const": "seller",
            "title": "Discriminant for the type of customer",
            "description": "Discriminant for the type of customer."
          },
          "member": {
            "$ref": "#/components/schemas/IShoppingMember.IInvert",
            "title": "Membership joining information",
            "description": "Membership joining information."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer.IInvert",
            "title": "Customer, the connection information",
            "description": "Customer, the connection information."
          },
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen",
            "title": "Real-name and mobile number authentication information",
            "description": "Real-name and mobile number authentication information."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation tmie of record",
            "description": "Creation tmie of record.\n\nAnother words, the time when the seller has signed up."
          }
        },
        "required": [
          "type",
          "member",
          "customer",
          "citizen",
          "id",
          "created_at"
        ],
        "description": "Invert information starting from seller info.\n\nInstead of accessing to the seller information from the\n{@link IShoppingCustomer.member} -> {@link IShoppingMember.seller},\n`IShoppingSeller.IInvert` starts from the seller information\nand access to the customer, member and {@link IShoppingCitizen citizen}\ninformations inversely."
      },
      "IShoppingSalePriceRange": {
        "type": "object",
        "properties": {
          "lowest": {
            "$ref": "#/components/schemas/IShoppingPrice"
          },
          "highest": {
            "$ref": "#/components/schemas/IShoppingPrice"
          }
        },
        "required": [
          "lowest",
          "highest"
        ]
      },
      "IShoppingPrice": {
        "type": "object",
        "properties": {
          "nominal": {
            "type": "number",
            "minimum": 0,
            "title": "Nominal price",
            "description": "Nominal price.\n\nThis is not {@link real real price} to pay, but just a nominal price to show.\nIf this value is greater than the {@link real real price}, it would be shown\nlike {@link IShoppingSeller seller} is giving a discount."
          },
          "real": {
            "type": "number",
            "minimum": 0,
            "title": "Real price to pay",
            "description": "Real price to pay."
          }
        },
        "required": [
          "nominal",
          "real"
        ],
        "description": "Shopping price interface."
      },
      "IShoppingSaleContent.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "thumbnails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            }
          }
        },
        "required": [
          "id",
          "title",
          "thumbnails"
        ]
      },
      "IAttachmentFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of attachment file",
            "description": "Creation time of attachment file."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "File name, except extension",
            "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string."
          },
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "minLength": 1,
                "maxLength": 8
              }
            ],
            "title": "Extension",
            "description": "Extension.\n\nPossible to omit like `README` case."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL path of the real file",
            "description": "URL path of the real file."
          }
        },
        "required": [
          "id",
          "created_at",
          "name",
          "extension",
          "url"
        ],
        "description": "Attachment File.\n\nEvery attachment files that are managed in current system.\n\nFor reference, it is possible to omit one of file {@link name}\nor {@link extension} like `.gitignore` or `README` case, but not\npossible to omit both of them."
      },
      "IShoppingSaleChannel": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
            },
            "title": "List of categories of the channel listing the sale",
            "description": "List of categories of the channel listing the sale.\n\nIf empty, it means all categories of the channel is listing the sale."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Name of the channel",
            "description": "Name of the channel."
          }
        },
        "required": [
          "categories",
          "id",
          "created_at",
          "code",
          "name"
        ],
        "description": "Target channel (and categories) of sale to sell.\n\n`IShoppingSaleChannel` is an entity that expresses through which\n{@link IShoppingChannel channel} a listing {@link IShoppingSale} is sold.\n\nAlso, if {@link IShoppingChannelCategory categories} are specified, it also\nmeans that the sale be sold. Otherwise, none of the categories of the channel\nbeing specified, it means that every categories of the channel is listing the\ntarget sale."
      },
      "IShoppingSaleUnit.ISummary": {
        "type": "object",
        "properties": {
          "price_range": {
            "$ref": "#/components/schemas/IShoppingSalePriceRange"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the unit",
            "description": "Representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether the unit is primary or not",
            "description": "Whether the unit is primary or not.\n\nJust a labeling value."
          },
          "required": {
            "type": "boolean",
            "title": "Whether the unit is required or not",
            "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case."
          }
        },
        "required": [
          "price_range",
          "id",
          "name",
          "primary",
          "required"
        ]
      },
      "IShoppingCouponFunnelCriteria": {
        "type": "object",
        "properties": {
          "funnels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria.IValueFunnel"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria.IVariableFunnel"
                }
              ]
            },
            "minItems": 1,
            "title": "List of target funnels",
            "description": "List of target funnels."
          },
          "type": {
            "const": "funnel",
            "title": "Descrimanator type",
            "description": "Descrimanator type."
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ],
            "title": "Direction of the criteria",
            "description": "Direction of the criteria."
          }
        },
        "required": [
          "funnels",
          "type",
          "direction"
        ],
        "description": "Limit the funnel of discount coupons.\n\n`ishoppingcouponfunnelcriteria` is a subtype entity of\n{@link IShoppingCouponCriteria}, and is used when you want to issue or\nexclude discount coupons only to {@link IShoppingCustomer customers} who\ncame from a specific path.\n\nAnd funnel restrictions are possible in 3 ways: The first is\n{@link IShoppingCustomer.referrer}, and by parsing\n{@link IShoppingCustomer.href}, which records the customer's access\naddress, restrictions can be made in units of specific URLs or variables."
      },
      "IShoppingCouponFunnelCriteria.IValueFunnel": {
        "type": "object",
        "properties": {
          "kind": {
            "oneOf": [
              {
                "const": "url"
              },
              {
                "const": "referrer"
              }
            ],
            "title": "Kind of funnel restriction",
            "description": "Kind of funnel restriction."
          },
          "value": {
            "type": "string",
            "title": "Target value",
            "description": "Target value."
          }
        },
        "required": [
          "kind",
          "value"
        ],
        "description": "Kind of funnel restriction by a value."
      },
      "IShoppingCouponFunnelCriteria.IVariableFunnel": {
        "type": "object",
        "properties": {
          "kind": {
            "const": "variable",
            "title": "Kind of funnel restriction",
            "description": "Kind of funnel restriction."
          },
          "key": {
            "type": "string",
            "title": "Target variable's key",
            "description": "Target variable's key."
          },
          "value": {
            "type": "string",
            "title": "Target variable's value",
            "description": "Target variable's value."
          }
        },
        "required": [
          "kind",
          "key",
          "value"
        ],
        "description": "Kind of funnel restriction by a variable."
      },
      "IShoppingCouponDiscount.IAmount": {
        "type": "object",
        "properties": {
          "unit": {
            "const": "amount",
            "title": "Discount unit as amount",
            "description": "Discount unit as amount.\n\nIt means the order price would be discounted by the amount value."
          },
          "value": {
            "type": "number",
            "title": "Discount value as amount",
            "description": "Discount value as amount."
          },
          "threshold": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Minimum purchase amount for discount",
            "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value."
          },
          "limit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "exclusiveMinimum": true,
                "minimum": 0
              }
            ],
            "title": "Maximum amount available for discount",
            "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order. This property would be meaningful\nonly when the {@link multiplicative} is `true`."
          },
          "multiplicative": {
            "type": "boolean",
            "title": "Multiplicative or not",
            "description": "Multiplicative or not.\n\nIf this property is `true`, the discount value would be multiplied\nto the {@link IShoppingCartCommodity.volume} or\n{@link IShoppingOrderGood.volume} value. Also, in that case,\nthe {@link limit} property would be meaningful."
          }
        },
        "required": [
          "unit",
          "value",
          "threshold",
          "limit",
          "multiplicative"
        ],
        "description": "Discount information with amount unit."
      },
      "IShoppingCouponDiscount.IPercent": {
        "type": "object",
        "properties": {
          "unit": {
            "const": "percent",
            "title": "Discount unit as percent",
            "description": "Discount unit as percent.\n\nIt means the order price would be discounted by the percent value."
          },
          "value": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Discount value as percent",
            "description": "Discount value as percent."
          },
          "threshold": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "minimum": 0
              }
            ],
            "title": "Minimum purchase amount for discount",
            "description": "Minimum purchase amount for discount.\n\nWhen setting this value, discount coupons cannot be applied to\norder totals that are less than this value."
          },
          "limit": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number",
                "exclusiveMinimum": true,
                "minimum": 0
              }
            ],
            "title": "Maximum amount available for discount",
            "description": "Maximum amount available for discount.\n\nWhen this value is set, no further discount will be given no\nmatter how much you order."
          }
        },
        "required": [
          "unit",
          "value",
          "threshold",
          "limit"
        ],
        "description": "Discount information with percent unit."
      },
      "IShoppingCouponRestriction": {
        "type": "object",
        "properties": {
          "access": {
            "oneOf": [
              {
                "const": "public"
              },
              {
                "const": "private"
              }
            ],
            "title": "Access level of coupon",
            "description": "Access level of coupon.\n\n- public: possible to find from public API\n- private: unable to find from public API\n  - arbitrarily assigned by the seller or administrator\n  - issued from one-time link"
          },
          "exclusive": {
            "type": "boolean",
            "title": "Exclusivity or not",
            "description": "Exclusivity or not.\n\nAn exclusive discount coupon refers to a discount coupon that has an\nexclusive relationship with other discount coupons and can only be\nused alone. That is, when an exclusive discount coupon is used, no\nother discount coupon can be used for the same\n{@link IShoppingOrder order} or {@link IShoppingOrderGood good}.\n\nPlease note that this exclusive attribute is a very different concept\nfrom multiplicative, which means whether the same coupon can be\nmultiplied and applied to multiple coupons of the same order, so\nplease do not confuse them."
          },
          "volume": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Limited quantity issued",
            "description": "Limited quantity issued.\n\nIf there is a limit to the quantity issued, it becomes impossible to issue tickets exceeding this value.\n\nIn other words, the concept of N coupons being issued on a first-come, first-served basis is created."
          },
          "volume_per_citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Limited quantity issued per person",
            "description": "Limited quantity issued per person.\n\nAs a limit to the total amount of issuance per person, it is common to assign 1 to limit duplicate issuance to the same citizen, or to use the NULL value to set no limit.\n\nOf course, by assigning a value of N, the total amount issued to the same citizen can be limited."
          },
          "expired_in": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Expiration day(s) value",
            "description": "Expiration day(s) value.\n\nThe concept of expiring N days after a discount coupon ticket is issued.\n\nTherefore, customers must use the ticket within N days, if possible, from the time it is issued."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration date",
            "description": "Expiration date.\n\nA concept that expires after YYYY-MM-DD after a discount coupon ticket is issued.\n\nDouble restrictions are possible with expired_in, of which the one with the shorter expiration date is used."
          }
        },
        "required": [
          "access",
          "exclusive",
          "volume",
          "volume_per_citizen",
          "expired_in",
          "expired_at"
        ],
        "description": "Restriction information of the coupon."
      },
      "IShoppingCoupon.ICreate": {
        "type": "object",
        "properties": {
          "discount": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IShoppingCouponDiscount.IAmount"
              },
              {
                "$ref": "#/components/schemas/IShoppingCouponDiscount.IPercent"
              }
            ],
            "discriminator": {
              "propertyName": "unit",
              "mapping": {
                "amount": "#/components/schemas/IShoppingCouponDiscount.IAmount",
                "percent": "#/components/schemas/IShoppingCouponDiscount.IPercent"
              }
            },
            "title": "Discount information",
            "description": "Discount information."
          },
          "restriction": {
            "$ref": "#/components/schemas/IShoppingCouponRestriction",
            "title": "Restriction information",
            "description": "Restriction information."
          },
          "criterias": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingCouponChannelCriteria.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSectionCriteria.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSellerCriteria.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponSaleCriteria.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria.ICreate"
                }
              ],
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "channel": "#/components/schemas/IShoppingCouponChannelCriteria.ICreate",
                  "section": "#/components/schemas/IShoppingCouponSectionCriteria.ICreate",
                  "seller": "#/components/schemas/IShoppingCouponSellerCriteria.ICreate",
                  "sale": "#/components/schemas/IShoppingCouponSaleCriteria.ICreate",
                  "funnel": "#/components/schemas/IShoppingCouponFunnelCriteria.ICreate"
                }
              }
            }
          },
          "disposable_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "title": "Representative name of the coupon",
            "description": "Representative name of the coupon."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the coupon",
            "description": "Opening time of the coupon."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the coupon",
            "description": "Closing time of the coupon.\n\nTickets cannot be issued after this time.\n\nHowever, previously issued tickets can still be used until their\nexpiration date."
          }
        },
        "required": [
          "discount",
          "restriction",
          "criterias",
          "disposable_codes",
          "name",
          "opened_at",
          "closed_at"
        ],
        "description": "Creation information of the coupon."
      },
      "IShoppingCouponChannelCriteria.ICreate": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponChannelCriteria.IChannelTo.ICreate"
            },
            "minItems": 1,
            "title": "List of target channels and categories",
            "description": "List of target channels and categories."
          },
          "type": {
            "const": "channel"
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ]
          }
        },
        "required": [
          "channels",
          "type",
          "direction"
        ],
        "description": "Creation information of the channel criteria."
      },
      "IShoppingCouponChannelCriteria.IChannelTo.ICreate": {
        "type": "object",
        "properties": {
          "channel_code": {
            "type": "string",
            "title": "Target channel's {@link IShoppingChannel.code}",
            "description": "Target channel's {@link IShoppingChannel.code}."
          },
          "category_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "title": "Target categories' {@link IShoppingChannelCategory.id}s",
            "description": "Target categories' {@link IShoppingChannelCategory.id}s."
          }
        },
        "required": [
          "channel_code",
          "category_ids"
        ],
        "description": "Target channel and categories."
      },
      "IShoppingCouponSectionCriteria.ICreate": {
        "type": "object",
        "properties": {
          "section_codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "title": "List of target section's {@link IShoppingSection.code}s",
            "description": "List of target section's {@link IShoppingSection.code}s."
          },
          "type": {
            "const": "section"
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ]
          }
        },
        "required": [
          "section_codes",
          "type",
          "direction"
        ],
        "description": "Creation information of the section criteria."
      },
      "IShoppingCouponSellerCriteria.ICreate": {
        "type": "object",
        "properties": {
          "seller_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "List of target seller's {@link IShoppingSeller.id}s",
            "description": "List of target seller's {@link IShoppingSeller.id}s."
          },
          "type": {
            "const": "seller"
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ]
          }
        },
        "required": [
          "seller_ids",
          "type",
          "direction"
        ],
        "description": "Creation information of the seller criteria."
      },
      "IShoppingCouponSaleCriteria.ICreate": {
        "type": "object",
        "properties": {
          "sale_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "List of target sale's {@link IShoppingSale.id}s",
            "description": "List of target sale's {@link IShoppingSale.id}s."
          },
          "type": {
            "const": "sale"
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ]
          }
        },
        "required": [
          "sale_ids",
          "type",
          "direction"
        ],
        "description": "Creation information of the sale criteria."
      },
      "IShoppingCouponFunnelCriteria.ICreate": {
        "type": "object",
        "properties": {
          "funnels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria.IValueFunnel"
                },
                {
                  "$ref": "#/components/schemas/IShoppingCouponFunnelCriteria.IVariableFunnel"
                }
              ]
            },
            "minItems": 1,
            "title": "List of target funnels",
            "description": "List of target funnels."
          },
          "type": {
            "const": "funnel"
          },
          "direction": {
            "oneOf": [
              {
                "const": "include"
              },
              {
                "const": "exclude"
              }
            ]
          }
        },
        "required": [
          "funnels",
          "type",
          "direction"
        ],
        "description": "Creation information of the funnel criteria."
      },
      "IPageIShoppingCoupon": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCoupon"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "title": "Current page number",
            "description": "Current page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          },
          "records": {
            "type": "integer",
            "title": "Total records in the database",
            "description": "Total records in the database."
          },
          "pages": {
            "type": "integer",
            "title": "Total pages",
            "description": "Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."
          }
        },
        "required": [
          "current",
          "limit",
          "records",
          "pages"
        ],
        "description": "Page information."
      },
      "IShoppingCoupon.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingCoupon.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-coupon.name"
                },
                {
                  "const": "-coupon.unit"
                },
                {
                  "const": "-coupon.value"
                },
                {
                  "const": "-coupon.created_at"
                },
                {
                  "const": "-coupon.opened_at"
                },
                {
                  "const": "-coupon.closed_at"
                },
                {
                  "const": "+coupon.name"
                },
                {
                  "const": "+coupon.unit"
                },
                {
                  "const": "+coupon.value"
                },
                {
                  "const": "+coupon.created_at"
                },
                {
                  "const": "+coupon.opened_at"
                },
                {
                  "const": "+coupon.closed_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingCoupon.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "IPageIShoppingDeposit": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeposit"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingDeposit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "code",
          "source",
          "direction"
        ]
      },
      "IShoppingDeposit.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingDeposit.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-deposit.source"
                },
                {
                  "const": "-deposit.code"
                },
                {
                  "const": "-deposit.direction"
                },
                {
                  "const": "+deposit.source"
                },
                {
                  "const": "+deposit.code"
                },
                {
                  "const": "+deposit.direction"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingDeposit.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        }
      },
      "IShoppingDeposit.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        },
        "required": [
          "code",
          "source",
          "direction"
        ]
      },
      "IPageIShoppingMileage": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingMileage"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingMileage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        },
        "required": [
          "id",
          "value",
          "created_at",
          "code",
          "source",
          "direction"
        ]
      },
      "IShoppingMileage.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingMileage.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-mileage.source"
                },
                {
                  "const": "-mileage.code"
                },
                {
                  "const": "-mileage.direction"
                },
                {
                  "const": "+mileage.source"
                },
                {
                  "const": "+mileage.code"
                },
                {
                  "const": "+mileage.direction"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingMileage.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          }
        }
      },
      "IShoppingMileage.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "direction": {
            "oneOf": [
              {
                "const": -1
              },
              {
                "const": 1
              }
            ]
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ]
          }
        },
        "required": [
          "code",
          "source",
          "direction",
          "value"
        ]
      },
      "IPageIShoppingMileageDonation": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingMileageDonation"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingMileageDonation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "administrator": {
            "$ref": "#/components/schemas/IShoppingAdministrator.IInvert"
          },
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen"
          },
          "value": {
            "type": "number"
          },
          "reason": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "administrator",
          "citizen",
          "value",
          "reason",
          "created_at"
        ]
      },
      "IShoppingMileageDonation.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingMileageDonation.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-donation.created_at"
                },
                {
                  "const": "-donation.value"
                },
                {
                  "const": "-donation.reason"
                },
                {
                  "const": "+donation.created_at"
                },
                {
                  "const": "+donation.value"
                },
                {
                  "const": "+donation.reason"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingMileageDonation.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen.IRequest.ISearch"
          },
          "minimum": {
            "type": "number",
            "minimum": 0
          },
          "maximum": {
            "type": "number",
            "minimum": 0
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IShoppingCitizen.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IShoppingMileageDonation.ICreate": {
        "type": "object",
        "properties": {
          "citizen_id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "citizen_id",
          "value",
          "reason"
        ]
      },
      "IPageIShoppingOrder": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrder"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who've applied for the order",
            "description": "Customer who've applied for the order."
          },
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrderGood"
            },
            "minItems": 1,
            "title": "List of goods in the order",
            "description": "List of goods in the order."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingOrderPrice",
            "title": "Price information including discounts",
            "description": "Price information including discounts.\n\nFor reference, this price value has multiplied by the {@link volume} value.\nTherefore, even if {@link volume} value is equal to the target\n{@link IShoppingCartCommodity.volume}, this price value can be different\nwith the {@link IShoppingCartCommodity.price} value."
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingOrderPublish"
              }
            ],
            "title": "Order completion and payment information",
            "description": "Order completion and payment information."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "customer",
          "goods",
          "price",
          "publish",
          "created_at"
        ],
        "description": "Order application information.\n\n`IShoppingOrder` is an entity that embodies {@link IShoppingCustomer customer}'s\norder application information. However, please note that at this time, you are\nstill at the \"order application\" stage and not the \"order confirmation\" stage.\n\nAnd as soon as a customer applies for an order, all\n{@link IShoppingCartCommodity commodities} in the target shopping cart are\npromoted to {@link IShoppingOrderGood goods}, and those good records are created\nunder this `IShoppingOrder`.\n\nOf course, not all commodities in the target shopping cart become\n{@link IShoppingOrderGood}, but only those selected by the customer become the\n{@link IShoppingOrderGood}."
      },
      "IShoppingCustomer": {
        "type": "object",
        "properties": {
          "type": {
            "const": "customer",
            "title": "Discriminant for the type of customer",
            "description": "Discriminant for the type of customer."
          },
          "member": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingMember"
              }
            ],
            "title": "Membership information",
            "description": "Membership information.\n\nIf the customer has joined as a member."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen"
              }
            ],
            "title": "Citizen information",
            "description": "Citizen information.\n\nIf the customer has verified his real name and mobile number."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IShoppingChannel",
            "title": "Belonged channel",
            "description": "Belonged channel."
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nWhen the customer has come frome an external service."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "Connection address",
            "description": "Connection address.\n\nSame with {@link window.location.href} of client."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Referrer address",
            "description": "Referrer address.\n\nSame with {@link window.document.referrer} of client."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "Connection IP Address",
            "description": "Connection IP Address."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the connection record",
            "description": "Creation time of the connection record."
          }
        },
        "required": [
          "type",
          "member",
          "citizen",
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "created_at"
        ],
        "description": "Customer information, but not a person but a connection basis.\n\n`IShoppingCustomer` is an entity that literally embodies the information of\nthose who participated in the market as customers. By the way, the\n`IShoppingCustomer` does not mean a person, but a connection basis. Therefore,\neven if the same person connects to the shopping mall multiple, multiple\nrecords are created in `IShoppingCustomer`.\n\nThe first purpose of this is to track the customer's inflow path in detail,\nand it is for cases where the same person enters as a non-member,\n{@link IShoppingCartCommodity puts items in the shopping cart} in advance,\nand only authenticates their {@link IShoppingCitizen real name} or\nregisters/logs in at the moment of {@link IShoppingOrderPublish payment}.\nIt is the second. Lastly, it is to accurately track the activities that\na person performs at the shopping mall in various ways like below.\n\n- Same person comes from an {@link IShoppingExternalUser external service}\n- Same person creates multiple accounts\n- Same person makes a {@link IShoppingOrderPublish purchase} as a non-member with only {@link IShoppingCitizen real name authentication}\n- Same person acts both {@link IShoppingSeller seller} and {@link IShoppingAdministrator admin} at the same time\n\nTherefore, `IShoppingCustomer` can have multiple records with the same\n{@link IShoppingCitizen}, {@link IShoppingMember}, and\n{@link IShoppingExternalUser}. Additionally, if a customer signs up for\nmembership after verifying their real name or signs up for our service after\nbeing a user of an external service, all related records are changed at once.\nTherefore, identification and tracking of customers can be done very\nsystematically."
      },
      "IShoppingMember": {
        "type": "object",
        "properties": {
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen"
              }
            ],
            "title": "Citizen information",
            "description": "Citizen information.\n\nOnly when has verified as a citizen, with mobile number and real name.\n\nFor reference, if the member has signed up as a seller or administrator,\nthis citizen information must be."
          },
          "seller": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSeller"
              }
            ],
            "title": "Seller information",
            "description": "Seller information.\n\nIf the member also signed up as a seller."
          },
          "administrator": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingAdministrator"
              }
            ],
            "title": "Administrator information",
            "description": "Administrator information.\n\nIf the member also signed up as an administrator."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "nickname": {
            "type": "string",
            "title": "Nickname that uniquely identifies the member",
            "description": "Nickname that uniquely identifies the member."
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingMemberEmail"
            },
            "title": "List of emails",
            "description": "List of emails."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record.\n\nAnother words, the time when the member has signed up."
          }
        },
        "required": [
          "citizen",
          "seller",
          "administrator",
          "id",
          "nickname",
          "emails",
          "created_at"
        ],
        "description": "Member Account.\n\n`IShoppingMember` is an entity that symbolizes the case when a\n{@link IShoppingCustomer} signs up as a member of this shopping mall\nsystem.\n\nIf a `IShoppingMember` has seller or administrator property. it means that\nthe {@link IShoppingCustomer} has acting as a {@link IShoppingSeller seller}\nor {@link IShoppingAdministrator administrator} at the same time."
      },
      "IShoppingOrderGood": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "commodity": {
            "$ref": "#/components/schemas/IShoppingCartCommodity",
            "title": "Commodity that is the basis of the good",
            "description": "Commodity that is the basis of the good."
          },
          "volume": {
            "type": "integer",
            "title": "Volume of the good",
            "description": "Volume of the good.\n\nThe value multiplied to {@link IShoppingCartCommodityStock.quantity}.\nIt's purpose is exactly same with {@link IShoppingCartCommodity.volume},\nbut rewritten because the {@link IShoppingCartCommodity} records are reusable\nuntil payment."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingOrderPrice.ISummary",
            "title": "Price information including discounts and multipled volume",
            "description": "Price information including discounts and multipled volume."
          },
          "state": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "none"
              },
              {
                "const": "underway"
              },
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              },
              {
                "const": "arrived"
              }
            ],
            "title": "State of delivery about the good",
            "description": "State of delivery about the good."
          },
          "confirmed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Confirmation time of order good",
            "description": "Confirmation time of order good.\n\nWhen be confirmed, customer can't request refund or exchange.\n\nThe confirmation be accomplished by following cases.\n\n- Customer does it directly.\n- 14 days after the delivery."
          }
        },
        "required": [
          "id",
          "commodity",
          "volume",
          "price",
          "state",
          "confirmed_at"
        ],
        "description": "Information about the individual goods that make up your order.\n\n`IShoppingOrderGood` is an entity that represents each good ordered by a\n{@link IShoppingCustomer customer}, and the record is created in the process\nof upgrading the product {@link IShoppingCartCommodity commodity} in the\nshopping cart to a good due to the customer's {@link IShoppingOrder order}\nrequest.\n\nAnd `IShoppingOrderGood`, like {@link IShoppingCartCommodity}, is a concept\nthat corresponds to the listing {@link IShoppingSaleSnapshot sale snapshot}.\n\nFor reference, `IShoppingOrderGood` also contains {@link volume} information\nseparately from the belonging {@link IShoppingCartCommodity.volume}. This is\nbecause there are some cases where you put 3 books in your shopping cart and\nthen change them to 4 during the actual order application process. This is to\nincrease the reusability of the shopping cart by changing the volume attribute\nof the current entity rather than directly changing the commodity information.\n\nIn addition, `IShoppingOrderGood` becomes the most basic unit for the post-order\nprocess, that is, after service (A/S). For example, after receiving a\ncustomer's product, confirming the order is recorded in the {@link confirmed_at}\nattribute. Additionally, `IShoppingOrderGood` is the unit in which customers\nissues or request exchanges or refunds for ordered products."
      },
      "IShoppingCartCommodity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "sale": {
            "$ref": "#/components/schemas/IShoppingSaleSnapshot.IInvert",
            "title": "Invert information of the sale (snapshot), in the perspective of commodity",
            "description": "Invert information of the sale (snapshot), in the perspective of commodity."
          },
          "orderable": {
            "type": "boolean",
            "title": "Whether current commodity is orderable or not",
            "description": "Whether current commodity is orderable or not.\n\nIf this attribute is `false`, then the commodity is not orderable, because\nit has already been ordered."
          },
          "pseudo": {
            "type": "boolean",
            "title": "Whether current commodity is pseudo or not",
            "description": "Whether current commodity is pseudo or not.\n\nWhen this attribute is `true`, then the commodity is not the real one,\nbut just fake information only for calculating the discount effect by\n{@link IShoppingCoupon coupons}."
          },
          "volume": {
            "type": "integer",
            "minimum": 1,
            "title": "Volume of the commodity to purchase",
            "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingPrice",
            "title": "Price of the commodity",
            "description": "Price of the commodity.\n\nFor reference, this price value has not been multiplied by the\n{@link volume} value. It just sumed up the prices of the children\n{@link IShoppingSaleUnitStock.IInvert.price} values."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "sale",
          "orderable",
          "pseudo",
          "volume",
          "price",
          "created_at"
        ],
        "description": "Item in a shopping cart.\n\n`IShoppingCartCommodity` is an entity that represents a\n{@link IShoppingSaleSnapshot snapshot} of the items that\n{@link IShoppingCustomer customer} has placed into his shopping cart with a\n{@link IShoppingOrder purchase} in mind. And if the customer continues this\ninto an actual order in the future, `IShoppingCartCommodity` be changed to\n{@link IShoppingOrderGood}.\n\nAnd while adding a sale snapshot to the shopping cart, the customer inevitably\nselects specific {@link IShoppingSaleUnit units} and\n{@link IShoppingSaleUnitStock final stocks} within the listing snapshot.\nInformation about these units and stocks is recorded in the subsidiary entity\n{@link IShoppingCartCommodityStock}. Also, there is an attribute {@link volume}\nthat indicates how many sets of snapshots of the target commodity will be\npurchased. This \"volume\" is a value that will be multiplied by\n{@link IShoppingSaleUnitStock.IInvert.quantity}, the quantity for each\ncomponent."
      },
      "IShoppingSaleSnapshot.IInvert": {
        "type": "object",
        "properties": {
          "section": {
            "$ref": "#/components/schemas/IShoppingSection",
            "title": "Belonged section's information",
            "description": "Belonged section's information."
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller.IInvert",
            "title": "Seller who've registered the sale",
            "description": "Seller who've registered the sale."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Sale",
            "description": "Primary Key of Sale."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Snapshot",
            "description": "Primary Key of Snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether the snapshot is the latest one or not",
            "description": "Whether the snapshot is the latest one or not."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent.IInvert",
            "title": "Description and image content describing the sale",
            "description": "Description and image content describing the sale."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel"
            },
            "minItems": 1,
            "title": "List of channels and categories",
            "description": "List of channels and categories.\n\nWhich channels and categories the sale is registered to."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit.IInvert"
            },
            "minItems": 1,
            "title": "List of units",
            "description": "List of units.\n\nRecords about individual product composition informations that are sold\nin the sale. Each {@link IShoppingSaleUnit unit} record has configurable\n{@link IShoppingSaleUnitOption options},\n{@link IShoppingSaleUnitOptionCandidate candidate} values for each\noption, and {@link IShoppingSaleUnitStock final stocks} determined by\nselecting every candidate values of each option."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record.\n\nNote that, this property is different with {@link opened_at},\nwhich means the timepoint of the sale is opened."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last updated time of the record",
            "description": "Last updated time of the record.\n\nIn another words, creation time of the last snapshot."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Paused time of the sale",
            "description": "Paused time of the sale.\n\nThe sale is paused by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} can still see the sale on the\nboth list and detail pages, but the sale has a warning label\n\"The sale is paused by the seller\"."
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Suspended time of the sale",
            "description": "Suspended time of the sale.\n\nThe sale is suspended by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} cannot see the sale on the\nboth list and detail pages. It is almost same with soft delettion,\nbut there's a little bit difference that the owner\n{@link IShoppingSeller seller} can still see the sale and resume it.\n\nOf course, the {@link IShoppingCustomer customers} who have\nalready purchased the sale can still see the sale on the\n{@link IShoppingOrder order} page."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the sale",
            "description": "Opening time of the sale."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the sale",
            "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever."
          }
        },
        "required": [
          "section",
          "seller",
          "id",
          "snapshot_id",
          "latest",
          "content",
          "channels",
          "tags",
          "units",
          "created_at",
          "updated_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Invert information of the sale snapshot, in the perspective of commodity.\n\n`IShoppingSaleSnapshot.IInvert` is a structure used to represent a\nsnapshot in the perspective of a {@link IShoppingCommodity}, corresponding\nto an {@link IShoppingCartCommodityStock} entity.\n\nTherefore, `IShoppingSaleSnapshot.IInvert` does not contain every\n{@link IShoppingSaleUnit units} and {@link IShoppingSaleUnitStock stocks}\nof the snapshot records, but only some of the records which are put\ninto the {@link IShoppingCartCommodity shopping cart}."
      },
      "IShoppingSaleUnit.IInvert": {
        "type": "object",
        "properties": {
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStock.IInvert"
            },
            "minItems": 1,
            "title": "List of final stocks",
            "description": "List of final stocks."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the unit",
            "description": "Representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether the unit is primary or not",
            "description": "Whether the unit is primary or not.\n\nJust a labeling value."
          },
          "required": {
            "type": "boolean",
            "title": "Whether the unit is required or not",
            "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case."
          }
        },
        "required": [
          "stocks",
          "id",
          "name",
          "primary",
          "required"
        ]
      },
      "IShoppingSaleUnitStock.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingPrice",
            "title": "Price of the stock",
            "description": "Price of the stock."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "title": "Quantity of the stock in the cart",
            "description": "Quantity of the stock in the cart."
          },
          "inventory": {
            "$ref": "#/components/schemas/IShoppingSaleUnitStockInventory",
            "title": "Current inventory status of the stock",
            "description": "Current inventory status of the stock."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStockChoice.IInvert"
            },
            "title": "List of choices",
            "description": "List of choices.\n\nWhich values being written for each option."
          }
        },
        "required": [
          "id",
          "name",
          "price",
          "quantity",
          "inventory",
          "choices"
        ],
        "description": "Invert information from the cart."
      },
      "IShoppingSaleUnitStockInventory": {
        "type": "object",
        "properties": {
          "income": {
            "type": "integer",
            "title": "Total income quantity",
            "description": "Total income quantity."
          },
          "outcome": {
            "type": "integer",
            "title": "Total outcome quantity",
            "description": "Total outcome quantity."
          }
        },
        "required": [
          "income",
          "outcome"
        ],
        "description": "Inventory information of a final stock."
      },
      "IShoppingSaleUnitStockChoice.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "option": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IShoppingSaleUnitSelectableOption.IInvert"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleUnitDescriptiveOption"
              }
            ],
            "title": "Target option",
            "description": "Target option."
          },
          "candidate": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleUnitOptionCandidate"
              }
            ],
            "title": "Selected candidate value",
            "description": "Selected candidate value."
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Written value",
            "description": "Written value."
          }
        },
        "required": [
          "id",
          "option",
          "candidate",
          "value"
        ],
        "description": "Invert information from the cart."
      },
      "IShoppingSaleUnitSelectableOption.IInvert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "select",
            "title": "Discriminant for the type of selectable option",
            "description": "Discriminant for the type of selectable option."
          },
          "name": {
            "type": "string",
            "title": "Represents the name of the option",
            "description": "Represents the name of the option."
          },
          "variable": {
            "type": "boolean",
            "title": "Whether the option is variable or not",
            "description": "Whether the option is variable or not.\n\nWhen type of current option is \"select\", this attribute means whether\nselecting different candidate value affects the final stock or not."
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "variable"
        ]
      },
      "IShoppingSaleUnitDescriptiveOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "oneOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              }
            ],
            "title": "Type of descriptive option",
            "description": "Type of descriptive option.\n\nWhich typed value should be written when purchasing."
          },
          "name": {
            "type": "string",
            "title": "Readable name of the option",
            "description": "Readable name of the option."
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ],
        "description": "Descriptive option.\n\nWhen type of the option not `\"select\"`, it means the option is descriptive\nthat requiring {@link IShoppingCustomer customers} to write some value to\n{@link IShoppingOrder purchase}. Also, whatever customer writes about the\noption, it does not affect the {@link IShoppingSaleUnitStock final stock}.\n\nAnother words, the descriptive option is just for information transfer."
      },
      "IShoppingSaleUnitOptionCandidate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Represents the name of the candidate value",
            "description": "Represents the name of the candidate value."
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Selectable candidate values within an option.\n\n`IShoppingSaleUnitOptionCandidate` is an entity that represents individual\ncandidate values that can be selected from\n{@link IShoppingSaleUnitSelectableOption options of the \"select\" type}.\n\n- Example\n  - RAM: 8GB, 16GB, 32GB\n  - GPU: RTX 3060, RTX 4080, TESLA\n  - License: Private, Commercial, Educatiion\n\nBy the way, if belonged option is not \"select\" type, this entity never\nbeing used."
      },
      "IShoppingOrderPrice.ISummary": {
        "type": "object",
        "properties": {
          "cash": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the cash payment",
            "description": "Amount of the cash payment."
          },
          "deposit": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the deposit payment",
            "description": "Amount of the deposit payment."
          },
          "mileage": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the mileage payment",
            "description": "Amount of the mileage payment."
          },
          "ticket": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the discount coupon ticket payment",
            "description": "Amount of the discount coupon ticket payment."
          },
          "nominal": {
            "type": "number",
            "minimum": 0,
            "title": "Nominal price",
            "description": "Nominal price.\n\nThis is not {@link real real price} to pay, but just a nominal price to show.\nIf this value is greater than the {@link real real price}, it would be shown\nlike {@link IShoppingSeller seller} is giving a discount."
          },
          "real": {
            "type": "number",
            "minimum": 0,
            "title": "Real price to pay",
            "description": "Real price to pay."
          }
        },
        "required": [
          "cash",
          "deposit",
          "mileage",
          "ticket",
          "nominal",
          "real"
        ],
        "description": "Summarized information of the order price."
      },
      "IShoppingOrderPrice": {
        "type": "object",
        "properties": {
          "ticket_payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponTicketPayment"
            },
            "title": "List of discount coupon ticket payments",
            "description": "List of discount coupon ticket payments."
          },
          "cash": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the cash payment",
            "description": "Amount of the cash payment."
          },
          "deposit": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the deposit payment",
            "description": "Amount of the deposit payment."
          },
          "mileage": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the mileage payment",
            "description": "Amount of the mileage payment."
          },
          "ticket": {
            "type": "number",
            "minimum": 0,
            "title": "Amount of the discount coupon ticket payment",
            "description": "Amount of the discount coupon ticket payment."
          },
          "nominal": {
            "type": "number",
            "minimum": 0,
            "title": "Nominal price",
            "description": "Nominal price.\n\nThis is not {@link real real price} to pay, but just a nominal price to show.\nIf this value is greater than the {@link real real price}, it would be shown\nlike {@link IShoppingSeller seller} is giving a discount."
          },
          "real": {
            "type": "number",
            "minimum": 0,
            "title": "Real price to pay",
            "description": "Real price to pay."
          }
        },
        "required": [
          "ticket_payments",
          "cash",
          "deposit",
          "mileage",
          "ticket",
          "nominal",
          "real"
        ],
        "description": "Price infromation of the order including discounts."
      },
      "IShoppingCouponTicketPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "ticket": {
            "$ref": "#/components/schemas/IShoppingCouponTicket",
            "title": "Target ticket",
            "description": "Target ticket."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "ticket",
          "created_at"
        ],
        "description": "Discount coupon ticket payment details.\n\n`IShoppingCouponTicketPayment` is an entity that embodies the payment\ninformation for the {@link IShoppingOrder order} of\n{@link IShoppingCouponTicket}, and is used when a consumer uses the\ndiscount coupon ticket he or she was issued to order and has the payment\namount deducted.\n\nAnd since {@link IShoppingOrder} itself is not an entity used in\nsituations where an order is completed, but rather an entity designed to\nexpress an order request, the creation of this\n`IShoppingCouponTicketPayment` record does not actually mean that the\nattached ticket disappears. Until the {@link IShoppingCustomer customer}\n{@link IShoppingOrderPublish.paid_at completes the payment} and confirms\nthe order, the ticket can be understood as a kind of deposit.\n\nAdditionally, this record can be deleted by the customer reversing the\npayment of the ticket, but it can also be deleted when the attribution\norder itself is cancelled."
      },
      "IShoppingCouponTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who've taken the coupon ticket",
            "description": "Customer who've taken the coupon ticket."
          },
          "coupon": {
            "$ref": "#/components/schemas/IShoppingCoupon",
            "title": "Target coupon",
            "description": "Target coupon."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          },
          "expired_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Expiration time of the ticket",
            "description": "Expiration time of the ticket."
          }
        },
        "required": [
          "id",
          "customer",
          "coupon",
          "created_at",
          "expired_at"
        ],
        "description": "Discount coupon ticket issuance details.\n\n`IShoppingCouponTicket` is an entity that symbolizes\n{@link IShoppingCoupon discount coupon} tickets issued by\n{@link IShoppingCustomer customers}.\n\nAnd if the target discount coupon specification itself has an expiration\ndate, the expiration date is recorded in expired_at and is automatically\ndiscarded after that expiration date. Of course, it doesn't matter if you\nuse the discount coupon for your order within the deadline."
      },
      "IShoppingOrderPublish": {
        "type": "object",
        "properties": {
          "deliveries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDelivery"
            },
            "title": "List of deliveries",
            "description": "List of deliveries.\n\nAn {@link IShoppingOrder order} can be delivered in multiple times.\nOf course, the opposite case is also possible, that a\n{@link IShoppingDelivery delivery} can be composed of multiple orders."
          },
          "state": {
            "oneOf": [
              {
                "const": "none"
              },
              {
                "const": "underway"
              },
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              },
              {
                "const": "arrived"
              }
            ],
            "title": "State of the order, about the deliveries",
            "description": "State of the order, about the deliveries."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          },
          "paid_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Time when the order was paid",
            "description": "Time when the order was paid."
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Time when the payment was cancelled",
            "description": "Time when the payment was cancelled."
          },
          "address": {
            "$ref": "#/components/schemas/IShoppingAddress",
            "title": "Address where the {@link IShoppingOrderGood goods} to be delivered",
            "description": "Address where the {@link IShoppingOrderGood goods} to be delivered."
          }
        },
        "required": [
          "deliveries",
          "state",
          "id",
          "created_at",
          "paid_at",
          "cancelled_at",
          "address"
        ],
        "description": "Order completion and payment information.\n\n`IShoppingOrderPublish` is an entity that embodies the series of processes\nin which a {@link IShoppingCustomer customer} pays for his or her\n{@link IShoppingOrder order}, thereby completing the order. And only after\nthe order is {@link paid_at completed}, can the {@link IShoppingSeller seller}\nrecognize that the customer has purchased his product.\n\nBy the way, please note that just because the `IShoppingOrderPublish` record\nexists, it does not mean that the payment has been completed. Of course, with\n\"credit cards\" and \"Google Pay\", payment application and payment occur at the\nsame time. However, there are some cases where payment is made after the\npayment application, such as \"bank transfer\" or \"virtual account payment\".\nTherefore, to see the completion of payment, be sure to check the\n{@link paid_at} property.\n\nIn addition, even after payment has been made, there may be cases where it is\nsuddenly cancelled, so please be aware of this as well."
      },
      "IShoppingDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller",
            "title": "Seller who've delivered the goods",
            "description": "Seller who've delivered the goods."
          },
          "journeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryJourney"
            },
            "title": "List of journeys of the delivery",
            "description": "List of journeys of the delivery."
          },
          "pieces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryPiece"
            },
            "minItems": 1,
            "title": "List of pieces of the delivery",
            "description": "List of pieces of the delivery."
          },
          "shippers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryShipper"
            },
            "title": "List of shippers of the delivery",
            "description": "List of shippers of the delivery."
          },
          "state": {
            "oneOf": [
              {
                "const": "none"
              },
              {
                "const": "underway"
              },
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              },
              {
                "const": "arrived"
              }
            ],
            "title": "State of the delivery",
            "description": "State of the delivery."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "seller",
          "journeys",
          "pieces",
          "shippers",
          "state",
          "created_at"
        ],
        "description": "Delivery information.\n\nWhen delivering {@link IShoppingOrderGood goods} to\n{@link IShoppingCustomer customer}, {@link IShoppingSeller seller} can deliver\nmultiple {@link IShoppingSaleUnitStock stocks}, goods at once. Also, it is\npossible to deliver a stock or good in multiple times due to physical restriction\nlike volume or weight problem.\n\nAs you can see from above, the relationship between delivery with\n{@link IShoppingOrder order} (or {@link IShoppingOrderGood good}) is not 1: 1 or\nN: 1, but M: N. Entity `IShoppingDelivery` has been designed to represent such\nrelationship, by referencing target stocks or goods through subsidiary entity\n{@link IShoppingDeliveryPiece}.\n\nAlso, delivery does not end with only one step. It has multiple processes like\nmanufacturing, planning, shipping and delivering. Those steps are represented by\nanother subsidiary entity {@link IShoppingDeliveryJourney}."
      },
      "IShoppingDeliveryJourney": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Deletion time of the record",
            "description": "Deletion time of the record."
          },
          "type": {
            "oneOf": [
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              }
            ],
            "title": "Type of journey",
            "description": "Type of journey.\n\n- preparing\n- manufacturing\n- shipping\n- delivering"
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Title of journey",
            "description": "Title of journey."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description of journey",
            "description": "Description of journey."
          },
          "started_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Start time of the journey",
            "description": "Start time of the journey."
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Completion time of the journey",
            "description": "Completion time of the journey."
          }
        },
        "required": [
          "id",
          "created_at",
          "deleted_at",
          "type",
          "title",
          "description",
          "started_at",
          "completed_at"
        ],
        "description": "Journey of delivery.\n\n`IShoppingDeliveryJourney` is a subsidiary entity of {@link IShoppingDelivery},\ndescribing each journey of the delivery. For reference, the word journey\nmeans each step of the delivery process, such as preparing, shipping, and\ndelivering {@link IShoppingOrderGood goods} to the\n{@link IShoppingCustomer customer}."
      },
      "IShoppingDeliveryPiece": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "publish_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target order's {@link IShoppingOrderPublish.id}",
            "description": "Target order's {@link IShoppingOrderPublish.id}."
          },
          "good_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target good's {@link IShoppingOrderGood.id}",
            "description": "Target good's {@link IShoppingOrderGood.id}."
          },
          "stock_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
            "description": "Target stock's {@link IShoppingSaleUnitStock.id}."
          },
          "quantity": {
            "type": "number",
            "minimum": 0,
            "title": "Quantity of the stock",
            "description": "Quantity of the stock.\n\nIt can be precision value to express splitted shipping."
          }
        },
        "required": [
          "id",
          "publish_id",
          "good_id",
          "stock_id",
          "quantity"
        ],
        "description": "Which stocks are delivered.\n\n`IShoppingDeliveryPiece` is a subsidiary entity of {@link IShoppingDelivery},\ndescribing how much quantity is delivered for each\n{@link IShoppingSaleUnitStock stock} in {@link IShoppingOrder}.\n\nFor reference, as an order can be delivered in multiple times due to volume\nor weight problem, it is possible to have multiple `IShoppingDeliveryPiece`\nrecords for a single stock."
      },
      "IShoppingDeliveryShipper": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "company": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "company",
          "name",
          "mobile"
        ]
      },
      "IShoppingAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile number to contact",
            "description": "Mobile number to contact."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the address",
            "description": "Representative name of the address.\n\nSometimes be receiver's name, and sometimes be place name."
          },
          "country": {
            "type": "string",
            "title": "Country name",
            "description": "Country name."
          },
          "province": {
            "type": "string",
            "title": "Province name",
            "description": "Province name."
          },
          "city": {
            "type": "string",
            "title": "City name",
            "description": "City name."
          },
          "department": {
            "type": "string",
            "title": "Department name",
            "description": "Department name."
          },
          "possession": {
            "type": "string",
            "title": "Detailed address containing street name, building number, and room number",
            "description": "Detailed address containing street name, building number, and room number."
          },
          "zip_code": {
            "type": "string",
            "title": "Zip code, or postal code",
            "description": "Zip code, or postal code."
          },
          "special_note": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Special description if required",
            "description": "Special description if required."
          }
        },
        "required": [
          "id",
          "created_at",
          "mobile",
          "name",
          "country",
          "province",
          "city",
          "department",
          "possession",
          "zip_code",
          "special_note"
        ],
        "description": "The address information."
      },
      "IShoppingOrder.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingOrder.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-order.price"
                },
                {
                  "const": "-order.quantity"
                },
                {
                  "const": "-order.created_at"
                },
                {
                  "const": "-order.publish.paid_at"
                },
                {
                  "const": "+order.price"
                },
                {
                  "const": "+order.quantity"
                },
                {
                  "const": "+order.created_at"
                },
                {
                  "const": "+order.publish.paid_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of orders with pagination and searching/sorting conditions."
      },
      "IShoppingOrder.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "min_price": {
            "type": "number"
          },
          "max_price": {
            "type": "number"
          },
          "paid": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "sale": {
            "$ref": "#/components/schemas/IShoppingSale.IRequest.ISearch"
          }
        }
      },
      "IShoppingSale.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "show_paused": {
            "type": "boolean"
          },
          "show_suspended": {
            "oneOf": [
              {
                "const": "only"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "title_or_content": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingPrice.ISearch"
          },
          "review": {
            "$ref": "#/components/schemas/IShoppingSaleReview.IInvertSearch"
          },
          "section_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel_category_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller.IRequest.ISearch"
          }
        }
      },
      "IShoppingPrice.ISearch": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          }
        }
      },
      "IShoppingSaleReview.IInvertSearch": {
        "type": "object",
        "properties": {
          "score": {
            "$ref": "#/components/schemas/IShoppingSaleReview.IInvertSearch.IScoreRange"
          },
          "count": {
            "$ref": "#/components/schemas/IShoppingSaleReview.IInvertSearch.ICountRange"
          }
        }
      },
      "IShoppingSaleReview.IInvertSearch.IScoreRange": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "maximum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "IShoppingSaleReview.IInvertSearch.ICountRange": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "integer"
          },
          "maximum": {
            "type": "integer"
          }
        }
      },
      "IShoppingSeller.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "nickname": {
            "type": "string"
          }
        }
      },
      "IPageIShoppingSale.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSale.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSale.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingSale.IRequest.ISearch",
            "title": "Search conditions",
            "description": "Search conditions."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.publish_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments.real"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.updated_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.content.title"
                },
                {
                  "const": "-sale.price_range.lowest.real"
                },
                {
                  "const": "-sale.price_range.highest.real"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.publish_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments.real"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.updated_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.content.title"
                },
                {
                  "const": "+sale.price_range.lowest.real"
                },
                {
                  "const": "+sale.price_range.highest.real"
                }
              ]
            },
            "title": "Sorting conditions",
            "description": "Sorting conditions."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of summarized sales with pagination and searching/sorting options."
      },
      "IShoppingSale": {
        "type": "object",
        "properties": {
          "section": {
            "$ref": "#/components/schemas/IShoppingSection",
            "title": "Belonged section",
            "description": "Belonged section."
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller.IInvert",
            "title": "Seller who has registered the sale",
            "description": "Seller who has registered the sale."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Sale",
            "description": "Primary Key of Sale."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Snapshot",
            "description": "Primary Key of Snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether the snapshot is the latest one or not",
            "description": "Whether the snapshot is the latest one or not."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent",
            "title": "Description and image content describing the sale",
            "description": "Description and image content describing the sale."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel"
            },
            "minItems": 1,
            "title": "List of channels and categories",
            "description": "List of channels and categories.\n\nWhich channels and categories the sale is registered to."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit"
            },
            "minItems": 1,
            "title": "List of units",
            "description": "List of units.\n\nRecords about individual product composition informations that are sold\nin the sale. Each {@link IShoppingSaleUnit unit} record has configurable\n{@link IShoppingSaleUnitOption options},\n{@link IShoppingSaleUnitOptionCandidate candidate} values for each\noption, and {@link IShoppingSaleUnitStock final stocks} determined by\nselecting every candidate values of each option."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record.\n\nNote that, this property is different with {@link opened_at},\nwhich means the timepoint of the sale is opened."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last updated time of the record",
            "description": "Last updated time of the record.\n\nIn another words, creation time of the last snapshot."
          },
          "paused_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Paused time of the sale",
            "description": "Paused time of the sale.\n\nThe sale is paused by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} can still see the sale on the\nboth list and detail pages, but the sale has a warning label\n\"The sale is paused by the seller\"."
          },
          "suspended_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Suspended time of the sale",
            "description": "Suspended time of the sale.\n\nThe sale is suspended by the seller, for some reason.\n\n{@link IShoppingCustomer Customers} cannot see the sale on the\nboth list and detail pages. It is almost same with soft delettion,\nbut there's a little bit difference that the owner\n{@link IShoppingSeller seller} can still see the sale and resume it.\n\nOf course, the {@link IShoppingCustomer customers} who have\nalready purchased the sale can still see the sale on the\n{@link IShoppingOrder order} page."
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the sale",
            "description": "Opening time of the sale."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the sale",
            "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever."
          }
        },
        "required": [
          "section",
          "seller",
          "id",
          "snapshot_id",
          "latest",
          "content",
          "channels",
          "tags",
          "units",
          "created_at",
          "updated_at",
          "paused_at",
          "suspended_at",
          "opened_at",
          "closed_at"
        ],
        "description": "Seller sales products.\n\n`IShoppingSale` is an entity that embodies \"product sales\" (sales)\ninformation registered by the {@link ISoppingSeller seller}. And the main\ninformation of the sale is recorded in the sub {@link IShoppingSaleSnapshot},\nnot in the main `IShoppingSale`. When a seller changes a previously registered\nitem, the existing `IShoppingSale` record is not changed, but a new\n{@link IShoppingSaleSnapshot snapshot} record be created.\n\nThis is to preserve the {@link IShoppingCustomer customer}'s\n{@link IShoppingOrder purchase history} flawlessly after the customer\npurchases a specific item, even if the seller changes the components or\nprice of the item. It is also intended to support sellers in so-called A/B\ntesting, which involves changing components or prices and measuring the\nperformance in each case."
      },
      "IShoppingSaleContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the content",
            "description": "Title of the content."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of the body content",
            "description": "Format of the body content.\n\nSame meaning with file extension like `html`, `md`, and `txt`."
          },
          "body": {
            "type": "string",
            "title": "The main body content",
            "description": "The main body content."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "List of attached files",
            "description": "List of attached files."
          },
          "thumbnails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile"
            },
            "title": "List of thumbnails",
            "description": "List of thumbnails."
          }
        },
        "required": [
          "id",
          "title",
          "format",
          "body",
          "files",
          "thumbnails"
        ],
        "description": "Content information of sale snapshot.\n\n`IShoppingSaleContent` is an entity embodies the description contents\nof {@link IShoppingSale}."
      },
      "IShoppingSaleUnit": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingSaleUnitSelectableOption"
                },
                {
                  "$ref": "#/components/schemas/IShoppingSaleUnitDescriptiveOption"
                }
              ]
            },
            "title": "List of options",
            "description": "List of options."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStock"
            },
            "minItems": 1,
            "title": "List of final stocks",
            "description": "List of final stocks."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the unit",
            "description": "Representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether the unit is primary or not",
            "description": "Whether the unit is primary or not.\n\nJust a labeling value."
          },
          "required": {
            "type": "boolean",
            "title": "Whether the unit is required or not",
            "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case."
          }
        },
        "required": [
          "options",
          "stocks",
          "id",
          "name",
          "primary",
          "required"
        ],
        "description": "Product composition information handled in the sale.\n\n`IShoppingSaleUnit` is an entity that embodies the \"individual product\"\ninformation handled in the {@link IShoppingSale sale}.\n\nFor reference, the reason why `IShoppingSaleUnit` is separated from\n{@link IShoppingSaleSnapshot} by an algebraic relationship of 1: N is because\nthere are some cases where multiple products are sold in one listing. This is\nthe case with so-called \"bundled products\".\n\n- Bundle from regular product (Mackbook Set)\n  - Main Body\n  - Keyboard\n  - Mouse\n  - Apple Care (Free A/S Voucher)\n\nAnd again, `IShoppingSaleUnit` does not in itself refer to the\n{@link IShoppingSaleUnitStock final stock} that the\n{@link IShoppingCustomer customer} will {@link IShoppingOrder purchase}.\nThe final stock can be found only after selecting all given\n{@link IShoppingSaleUnitOption options} and their\n{@link IShoppingSaleUnitOptionCandidate candidate values}.\n\nFor example, even if you buy a Macbook, the final stocks are determined only\nafter selecting all the options (CPU / RAM / SSD), etc."
      },
      "IShoppingSaleUnitSelectableOption": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitOptionCandidate"
            },
            "minItems": 1,
            "title": "List of candidate values",
            "description": "List of candidate values."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "type": {
            "const": "select",
            "title": "Discriminant for the type of selectable option",
            "description": "Discriminant for the type of selectable option."
          },
          "name": {
            "type": "string",
            "title": "Represents the name of the option",
            "description": "Represents the name of the option."
          },
          "variable": {
            "type": "boolean",
            "title": "Whether the option is variable or not",
            "description": "Whether the option is variable or not.\n\nWhen type of current option is \"select\", this attribute means whether\nselecting different candidate value affects the final stock or not."
          }
        },
        "required": [
          "candidates",
          "id",
          "type",
          "name",
          "variable"
        ],
        "description": "Individual option information on units for sale.\n\n`IShoppingSaleUnitSelectableOption` is a subsidiary entity of\n{@link IShoppingSaleUnit} that represents individual products in the\n{@link IShoppingSale sale}, and is an entity designed to represent individual\nselectable option information for the unit.\n\n- Examples of Options\n  - selectable options\n    - Computer: CPU, RAM, SSD, etc.\n    - Clothes: size, color, style, etc.\n  - descriptive options\n    - Engrave\n    - Simple question\n\nIf the {@link variable} property value is `true`, the final stock that the\n{@link IShoppingCustomer customer} will purchase changes depending on the\nselection of the {@link IShoppingSaleUnitOptionCandidate candidate value}.\n\nConversely, if it is a type other than \"select\", or if the {@link variable}\nproperty value is \"false\", , this is an option that has no meaning beyond\nsimple information transfer. Therefore, no matter what value the customer\nchooses when purchasing it, the option in this case does not affect the\n{@link IShoppingSaleUnitStock final stock}."
      },
      "IShoppingSaleUnitStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingPrice",
            "title": "Price of the stock",
            "description": "Price of the stock."
          },
          "inventory": {
            "$ref": "#/components/schemas/IShoppingSaleUnitStockInventory",
            "title": "Current inventory status of the stock",
            "description": "Current inventory status of the stock."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStockChoice"
            },
            "title": "List of choices",
            "description": "List of choices.\n\nWhich candidate values being chosen for each option."
          }
        },
        "required": [
          "id",
          "name",
          "price",
          "inventory",
          "choices"
        ],
        "description": "Final component information on units for sale.\n\n`IShoppingSaleUnitStock` is a subsidiary entity of {@link IShoppingSaleUnit}\nthat represents a product catalog for sale, and is a kind of final stock that is\nconstructed by selecting all {@link IShoppingSaleUnitSelectableOption options}\n(variable \"select\" type) and their\n{@link IShoppingSaleUnitOptionCandidate candidate} values in the belonging unit.\nIt is the \"good\" itself that customers actually purchase.\n\n- Product Name) MacBook\n  - Options\n    - CPU: { i3, i5, i7, i9 }\n    - RAM: { 8GB, 16GB, 32GB, 64GB, 96GB }\n    - SSD: { 256GB, 512GB, 1TB }\n  - Number of final stocks: 4 * 5 * 3 = 60\n\nFor reference, the total number of `IShoppingSaleUnitStock` records in an\nattribution unit can be obtained using Cartesian Product. In other words, the\nvalue obtained by multiplying all the candidate values that each\n(variable \"select\" type) option can have by the number of cases is the total\nnumber of final stocks in the unit.\n\nOf course, without a single variable \"select\" type option, the final stocks\ncount in the unit is only 1."
      },
      "IShoppingSaleUnitStockChoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "option_id": {
            "type": "string",
            "format": "uuid",
            "description": "Target option's {@link IShoppingSaleUnitOption.id}"
          },
          "candidate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Target candidate's {@link IShoppingSaleUnitOptionCandidate.id}"
          }
        },
        "required": [
          "id",
          "option_id",
          "candidate_id"
        ],
        "description": "Selection information of final stock.\n\n`IShoppingSaleUnitStockChoice` is an entity that represents which\n{@link IShoppingSaleUnitSelectableOption option} of each variable \"select\"\ntype was selected for each {@link IShoppingSaleUnitStock stock} and which\n{@link IShoppingSaleUnitOptionCandidate candidate value} was selected within\nit.\n\nOf course, if the bound {@link IShoppingSaleUnit unit} does not have any\noptions, this entity can also be ignored."
      },
      "IPageIShoppingSaleInquiryComment": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleInquiryComment"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleInquiryComment": {
        "type": "object",
        "properties": {
          "writer": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IShoppingAdministrator.IInvert"
              },
              {
                "$ref": "#/components/schemas/IShoppingCustomer"
              },
              {
                "$ref": "#/components/schemas/IShoppingSeller.IInvert"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "administrator": "#/components/schemas/IShoppingAdministrator.IInvert",
                "customer": "#/components/schemas/IShoppingCustomer",
                "seller": "#/components/schemas/IShoppingSeller.IInvert"
              }
            },
            "title": "Writer of the comment",
            "description": "Writer of the comment.\n\nBoth customer and seller can write comment on the sale inquiry.\n\nBy the way, no restriction on the customer, but seller must be the\nperson who've registered the sale."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent comment's ID",
            "description": "Parent comment's ID."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticleComment.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when a comment being created, and is\naccumulated every time the comment is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of comment",
            "description": "Creation time of comment."
          }
        },
        "required": [
          "writer",
          "id",
          "parent_id",
          "snapshots",
          "created_at"
        ],
        "description": "A comment written on an inquiry article.\n\n`IShoppingSaleInquiryComment` is a subtype entity of {@link IBbsArticleComment},\nand is used when you want to communicate with multiple people about an\n{@link IShoppingSaleInquiry inquiry} written by a\n{@link IShoppingCustomer customer}.\n\nFor reference, only related parties can write comments for\n{@link IShoppingSeller sellers}, but there is no limit to\n{@link IShoppingCustomer customers}. In other words, anyone customer can\nfreely write a comment, even if they are not the person who wrote the inquiry."
      },
      "IBbsArticleComment.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or comment."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "body",
          "files"
        ],
        "description": "Snapshot of comment.\n\n`IBbsArticleComment.ISnapshot` is a snapshot entity that contains\nthe contents of the comment.\n\nAs mentioned in {@link IBbsArticleComment}, designed to keep evidence\nand prevent fraud."
      },
      "IAttachmentFile.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "File name, except extension",
            "description": "File name, except extension.\n\nIf there's file `.gitignore`, then its name is an empty string."
          },
          "extension": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "minLength": 1,
                "maxLength": 8
              }
            ],
            "title": "Extension",
            "description": "Extension.\n\nPossible to omit like `README` case."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "title": "URL path of the real file",
            "description": "URL path of the real file."
          }
        },
        "required": [
          "name",
          "extension",
          "url"
        ]
      },
      "IShoppingSaleInquiryComment.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingSaleInquiryComment.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of the comments with pagination and searching/sorting options."
      },
      "IShoppingSaleInquiryComment.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "IShoppingSaleInquiryComment.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "body",
          "files"
        ],
        "description": "Creation information of the comment."
      },
      "IShoppingSaleInquiryComment.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or comment."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of comment",
            "description": "Content body of comment."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "body",
          "files"
        ],
        "description": "Snapshot content of the comment."
      },
      "IPageIShoppingSaleQuestion.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleQuestion.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleQuestion.ISummary": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean",
            "title": "Whether the question article is secret or not",
            "description": "Whether the question article is secret or not.\n\nIf secret article, only the writer customer and related seller can see\nthe detailed content."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.ISummary"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "secret",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summarized information of the question."
      },
      "IShoppingSaleInquiryAnswer.ISummary": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "IShoppingSaleQuestion.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingSaleInquiry.IRequest.ISearch",
            "title": "Search conditions",
            "description": "Search conditions."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-nickname"
                },
                {
                  "const": "-answered_at"
                },
                {
                  "const": "-created_at"
                },
                {
                  "const": "-updated_at"
                },
                {
                  "const": "-title"
                },
                {
                  "const": "+nickname"
                },
                {
                  "const": "+answered_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "+updated_at"
                },
                {
                  "const": "+title"
                }
              ]
            },
            "title": "Sorting conditions",
            "description": "Sorting conditions."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of summarized informations with pagination searching/sorting options."
      },
      "IShoppingSaleInquiry.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "answered": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IPageIShoppingSaleQuestion.IAbridge": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleQuestion.IAbridge"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleQuestion.IAbridge": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean",
            "title": "Whether the question article is secret or not",
            "description": "Whether the question article is secret or not.\n\nIf secret article, only the writer customer and related seller can see\nthe detailed content."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.IAbridge"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "secret",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at",
          "format",
          "body",
          "files"
        ],
        "description": "Abridged information of the question."
      },
      "IShoppingSaleInquiryAnswer.IAbridge": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "seller",
          "id",
          "title",
          "created_at",
          "updated_at",
          "format",
          "body",
          "files"
        ]
      },
      "IShoppingSaleQuestion": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean",
            "title": "Whether the question article is secret or not",
            "description": "Whether the question article is secret or not.\n\nIf secret article, only the writer customer and related seller can see\nthe detailed content."
          },
          "type": {
            "const": "question",
            "title": "Type of the derived inquiry",
            "description": "Type of the derived inquiry.\n\n- `question`: {@link IShoppingSaleQuestion}\n- `review`: {@link IShoppingSaleReview}"
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "secret",
          "type",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Question about sale snapshot.\n\n`IShoppingSaleQuestion` is a subtype entity of {@link IShoppingSaleInquiry},\nand is used when a {@link IShoppingCustomer customer} wants to ask something\nabout a {@link IShoppingSale sale} ({@link IShoppingSaleSnapshot snapshot} at\nthe time) registered by the {@link IShoppingSeller seller}.\n\nAnd, like most shopping malls, `IShoppingSaleQuestion` also provides\na {@link secret} attribute, allowing you to create a \"secret message\" that can\nonly be viewed by the seller and the customer who wrote the question."
      },
      "IShoppingSaleInquiryAnswer": {
        "type": "object",
        "properties": {
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller",
            "title": "Seller who've written the answer",
            "description": "Seller who've written the answer."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBbsArticle.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "seller",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Answers to questions about sale snapshots.\n\n`IShoppingSaleInquiryAnswer` is an entity that embodies the official\nanswer written by the {@link IShoppingSeller seller} to the\n{@link IShoppingSaleInquiry inquiry} written by the\n{@link IShoppingCustomer customer}.\n\nOf course, in addition to writing an official response like this, it is\nalso possible for the seller to communicate with the inqjuiry written\ncustomer and multiple customers through\n{@link IShoppingSaleInquiryComment comments} in the attribution inquiry.\n\nFor refererence, it is not possible to write comments on this answer.\nEncourage people to write comments on the inquiry article. This is to\nprevent comments from being scattered in both inquiry and answer\narticles."
      },
      "IBbsArticle.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Snapshot of article.\n\n`IBbsArticle.ISnapshot` is a snapshot entity that contains the contents of\nthe article, as mentioned in {@link IBbsArticle}, the contents of the article\nare separated from the article record to keep evidence and prevent fraud."
      },
      "IPageIShoppingSaleReview.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleReview.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleReview.ISummary": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "title": "Score of the review",
            "description": "Score of the review."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.ISummary"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          }
        },
        "required": [
          "score",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at"
        ],
        "description": "Summarized information of the review."
      },
      "IShoppingSaleReview.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingSaleReview.IRequest.ISearch",
            "title": "Search conditions",
            "description": "Search conditions."
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-nickname"
                },
                {
                  "const": "-answered_at"
                },
                {
                  "const": "-created_at"
                },
                {
                  "const": "-updated_at"
                },
                {
                  "const": "-title"
                },
                {
                  "const": "-score"
                },
                {
                  "const": "+nickname"
                },
                {
                  "const": "+answered_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "+updated_at"
                },
                {
                  "const": "+title"
                },
                {
                  "const": "+score"
                }
              ]
            },
            "title": "Sorting conditions",
            "description": "Sorting conditions."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of summarized informations with pagination searching/sorting options."
      },
      "IShoppingSaleReview.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "answered": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "title_or_body": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "maximum": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "IPageIShoppingSaleReview.IAbridge": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleReview.IAbridge"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleReview.IAbridge": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Score of the review",
            "description": "Score of the review."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer.IAbridge"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "title": {
            "type": "string",
            "title": "Title of the last snapshot",
            "description": "Title of the last snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the article",
            "description": "Creation time of the article."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modification time of the article",
            "description": "Modification time of the article.\n\nIn other words, the time when the last snapshot was created."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "score",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "title",
          "created_at",
          "updated_at",
          "format",
          "body",
          "files"
        ],
        "description": "Abridged information of the review."
      },
      "IShoppingSaleReview": {
        "type": "object",
        "properties": {
          "type": {
            "const": "review",
            "title": "Type of the derived inquiry",
            "description": "Type of the derived inquiry.\n\n- `question`: {@link IShoppingSaleQuestion}\n- `review`: {@link IShoppingSaleReview}"
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who wrote the inquiry",
            "description": "Customer who wrote the inquiry."
          },
          "answer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingSaleInquiryAnswer"
              }
            ],
            "title": "Formal answer for the inquiry by the seller",
            "description": "Formal answer for the inquiry by the seller."
          },
          "read_by_seller": {
            "type": "boolean",
            "title": "Whether the seller has viewed the inquiry or not",
            "description": "Whether the seller has viewed the inquiry or not."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleReview.ISnapshot"
            },
            "minItems": 1,
            "title": "List of snapshot contents",
            "description": "List of snapshot contents.\n\nIt is created for the first time when an article is created, and is\naccumulated every time the article is modified."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of article",
            "description": "Creation time of article."
          }
        },
        "required": [
          "type",
          "customer",
          "answer",
          "read_by_seller",
          "id",
          "snapshots",
          "created_at"
        ],
        "description": "Reviews for sale snapshots.\n\n`IShoppingSaleReview` is a subtype entity of {@link IShoppingSaleInquiry},\nand is used when a {@link IShoppingCustomer customer} purchases a\n{@link IShoppingSale sale} ({@link IShoppingSaleSnapshot snapshot} at the time)\nregistered by the {@link IShoppingSeller seller} as a product and leaves a\nreview and rating for it.\n\nFor reference, `IShoppingSaleReview` and\n{@link IShoppingOrderGod shopping_order_goods} have a logarithmic relationship\nof N: 1, but this does not mean that customers can continue to write reviews\nfor the same product indefinitely. Wouldn't there be restrictions, such as\nif you write a review once, you can write an additional review a month later?"
      },
      "IShoppingSaleReview.ISnapshot": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Score of the review",
            "description": "Score of the review."
          },
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "score",
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Snapshot content of the review article."
      },
      "IPageIShoppingSaleSnapshot.ISummary": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleSnapshot.ISummary"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleSnapshot.ISummary": {
        "type": "object",
        "properties": {
          "price_range": {
            "$ref": "#/components/schemas/IShoppingSalePriceRange",
            "title": "Price range of the unit",
            "description": "Price range of the unit."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Sale",
            "description": "Primary Key of Sale."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Snapshot",
            "description": "Primary Key of Snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether the snapshot is the latest one or not",
            "description": "Whether the snapshot is the latest one or not."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent.IInvert",
            "title": "Description and image content describing the sale",
            "description": "Description and image content describing the sale."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel"
            },
            "minItems": 1,
            "title": "List of channels and categories",
            "description": "List of channels and categories.\n\nWhich channels and categories the sale is registered to."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit.ISummary"
            },
            "minItems": 1,
            "title": "List of units",
            "description": "List of units.\n\nRecords about individual product composition informations that are sold\nin the sale. Each {@link IShoppingSaleUnit unit} record has configurable\n{@link IShoppingSaleUnitOption options},\n{@link IShoppingSaleUnitOptionCandidate candidate} values for each\noption, and {@link IShoppingSaleUnitStock final stocks} determined by\nselecting every candidate values of each option."
          }
        },
        "required": [
          "price_range",
          "id",
          "snapshot_id",
          "latest",
          "content",
          "channels",
          "tags",
          "units"
        ],
        "description": "Summarized information of the sale snapshot."
      },
      "IPage.IRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Page request data"
      },
      "IShoppingSaleSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Sale",
            "description": "Primary Key of Sale."
          },
          "snapshot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key of Snapshot",
            "description": "Primary Key of Snapshot."
          },
          "latest": {
            "type": "boolean",
            "title": "Whether the snapshot is the latest one or not",
            "description": "Whether the snapshot is the latest one or not."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent",
            "title": "Description and image content describing the sale",
            "description": "Description and image content describing the sale."
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel"
            },
            "minItems": 1,
            "title": "List of channels and categories",
            "description": "List of channels and categories.\n\nWhich channels and categories the sale is registered to."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of search tags",
            "description": "List of search tags."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit"
            },
            "minItems": 1,
            "title": "List of units",
            "description": "List of units.\n\nRecords about individual product composition informations that are sold\nin the sale. Each {@link IShoppingSaleUnit unit} record has configurable\n{@link IShoppingSaleUnitOption options},\n{@link IShoppingSaleUnitOptionCandidate candidate} values for each\noption, and {@link IShoppingSaleUnitStock final stocks} determined by\nselecting every candidate values of each option."
          }
        },
        "required": [
          "id",
          "snapshot_id",
          "latest",
          "content",
          "channels",
          "tags",
          "units"
        ],
        "description": "Snapshot record of sale.\n\n`IShoppingSaleSnapshot` is an entity that embodies a snapshot of a sale,\nand the ERD (Entity Relationship Diagram) describes the role of the\n`shopping_sale_snapshots` table as follows:\n\n> {@link IShoppingSale shopping_sales} is an entity that embodies\n> \"product sales\" (sales) information registered by the\n> {@link IShoppingSeller seller}. And the main information of the sale is\n> recorded in the sub `shopping_sale_snapshots`, not in the main\n> {@link IShoppingSale shopping_sales}. When a seller changes a previously\n> registered item, the existing {@link IShoppingSale shopping_sales} record\n> is not changed, but a new snapshot record is created.\n>\n> This is to preserve the {@link IShoppingCustomer customer}'s\n> {@link IShoppingOrder purchase history} flawlessly after the customer\n> purchases a specific item, even if the seller changes the components or price\n> of the item. It is also intended to support sellers in so-called A/B testing,\n> which involves changing components or prices and measuring the performance\n> in each case.\n\nBy the way, DTO (Data Transfer Object) level used by the front-end developer,\nit does not distinguish {@link IShoppingSale} and `IShoppingSaleSnapshot`\nstrictly, and generally handles {@link IShoppingSale} and snapshot together.\n\nBut even though the DTO level does not strictly distinguish them, the word and\nconcept of \"snapshot\" is still important, so it is recommended to understand\nthe concept of \"snapshot\" properly."
      },
      "IShoppingChannelCategory": {
        "type": "object",
        "properties": {
          "parent": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingChannelCategory.IInvert"
              }
            ],
            "title": "Parent category info",
            "description": "Parent category info."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
            },
            "title": "List of children categories with hierarchical structure",
            "description": "List of children categories with hierarchical structure."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent category's ID",
            "description": "Parent category's ID."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the category",
            "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          }
        },
        "required": [
          "parent",
          "children",
          "id",
          "parent_id",
          "name",
          "created_at"
        ],
        "description": "Category of channel.\n\n`IShoppingChannelCategory` is a concept that refers to classification\ncategories within a specific {@link IShoppingChannel channel}, and is exactly\nthe same as the concept commonly referred to as \"category\" in shopping malls.\n\nAnd `IShoppingChannelCategory` is different with {@link IShoppingSection}.\n{@link IShoppingSection} refers to a \"corner\" that is independent spatial\ninformation in the offline market, which cannot simultaneously classified in\na {@link IShoppingSale sale}. Besides, `IShoppingChannelCategory` can be\nclassified into multiple categories in a sale simultaneously.\n\nProduct\t| Section (corner) | Categories\n---------|------------------|-----------------------------------\nBeef\t    | Butcher corner   | Frozen food, Meat, Favorite food\nGrape    | Fruit corner     | Fresh food, Favorite food\n\nIn addition, as `IShoppingChannelCategory` has 1:N self recursive relationship,\nit is possible to express below hierarchical structures. Thus, each channel\ncan set their own category classification as they want.\n\n- Food > Meat > Frozen\n- Electronics > Notebook > 15 inches\n- Miscellaneous > Wallet\n\nFurthermore, `IShoppingChannelCategory` is designed to merge between themselves,\nso there is no burden to edit the category at any time."
      },
      "IShoppingChannelCategory.IHierarchical": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
            },
            "title": "List of children categories with hierarchical structure",
            "description": "List of children categories with hierarchical structure."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent category's ID",
            "description": "Parent category's ID."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the category",
            "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          }
        },
        "required": [
          "children",
          "id",
          "parent_id",
          "name",
          "created_at"
        ],
        "description": "Hierarchical category information with children categories."
      },
      "IShoppingChannelCategory.ICreate": {
        "type": "object",
        "properties": {
          "parent_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Parent category's ID",
            "description": "Parent category's ID."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the category",
            "description": "Representative name of the category.\n\nThe name must be unique within the parent category. If no parent exists,\nthen the name must be unique within the channel between no parent\ncategories."
          }
        },
        "required": [
          "parent_id",
          "name"
        ],
        "description": "Creation information of the category."
      },
      "IRecordMerge": {
        "type": "object",
        "properties": {
          "keep": {
            "type": "string",
            "format": "uuid",
            "title": "Target record to keep after merging",
            "description": "Target record to keep after merging.\n\nAfter merge process, {@link absorbed} records would be merged into\nthis {@link keep} record."
          },
          "absorbed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "To be absorbed to {@link keep} after merging",
            "description": "To be absorbed to {@link keep} after merging."
          }
        },
        "required": [
          "keep",
          "absorbed"
        ],
        "description": "Record Merge DTO.\n\n`IRecordMerge` is a structure for merging records.\n\nThe `merge` means that merging multiple {@link IRecordMerge.absorbed}\nrecords into {@link IRecordMerge.keep} instead of deleting\n{@link IRecordMerge.absorbed} records.\n\nIf there're some dependent tables of the target `table` having\nunique constraint on foriegn key column, such dependent tables\nalso perform the merge process, too.\n\nOf course, if there're another dependent tables under those\ndependents, they also perform the merge process recursively as well.\nSuch recursive merge process still works for self-recursive\n(tree-structured) tables."
      },
      "IShoppingChannel.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Name of the channel",
            "description": "Name of the channel."
          }
        },
        "required": [
          "code",
          "name"
        ],
        "description": "Creation information of the channel."
      },
      "IShoppingChannel.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name of the channel",
            "description": "Name of the channel."
          }
        },
        "required": [
          "name"
        ],
        "description": "Updating information of the channel."
      },
      "IPageIShoppingChannel": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannel"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingChannel.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingChannel.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-channel.code"
                },
                {
                  "const": "-channel.name"
                },
                {
                  "const": "-channel.created_at"
                },
                {
                  "const": "+channel.code"
                },
                {
                  "const": "+channel.name"
                },
                {
                  "const": "+channel.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of the channels with pagination and searching/sorting options."
      },
      "IShoppingChannel.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IPageIShoppingChannel.IHierarchical": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannel.IHierarchical"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingChannel.IHierarchical": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingChannelCategory.IHierarchical"
            },
            "title": "Children categories with hierarchical structure",
            "description": "Children categories with hierarchical structure."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of record",
            "description": "Creation time of record."
          },
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Name of the channel",
            "description": "Name of the channel."
          }
        },
        "required": [
          "categories",
          "id",
          "created_at",
          "code",
          "name"
        ],
        "description": "Hierarchical channel information with children categories."
      },
      "IShoppingSection.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Identifier code",
            "description": "Identifier code."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the section",
            "description": "Representative name of the section."
          }
        },
        "required": [
          "code",
          "name"
        ],
        "description": "Creation information of the section."
      },
      "IShoppingSection.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Representative name of the section",
            "description": "Representative name of the section."
          }
        },
        "required": [
          "name"
        ],
        "description": "Updating information of the section."
      },
      "IPageIShoppingSection": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSection"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSection.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingSection.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-section.code"
                },
                {
                  "const": "-section.name"
                },
                {
                  "const": "-section.created_at"
                },
                {
                  "const": "+section.code"
                },
                {
                  "const": "+section.name"
                },
                {
                  "const": "+section.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request of the sections with pagination and searching/sorting options."
      },
      "IShoppingSection.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IShoppingCustomer.IAuthorized": {
        "type": "object",
        "properties": {
          "setHeaders": {
            "type": "object",
            "properties": {
              "Authorization": {
                "type": "string"
              }
            },
            "required": [
              "Authorization"
            ]
          },
          "token": {
            "$ref": "#/components/schemas/IShoppingCustomer.IToken"
          },
          "type": {
            "const": "customer",
            "title": "Discriminant for the type of customer",
            "description": "Discriminant for the type of customer."
          },
          "member": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingMember"
              }
            ],
            "title": "Membership information",
            "description": "Membership information.\n\nIf the customer has joined as a member."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen"
              }
            ],
            "title": "Citizen information",
            "description": "Citizen information.\n\nIf the customer has verified his real name and mobile number."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "channel": {
            "$ref": "#/components/schemas/IShoppingChannel",
            "title": "Belonged channel",
            "description": "Belonged channel."
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingExternalUser"
              }
            ],
            "title": "External user information",
            "description": "External user information.\n\nWhen the customer has come frome an external service."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "title": "Connection address",
            "description": "Connection address.\n\nSame with {@link window.location.href} of client."
          },
          "referrer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ],
            "title": "Referrer address",
            "description": "Referrer address.\n\nSame with {@link window.document.referrer} of client."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ],
            "title": "Connection IP Address",
            "description": "Connection IP Address."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the connection record",
            "description": "Creation time of the connection record."
          }
        },
        "required": [
          "setHeaders",
          "token",
          "type",
          "member",
          "citizen",
          "id",
          "channel",
          "external_user",
          "href",
          "referrer",
          "ip",
          "created_at"
        ]
      },
      "IShoppingCustomer.IToken": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string"
          },
          "refresh": {
            "type": "string"
          },
          "expired_at": {
            "type": "string",
            "format": "date-time"
          },
          "refreshable_until": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "access",
          "refresh",
          "expired_at",
          "refreshable_until"
        ]
      },
      "IShoppingCustomer.IRefresh": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "IShoppingCustomer.ICreate": {
        "type": "object",
        "properties": {
          "channel_code": {
            "type": "string"
          },
          "external_user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingExternalUser.ICreate"
              }
            ]
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "referrer": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uri"
              }
            ]
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              },
              {
                "type": "string",
                "format": "ipv6"
              }
            ]
          }
        },
        "required": [
          "channel_code",
          "external_user",
          "href",
          "referrer"
        ]
      },
      "IShoppingExternalUser.ICreate": {
        "type": "object",
        "properties": {
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen.ICreate"
              }
            ],
            "title": "Citizen activation info",
            "description": "Citizen activation info."
          },
          "application": {
            "type": "string",
            "title": "Identifier code of the external service",
            "description": "Identifier code of the external service.\n\nIt can be same with {@link IShoppingChannel.code} in common."
          },
          "uid": {
            "type": "string",
            "title": "Identifier key of external user from the external system",
            "description": "Identifier key of external user from the external system."
          },
          "nickname": {
            "type": "string",
            "title": "Nickname of external user in the external system",
            "description": "Nickname of external user in the external system."
          },
          "password": {
            "type": "string",
            "title": "Password of external user from the external system",
            "description": "Password of external user from the external system.\n\nThis is a password issued to the user by an external service,\nand is by no means the actual user password. However, for\n{@link IShoppingCustomer customers} who entered the same\napplication and code as the current external system user, this is\nto determine whether to view this as a correct external system\nuser or a violation."
          },
          "data": {
            "description": "Additional information about external user from the external\nsystem."
          }
        },
        "required": [
          "citizen",
          "application",
          "uid",
          "nickname",
          "password",
          "data"
        ],
        "description": "Creation information of external user."
      },
      "IShoppingCitizen.ICreate": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile number",
            "description": "Mobile number."
          },
          "name": {
            "type": "string",
            "title": "Real name, or equivalent nickname",
            "description": "Real name, or equivalent nickname."
          }
        },
        "required": [
          "mobile",
          "name"
        ],
        "description": "Creation information of citizen verification."
      },
      "IShoppingMember.IJoin": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "title": "Nickname that uniquely identifies the member",
            "description": "Nickname that uniquely identifies the member."
          },
          "citizen": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingCitizen.ICreate"
              }
            ],
            "title": "Citizen information",
            "description": "Citizen information."
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address of member",
            "description": "Email address of member.\n\nIf the member has multiple email addresses, just use one of them."
          },
          "password": {
            "type": "string",
            "title": "Password of the member account",
            "description": "Password of the member account."
          }
        },
        "required": [
          "nickname",
          "citizen",
          "email",
          "password"
        ],
        "description": "Joining request info."
      },
      "IShoppingMember.IPasswordChange": {
        "type": "object",
        "properties": {
          "oldbie": {
            "type": "string",
            "title": "Current password",
            "description": "Current password."
          },
          "newbie": {
            "type": "string",
            "title": "The new password to change",
            "description": "The new password to change."
          }
        },
        "required": [
          "oldbie",
          "newbie"
        ],
        "description": "Request info of password change."
      },
      "IPageIShoppingCouponTicket": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponTicket"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingCouponTicket.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-ticket.created_at"
                },
                {
                  "const": "-ticket.expired_at"
                },
                {
                  "const": "+ticket.created_at"
                },
                {
                  "const": "+ticket.expired_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingCouponTicket.ICreate": {
        "type": "object",
        "properties": {
          "coupon_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "coupon_id"
        ]
      },
      "IPageIShoppingDepositCharge": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDepositCharge"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingDepositCharge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer"
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingDepositChargePublish"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "customer",
          "publish",
          "created_at",
          "value"
        ]
      },
      "IShoppingDepositChargePublish": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "paid_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        },
        "required": [
          "id",
          "created_at",
          "paid_at",
          "cancelled_at"
        ]
      },
      "IShoppingDepositCharge.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingDepositCharge.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                },
                {
                  "const": "-value"
                },
                {
                  "const": "-publish.created_at"
                },
                {
                  "const": "-publish.paid_at"
                },
                {
                  "const": "+value"
                },
                {
                  "const": "+publish.created_at"
                },
                {
                  "const": "+publish.paid_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingDepositCharge.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number"
          },
          "maximum": {
            "type": "number"
          },
          "state": {
            "oneOf": [
              {
                "const": "published"
              },
              {
                "const": "pending"
              },
              {
                "const": "payed"
              },
              {
                "const": "cancelled"
              }
            ]
          },
          "publish": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "date-time"
              },
              "to": {
                "type": "string",
                "format": "date-time"
              },
              "payment": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "to": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "required": [
          "state"
        ]
      },
      "IShoppingDepositCharge.ICreate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          }
        },
        "required": [
          "value"
        ]
      },
      "IShoppingDepositChargePublish.ICreate": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "required": [
          "vendor",
          "uid"
        ]
      },
      "IPageIShoppingDepositHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDepositHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingDepositHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen"
          },
          "deposit": {
            "$ref": "#/components/schemas/IShoppingDeposit"
          },
          "source_id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "citizen",
          "deposit",
          "source_id",
          "value",
          "balance",
          "created_at"
        ]
      },
      "IShoppingDepositHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingDepositHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-deposit.source"
                },
                {
                  "const": "-deposit.code"
                },
                {
                  "const": "-deposit.direction"
                },
                {
                  "const": "+deposit.source"
                },
                {
                  "const": "+deposit.code"
                },
                {
                  "const": "+deposit.direction"
                },
                {
                  "const": "-history.value"
                },
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "+history.value"
                },
                {
                  "const": "+history.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingDepositHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "deposit": {
            "$ref": "#/components/schemas/IShoppingDeposit.IRequest.ISearch"
          },
          "citizen_id": {
            "type": "string",
            "format": "uuid"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number",
            "minimum": 0
          },
          "maximum": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "IPageIShoppingMileageHistory": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingMileageHistory"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingMileageHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "citizen": {
            "$ref": "#/components/schemas/IShoppingCitizen"
          },
          "mileage": {
            "$ref": "#/components/schemas/IShoppingMileage"
          },
          "source_id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "citizen",
          "mileage",
          "source_id",
          "value",
          "balance",
          "created_at"
        ]
      },
      "IShoppingMileageHistory.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingMileageHistory.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-mileage.source"
                },
                {
                  "const": "-mileage.code"
                },
                {
                  "const": "-mileage.direction"
                },
                {
                  "const": "+mileage.source"
                },
                {
                  "const": "+mileage.code"
                },
                {
                  "const": "+mileage.direction"
                },
                {
                  "const": "-history.value"
                },
                {
                  "const": "-history.created_at"
                },
                {
                  "const": "+history.value"
                },
                {
                  "const": "+history.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingMileageHistory.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "mileage": {
            "$ref": "#/components/schemas/IShoppingMileage.IRequest.ISearch"
          },
          "citizen_id": {
            "type": "string",
            "format": "uuid"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "minimum": {
            "type": "number",
            "minimum": 0
          },
          "maximum": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "IPageIShoppingCartCommodity": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartCommodity"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingCartCommodity.IRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/IShoppingCartCommodity.IRequest.ISearch"
          },
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-seller.created_at"
                },
                {
                  "const": "-seller.goods.payments.real"
                },
                {
                  "const": "-seller.goods.publish_count"
                },
                {
                  "const": "-seller.reviews.average"
                },
                {
                  "const": "-seller.reviews.count"
                },
                {
                  "const": "-goods.publish_count"
                },
                {
                  "const": "-goods.payments.real"
                },
                {
                  "const": "-reviews.average"
                },
                {
                  "const": "-reviews.count"
                },
                {
                  "const": "-sale.created_at"
                },
                {
                  "const": "-sale.updated_at"
                },
                {
                  "const": "-sale.opened_at"
                },
                {
                  "const": "-sale.closed_at"
                },
                {
                  "const": "-sale.content.title"
                },
                {
                  "const": "-sale.price_range.lowest.real"
                },
                {
                  "const": "-sale.price_range.highest.real"
                },
                {
                  "const": "+seller.created_at"
                },
                {
                  "const": "+seller.goods.payments.real"
                },
                {
                  "const": "+seller.goods.publish_count"
                },
                {
                  "const": "+seller.reviews.average"
                },
                {
                  "const": "+seller.reviews.count"
                },
                {
                  "const": "+goods.publish_count"
                },
                {
                  "const": "+goods.payments.real"
                },
                {
                  "const": "+reviews.average"
                },
                {
                  "const": "+reviews.count"
                },
                {
                  "const": "+sale.created_at"
                },
                {
                  "const": "+sale.updated_at"
                },
                {
                  "const": "+sale.opened_at"
                },
                {
                  "const": "+sale.closed_at"
                },
                {
                  "const": "+sale.content.title"
                },
                {
                  "const": "+sale.price_range.lowest.real"
                },
                {
                  "const": "+sale.price_range.highest.real"
                },
                {
                  "const": "-commodity.price"
                },
                {
                  "const": "-commodity.volume"
                },
                {
                  "const": "-commodity.volumed_price"
                },
                {
                  "const": "-commodity.created_at"
                },
                {
                  "const": "+commodity.price"
                },
                {
                  "const": "+commodity.volume"
                },
                {
                  "const": "+commodity.volumed_price"
                },
                {
                  "const": "+commodity.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingCartCommodity.IRequest.ISearch": {
        "type": "object",
        "properties": {
          "min_price": {
            "type": "number"
          },
          "max_price": {
            "type": "number"
          },
          "min_volumed_price": {
            "type": "number"
          },
          "max_volumed_price": {
            "type": "number"
          },
          "sale": {
            "$ref": "#/components/schemas/IShoppingSale.IRequest.ISearch"
          }
        }
      },
      "IShoppingCartCommodity.ICreate": {
        "type": "object",
        "properties": {
          "sale_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target sale's {@link IShoppingSale.id}",
            "description": "Target sale's {@link IShoppingSale.id}."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartCommodityStock.ICreate"
            },
            "minItems": 1,
            "title": "List of the stocks to be purchased",
            "description": "List of the stocks to be purchased."
          },
          "volume": {
            "type": "integer",
            "minimum": 1,
            "title": "Volume of the commodity to purchase",
            "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values."
          },
          "accumulate": {
            "type": "boolean",
            "title": "Whether to accumulate the volume or not",
            "description": "Whether to accumulate the volume or not.\n\nIf this attribute is not `false` and there's same commodity that\ncomposed with same stocks and options, then the volume will be\naccumulated to the existed one.\n\nOtherwise, duplicated commodity would be newly created."
          }
        },
        "required": [
          "sale_id",
          "stocks",
          "volume"
        ],
        "description": "Creation information of a shopping cart commodity."
      },
      "IShoppingCartCommodityStock.ICreate": {
        "type": "object",
        "properties": {
          "unit_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target unit's {@link IShoppingSaleUnit.id}",
            "description": "Target unit's {@link IShoppingSaleUnit.id}."
          },
          "stock_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
            "description": "Target stock's {@link IShoppingSaleUnitStock.id}.\n\nIt must be matched with the {@link choices} property."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartCommodityStockChoice.ICreate"
            },
            "title": "Creation information of the choices for each option",
            "description": "Creation information of the choices for each option."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "title": "Quantity of the stock to purchase",
            "description": "Quantity of the stock to purchase.\n\nThis value is multiplied by the {@link IShoppingCartCommodity.volume}."
          }
        },
        "required": [
          "unit_id",
          "stock_id",
          "choices",
          "quantity"
        ],
        "description": "Creation information of the commodity stock of shopping cart.\n\nWhen record being created, its corresponding structure would be\n{@link IShoppingSaleSnapshotUnit.IInvert} and\n{@link IShoppingSaleSnapshotUnitStock.IInvert}."
      },
      "IShoppingCartCommodityStockChoice.ICreate": {
        "type": "object",
        "properties": {
          "option_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target option's {@link IShoppingSaleUnitOption.id}",
            "description": "Target option's {@link IShoppingSaleUnitOption.id}."
          },
          "candidate_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "uuid"
              }
            ],
            "title": "Target candidate's {@link IShoppingSaleUnitOptionCandidate.id}",
            "description": "Target candidate's {@link IShoppingSaleUnitOptionCandidate.id}.\n\nWhen target option's type is `select`, then this attribute is not\n`null` but has a value."
          },
          "value": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Written value about the option",
            "description": "Written value about the option.\n\nWhen target option's type is not `select`, but an atomic type value\nlike `boolean`, `number` or `string`, then this attribute is not\n`null` but has the matched atomic value."
          }
        },
        "required": [
          "option_id",
          "candidate_id",
          "value"
        ],
        "description": "Creation information of the choice for each option.\n\nWhen record being created, its corresponding structure would be\n{@link IShoppingSaleUnitStockChoice.IInvert}."
      },
      "IShoppingCartCommodity.IUpdate": {
        "type": "object",
        "properties": {
          "volume": {
            "type": "integer",
            "minimum": 1,
            "title": "Volume of the commodity to purchase",
            "description": "Volume of the commodity to purchase.\n\nA value indicating how many sets would be multiplied to the children\n{@link IShoppingSaleUnitStock.IInvert.quantity} values."
          }
        },
        "required": [
          "volume"
        ],
        "description": "Update information of a shopping cart commodity."
      },
      "IShoppingCartDiscountable": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "number"
          },
          "mileage": {
            "type": "number"
          },
          "combinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartDiscountable.ICombination"
            }
          }
        },
        "required": [
          "deposit",
          "mileage",
          "combinations"
        ]
      },
      "IShoppingCartDiscountable.ICombination": {
        "type": "object",
        "properties": {
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCoupon"
            }
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponTicket"
            }
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartDiscountable.IEntry"
            }
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "coupons",
          "tickets",
          "entries",
          "amount"
        ]
      },
      "IShoppingCartDiscountable.IEntry": {
        "type": "object",
        "properties": {
          "commodity_id": {
            "type": "string",
            "format": "uuid"
          },
          "pseudo": {
            "type": "boolean"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "commodity_id",
          "pseudo",
          "coupon_id",
          "amount"
        ]
      },
      "IShoppingCartDiscountable.IRequest": {
        "type": "object",
        "properties": {
          "commodity_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ]
          },
          "pseudos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCartCommodity.ICreate"
            }
          }
        },
        "required": [
          "commodity_ids",
          "pseudos"
        ]
      },
      "IShoppingOrder.ICreate": {
        "type": "object",
        "properties": {
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrderGood.ICreate"
            },
            "title": "List of goods in the order",
            "description": "List of goods in the order."
          }
        },
        "required": [
          "goods"
        ],
        "description": "Creation information of the order appliance."
      },
      "IShoppingOrderGood.ICreate": {
        "type": "object",
        "properties": {
          "commodity_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target commodity's {@link IShoppingCartCommodity.id}",
            "description": "Target commodity's {@link IShoppingCartCommodity.id}."
          },
          "volume": {
            "type": "integer",
            "title": "Volume of the good",
            "description": "Volume of the good.\n\nThe value multiplied to {@link IShoppingCartCommodityStock.quantity}.\nIt's purpose is exactly same with {@link IShoppingCartCommodity.volume},\nbut rewritten because the {@link IShoppingCartCommodity} records are reusable\nuntil payment."
          }
        },
        "required": [
          "commodity_id",
          "volume"
        ],
        "description": "Creation information of the good."
      },
      "IShoppingOrderDiscountable": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "number"
          },
          "mileage": {
            "type": "number"
          },
          "combinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrderDiscountable.ICombination"
            }
          }
        },
        "required": [
          "deposit",
          "mileage",
          "combinations"
        ]
      },
      "IShoppingOrderDiscountable.ICombination": {
        "type": "object",
        "properties": {
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCoupon"
            }
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingCouponTicket"
            }
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrderDiscountable.IEntry"
            }
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "coupons",
          "tickets",
          "entries",
          "amount"
        ]
      },
      "IShoppingOrderDiscountable.IEntry": {
        "type": "object",
        "properties": {
          "good_id": {
            "type": "string",
            "format": "uuid"
          },
          "coupon_id": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "good_id",
          "coupon_id",
          "amount"
        ]
      },
      "IShoppingOrderDiscountable.IRequest": {
        "type": "object",
        "properties": {
          "good_ids": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ]
          }
        },
        "required": [
          "good_ids"
        ]
      },
      "IShoppingOrderPrice.ICreate": {
        "type": "object",
        "properties": {
          "deposit": {
            "type": "number"
          },
          "mileage": {
            "type": "number"
          },
          "coupon_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "deposit",
          "mileage",
          "coupon_ids"
        ]
      },
      "IShoppingOrderPublish.ICashCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "cash"
          },
          "address": {
            "$ref": "#/components/schemas/IShoppingAddress.ICreate"
          },
          "vendor": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "address",
          "vendor",
          "uid"
        ]
      },
      "IShoppingAddress.ICreate": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "string",
            "pattern": "^[0-9]*$",
            "title": "Mobile number to contact",
            "description": "Mobile number to contact."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the address",
            "description": "Representative name of the address.\n\nSometimes be receiver's name, and sometimes be place name."
          },
          "country": {
            "type": "string",
            "title": "Country name",
            "description": "Country name."
          },
          "province": {
            "type": "string",
            "title": "Province name",
            "description": "Province name."
          },
          "city": {
            "type": "string",
            "title": "City name",
            "description": "City name."
          },
          "department": {
            "type": "string",
            "title": "Department name",
            "description": "Department name."
          },
          "possession": {
            "type": "string",
            "title": "Detailed address containing street name, building number, and room number",
            "description": "Detailed address containing street name, building number, and room number."
          },
          "zip_code": {
            "type": "string",
            "title": "Zip code, or postal code",
            "description": "Zip code, or postal code."
          },
          "special_note": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Special description if required",
            "description": "Special description if required."
          }
        },
        "required": [
          "mobile",
          "name",
          "country",
          "province",
          "city",
          "department",
          "possession",
          "zip_code",
          "special_note"
        ]
      },
      "IShoppingOrderPublish.IZeroCreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "zero"
          },
          "address": {
            "$ref": "#/components/schemas/IShoppingAddress.ICreate"
          }
        },
        "required": [
          "type",
          "address"
        ]
      },
      "IShoppingSaleQuestion.ICreate": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "boolean",
            "title": "Whether the question article is secret or not",
            "description": "Whether the question article is secret or not.\n\nIf secret article, only the writer customer and related seller can see\nthe detailed content."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "secret",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Creation information of the question."
      },
      "IBbsArticle.ICreate": {
        "type": "object",
        "properties": {
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Creation information of the article."
      },
      "IShoppingSaleReview.ICreate": {
        "type": "object",
        "properties": {
          "good_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target good's {@link IShoppingOrderGood.id}",
            "description": "Target good's {@link IShoppingOrderGood.id}."
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Score of the review",
            "description": "Score of the review."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "good_id",
          "score",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Creation information of the review."
      },
      "IShoppingSaleReview.IUpdate": {
        "type": "object",
        "properties": {
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "title": "Score of the review",
            "description": "Score of the review."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "score",
          "format",
          "title",
          "body",
          "files"
        ],
        "description": "Updating information of the review."
      },
      "IShoppingSeller.IJoin": {
        "type": "object",
        "properties": {}
      },
      "IPageIShoppingDelivery.IInvert": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDelivery.IInvert"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingDelivery.IInvert": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrder.IInvertFromDelivery"
            },
            "minItems": 1,
            "title": "List of orders of the delivery",
            "description": "List of orders of the delivery."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "seller": {
            "$ref": "#/components/schemas/IShoppingSeller",
            "title": "Seller who've delivered the goods",
            "description": "Seller who've delivered the goods."
          },
          "journeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryJourney"
            },
            "title": "List of journeys of the delivery",
            "description": "List of journeys of the delivery."
          },
          "pieces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryPiece"
            },
            "minItems": 1,
            "title": "List of pieces of the delivery",
            "description": "List of pieces of the delivery."
          },
          "shippers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryShipper"
            },
            "title": "List of shippers of the delivery",
            "description": "List of shippers of the delivery."
          },
          "state": {
            "oneOf": [
              {
                "const": "none"
              },
              {
                "const": "underway"
              },
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              },
              {
                "const": "arrived"
              }
            ],
            "title": "State of the delivery",
            "description": "State of the delivery."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "orders",
          "id",
          "seller",
          "journeys",
          "pieces",
          "shippers",
          "state",
          "created_at"
        ],
        "description": "Invert information of the delivery."
      },
      "IShoppingOrder.IInvertFromDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "customer": {
            "$ref": "#/components/schemas/IShoppingCustomer",
            "title": "Customer who've applied for the order",
            "description": "Customer who've applied for the order."
          },
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingOrderGood"
            },
            "minItems": 1,
            "title": "List of goods in the order",
            "description": "List of goods in the order."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingOrderPrice",
            "title": "Price information including discounts",
            "description": "Price information including discounts."
          },
          "publish": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IShoppingOrderPublish.IInvertFromDelivery"
              }
            ],
            "title": "Order completion and payment information",
            "description": "Order completion and payment information."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          }
        },
        "required": [
          "id",
          "customer",
          "goods",
          "price",
          "publish",
          "created_at"
        ],
        "description": "Invert information from delivery."
      },
      "IShoppingOrderPublish.IInvertFromDelivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record."
          },
          "paid_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Time when the order was paid",
            "description": "Time when the order was paid."
          },
          "cancelled_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Time when the payment was cancelled",
            "description": "Time when the payment was cancelled."
          },
          "address": {
            "$ref": "#/components/schemas/IShoppingAddress",
            "title": "Address where the {@link IShoppingOrderGood goods} to be delivered",
            "description": "Address where the {@link IShoppingOrderGood goods} to be delivered."
          }
        },
        "required": [
          "id",
          "created_at",
          "paid_at",
          "cancelled_at",
          "address"
        ],
        "description": "Invert information from the delivery."
      },
      "IShoppingDelivery.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-delivery.created_at"
                },
                {
                  "const": "+delivery.created_at"
                }
              ]
            }
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        }
      },
      "IShoppingDelivery.ICreate": {
        "type": "object",
        "properties": {
          "pieces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryPiece.ICreate"
            },
            "minItems": 1,
            "title": "List of pieces of the delivery",
            "description": "List of pieces of the delivery."
          },
          "journeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryJourney.ICreate"
            },
            "title": "List of journeys of the delivery",
            "description": "List of journeys of the delivery.\n\nThis is initial data, and it is also possible to accumulate journey data\nafter the delivery creation."
          },
          "shippers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingDeliveryShipper.ICreate"
            },
            "title": "List of shippers of the delivery",
            "description": "List of shippers of the delivery."
          }
        },
        "required": [
          "pieces",
          "journeys",
          "shippers"
        ],
        "description": "Creation information of the delivery."
      },
      "IShoppingDeliveryPiece.ICreate": {
        "type": "object",
        "properties": {
          "publish_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target order's {@link IShoppingOrderPublish.id}",
            "description": "Target order's {@link IShoppingOrderPublish.id}."
          },
          "good_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target good's {@link IShoppingOrderGood.id}",
            "description": "Target good's {@link IShoppingOrderGood.id}."
          },
          "stock_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target stock's {@link IShoppingSaleUnitStock.id}",
            "description": "Target stock's {@link IShoppingSaleUnitStock.id}."
          },
          "quantity": {
            "type": "number",
            "minimum": 0,
            "title": "Quantity of the stock",
            "description": "Quantity of the stock.\n\nIt can be precision value to express splitted shipping."
          }
        },
        "required": [
          "publish_id",
          "good_id",
          "stock_id",
          "quantity"
        ],
        "description": "Creation information of the delivery piece."
      },
      "IShoppingDeliveryJourney.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "preparing"
              },
              {
                "const": "manufacturing"
              },
              {
                "const": "shipping"
              },
              {
                "const": "delivering"
              }
            ],
            "title": "Type of journey",
            "description": "Type of journey.\n\n- preparing\n- manufacturing\n- shipping\n- delivering"
          },
          "title": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Title of journey",
            "description": "Title of journey."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Description of journey",
            "description": "Description of journey."
          },
          "started_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Start time of the journey",
            "description": "Start time of the journey."
          },
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Completion time of the journey",
            "description": "Completion time of the journey."
          }
        },
        "required": [
          "type",
          "title",
          "description",
          "started_at",
          "completed_at"
        ],
        "description": "Creation information of the delivery journey."
      },
      "IShoppingDeliveryShipper.ICreate": {
        "type": "object",
        "properties": {
          "company": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          }
        },
        "required": [
          "company",
          "name",
          "mobile"
        ]
      },
      "IShoppingDeliveryPiece.IRequest": {
        "type": "object",
        "properties": {
          "publish_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "publish_ids"
        ]
      },
      "IShoppingDeliveryJourney.IComplete": {
        "type": "object",
        "properties": {
          "completed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Completion time of the journey",
            "description": "Completion time of the journey."
          }
        },
        "required": [
          "completed_at"
        ],
        "description": "Completion information of the delivery journey."
      },
      "IShoppingSale.ICreate": {
        "type": "object",
        "properties": {
          "section_code": {
            "type": "string",
            "title": "Belonged section's {@link IShoppingSection.code}",
            "description": "Belonged section's {@link IShoppingSection.code}."
          },
          "status": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "paused"
              },
              {
                "const": "suspended"
              }
            ],
            "title": "Initial status of the sale",
            "description": "Initial status of the sale.\n\n`null` or `undefined`: No restriction\n`paused`: Starts with {@link ITimestamps.paused_at paused} status\n`suspended`: Starts with {@link ITimestamps.suspended_at suspended} status"
          },
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the sale",
            "description": "Opening time of the sale."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the sale",
            "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever."
          },
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent.ICreate"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel.ICreate"
            }
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit.ICreate"
            },
            "minItems": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "section_code",
          "opened_at",
          "closed_at",
          "content",
          "channels",
          "units",
          "tags"
        ],
        "description": "Creation information of sale."
      },
      "IShoppingSaleContent.ICreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ]
          },
          "body": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            }
          },
          "thumbnails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            }
          }
        },
        "required": [
          "title",
          "format",
          "body",
          "files",
          "thumbnails"
        ]
      },
      "IShoppingSaleChannel.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "title": "Target channel's {@link IShoppingChannel.code}",
            "description": "Target channel's {@link IShoppingChannel.code}."
          },
          "category_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "List of target categories' {@link IShoppingChannelCategory.id}s",
            "description": "List of target categories' {@link IShoppingChannelCategory.id}s.\n\nIf empty, it means all categories of the channel is listing the sale."
          }
        },
        "required": [
          "code",
          "category_ids"
        ],
        "description": "Creation information of the target channel (and categories) of sale to sell."
      },
      "IShoppingSaleUnit.ICreate": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/IShoppingSaleUnitSelectableOption.ICreate"
                },
                {
                  "$ref": "#/components/schemas/IShoppingSaleUnitDescriptiveOption.ICreate"
                }
              ]
            },
            "title": "List of options",
            "description": "List of options."
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStock.ICreate"
            },
            "minItems": 1,
            "title": "List of final stocks",
            "description": "List of final stocks."
          },
          "name": {
            "type": "string",
            "title": "Representative name of the unit",
            "description": "Representative name of the unit."
          },
          "primary": {
            "type": "boolean",
            "title": "Whether the unit is primary or not",
            "description": "Whether the unit is primary or not.\n\nJust a labeling value."
          },
          "required": {
            "type": "boolean",
            "title": "Whether the unit is required or not",
            "description": "Whether the unit is required or not.\n\nWhen the unit is required, the customer must select the unit. If do not\nselect, customer can't buy it.\n\nFor example, if there's a sale \"Macbook Set\" and one of the unit is the\n\"Main Body\", is it possible to buy the \"Macbook Set\" without the\n\"Main Body\" unit? This property is for that case."
          }
        },
        "required": [
          "options",
          "stocks",
          "name",
          "primary",
          "required"
        ],
        "description": "Creation information of sale unit."
      },
      "IShoppingSaleUnitSelectableOption.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "const": "select",
            "title": "Discriminant for the type of selectable option",
            "description": "Discriminant for the type of selectable option."
          },
          "name": {
            "type": "string",
            "title": "Represents the name of the option",
            "description": "Represents the name of the option."
          },
          "variable": {
            "type": "boolean",
            "title": "Whether the option is variable or not",
            "description": "Whether the option is variable or not.\n\nWhen type of current option is \"select\", this attribute means whether\nselecting different candidate value affects the final stock or not."
          },
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitOptionCandidate.ICreate"
            },
            "minItems": 1,
            "title": "List of candidate values",
            "description": "List of candidate values."
          }
        },
        "required": [
          "type",
          "name",
          "variable",
          "candidates"
        ],
        "description": "Creation information of the selectable option."
      },
      "IShoppingSaleUnitOptionCandidate.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Represents the name of the candidate value",
            "description": "Represents the name of the candidate value."
          }
        },
        "required": [
          "name"
        ],
        "description": "Creation information of the candidate value."
      },
      "IShoppingSaleUnitDescriptiveOption.ICreate": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              }
            ],
            "title": "Type of descriptive option",
            "description": "Type of descriptive option.\n\nWhich typed value should be written when purchasing."
          },
          "name": {
            "type": "string",
            "title": "Readable name of the option",
            "description": "Readable name of the option."
          }
        },
        "required": [
          "type",
          "name"
        ],
        "description": "Creation information of the descriptive option."
      },
      "IShoppingSaleUnitStock.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Representative name of the stock",
            "description": "Representative name of the stock."
          },
          "price": {
            "$ref": "#/components/schemas/IShoppingPrice",
            "title": "Price of the stock",
            "description": "Price of the stock."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "title": "Initial inventory quantity",
            "description": "Initial inventory quantity."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStockChoice.ICreate"
            },
            "title": "List of choices",
            "description": "List of choices.\n\nWhich candidate values being chosen for each option."
          }
        },
        "required": [
          "name",
          "price",
          "quantity",
          "choices"
        ],
        "description": "Creation information of the stock."
      },
      "IShoppingSaleUnitStockChoice.ICreate": {
        "type": "object",
        "properties": {
          "option_index": {
            "type": "integer",
            "description": "Target option's index number in\n{@link IShoppingSaleUnit.ICreate.options}."
          },
          "candidate_index": {
            "type": "integer",
            "description": "Target candidate's index number in\n{@link IShoppingSaleUnitSelectableOption.ICreate.candidates}."
          }
        },
        "required": [
          "option_index",
          "candidate_index"
        ],
        "description": "Creation information of stock choice."
      },
      "IShoppingSaleSnapshot.ICreate": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/IShoppingSaleContent.ICreate"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleChannel.ICreate"
            }
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnit.ICreate"
            },
            "minItems": 1
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "content",
          "channels",
          "units",
          "tags"
        ],
        "description": "Creation information of the snapshot."
      },
      "IShoppingSale.IUpdateOpeningTime": {
        "type": "object",
        "properties": {
          "opened_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Opening time of the sale",
            "description": "Opening time of the sale."
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Closing time of the sale",
            "description": "Closing time of the sale.\n\nIf this value is `null`, the sale be continued forever."
          }
        },
        "required": [
          "opened_at",
          "closed_at"
        ],
        "description": "Update opening time information of sale."
      },
      "IShoppingSaleInquiryAnswer.ISnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of snapshot record",
            "description": "Creation time of snapshot record.\n\nIn other words, creation time or update time or article."
          },
          "format": {
            "oneOf": [
              {
                "const": "html"
              },
              {
                "const": "md"
              },
              {
                "const": "txt"
              }
            ],
            "title": "Format of body",
            "description": "Format of body.\n\nSame meaning with extension like `html`, `md`, `txt`."
          },
          "title": {
            "type": "string",
            "title": "Title of article",
            "description": "Title of article."
          },
          "body": {
            "type": "string",
            "title": "Content body of article",
            "description": "Content body of article."
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAttachmentFile.ICreate"
            },
            "title": "List of attachment files",
            "description": "List of attachment files."
          }
        },
        "required": [
          "id",
          "created_at",
          "format",
          "title",
          "body",
          "files"
        ]
      },
      "IPageIShoppingSaleUnitStockSupplement": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "title": "Page information",
            "description": "Page information."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IShoppingSaleUnitStockSupplement"
            },
            "title": "List of records",
            "description": "List of records."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "A page.\n\nCollection of records with pagination indformation."
      },
      "IShoppingSaleUnitStockSupplement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Primary Key",
            "description": "Primary Key."
          },
          "value": {
            "type": "integer",
            "title": "Supplemented quantity",
            "description": "Supplemented quantity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Creation time of the record",
            "description": "Creation time of the record.\n\nAnother words, the time when inventory of the stock being supplemented."
          }
        },
        "required": [
          "id",
          "value",
          "created_at"
        ],
        "description": "Supplementation of inventory quantity of stock.\n\nYou know what? If a {@link IShoppingSaleUnitStock stock} has been sold over\nits {@link IShoppingSaleUnitStock.ICreate.quantity initial inventory quantity},\nthe stock can't be sold anymore, because of out of stock. In that case, how the\n{@link IShoppingSeller} should do?\n\nWhen the sotck is sold out, seller can supplement the inventory record by\nregistering this `IShoppingSaleUnitStockSupplement` record. Right, this\n`IShoppingSaleUnitStockSupplement` is an entity that embodies the\nsupplementation of the inventory quantity of the belonged stock."
      },
      "IShoppingSaleUnitStockSupplement.IRequest": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "const": "-created_at"
                },
                {
                  "const": "+created_at"
                }
              ]
            },
            "title": "Sortable columns",
            "description": "Sortable columns."
          },
          "page": {
            "type": "integer",
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "title": "Limitation of records per a page",
            "description": "Limitation of records per a page."
          }
        },
        "description": "Request information of the stock supplement list."
      },
      "IShoppingSaleUnitStockSupplement.ICreate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "title": "Supplemented quantity",
            "description": "Supplemented quantity."
          }
        },
        "required": [
          "value"
        ],
        "description": "Creation information of the supplement."
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Monitor"
    },
    {
      "name": "Authenticate"
    },
    {
      "name": "Discount"
    },
    {
      "name": "Order"
    },
    {
      "name": "Sale"
    },
    {
      "name": "Systematic"
    },
    {
      "name": "Section"
    }
  ],
  "x-samchon-emended": true
}